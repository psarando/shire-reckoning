{"version":3,"file":"static/js/main.99852b7c.js","mappings":"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","sources":["webpack://TolkienCalendars/webpack/universalModuleDefinition","webpack://TolkienCalendars/./src/index.js","webpack://TolkienCalendars/./src/GondorReckoning.ts","webpack://TolkienCalendars/./src/RivendellReckoning.ts","webpack://TolkienCalendars/./src/ShireReckoning.ts","webpack://TolkienCalendars/./src/Utils.ts","webpack://TolkienCalendars/./src/examples/Common.tsx","webpack://TolkienCalendars/./src/examples/GondorCalendarWithControls.tsx","webpack://TolkienCalendars/./src/examples/RivendellCalendarWithControls.tsx","webpack://TolkienCalendars/./src/examples/ShireCalendarWithControls.tsx","webpack://TolkienCalendars/./src/examples/TolkienCalendars.tsx","webpack://TolkienCalendars/./src/examples/controls/LanguagePicker.tsx","webpack://TolkienCalendars/./src/examples/controls/MonthViewLayout.tsx","webpack://TolkienCalendars/./src/examples/controls/MonthViewPicker.tsx","webpack://TolkienCalendars/./src/examples/controls/ShireRegionPicker.tsx","webpack://TolkienCalendars/./src/examples/controls/StartDatePicker.tsx","webpack://TolkienCalendars/./src/examples/simulation/DatesOfInterest.ts","webpack://TolkienCalendars/./src/examples/simulation/GondorCalendars.tsx","webpack://TolkienCalendars/./src/examples/simulation/RivendellCalendar.tsx","webpack://TolkienCalendars/./src/examples/simulation/ShireCalendar.tsx","webpack://TolkienCalendars/./src/examples/simulation/ShireDatePicker.tsx","webpack://TolkienCalendars/./src/examples/simulation/StartReckoningDatePicker.tsx","webpack://TolkienCalendars/./src/examples/simulation/TolkienCalendars.tsx","webpack://TolkienCalendars/./src/examples/theme.ts","webpack://TolkienCalendars/./src/ui/DateCell.tsx","webpack://TolkienCalendars/./src/ui/GondorCalendar.tsx","webpack://TolkienCalendars/./src/ui/IntercalaryDay.tsx","webpack://TolkienCalendars/./src/ui/RivendellCalendar.tsx","webpack://TolkienCalendars/./src/ui/ShireCalendar.tsx","webpack://TolkienCalendars/./src/ui/WeekDayHeaderCell.tsx","webpack://TolkienCalendars/./src/ui/controls/LanguagePicker.ts","webpack://TolkienCalendars/./src/ui/controls/MonthViewLayout.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TolkienCalendars\"] = factory();\n\telse\n\t\troot[\"TolkienCalendars\"] = factory();\n})(self, function() {\nreturn ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nwindow.React = React;\nwindow.ReactDOM = ReactDOM;\n\nexport { StyledTolkienCalendars } from \"./examples/TolkienCalendars\";\nexport { StyledSimulations } from \"./examples/simulation/TolkienCalendars\";\n\nexport * from \"./lib\";\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport { CommonElvishHolidays, ElvishHolidays } from \"./RivendellReckoning\";\nimport {\n    Calendar,\n    CalendarDate,\n    toDaysElapsed,\n    daysElapsedToGregorianYear,\n    daysElapsedToSecondAgeYear,\n    daysElapsedToNewReckoningYear,\n    getNewYearDate,\n    getWeekDay,\n    isLeapYear,\n    datesMatch,\n    fullYearDate,\n    getNextDate,\n} from \"./Utils\";\n\nenum GondorReckoningEnum {\n    KINGS = \"kings\",\n    STEWARDS = \"stewards\",\n    NEW = \"new\",\n}\n\nenum GondorLeapYearRuleEnum {\n    TRADITIONAL = \"traditional\",\n    GREGORIAN = \"reformed\",\n}\n\n/**\n * @property emoji - An icon representing this weekday.\n * @property english - The English translation of this weekday name.\n * @property quenya - The Quenya name for this weekday.\n * @property sindarin - The Sindarin name for this weekday.\n * @property description\n */\ninterface GondorWeekday {\n    emoji: string;\n    english: string;\n    quenya: string;\n    sindarin: string;\n    description: string;\n}\n\n/**\n * Weekday names and descriptions\n * @constant\n */\nconst GondorWeekdays: GondorWeekday[] = [\n    {\n        emoji: \"⭐\",\n        english: \"Stars Day\",\n        quenya: \"Elenya\",\n        sindarin: \"Orgilion\",\n        description: \"English: Stars Day\\nQuenya: Elenya\\nSindarin: Orgilion\",\n    },\n    {\n        emoji: \"☀️\",\n        english: \"Sun Day\",\n        quenya: \"Anarya\",\n        sindarin: \"Oranor\",\n        description: \"English: Sun Day\\nQuenya: Anarya\\nSindarin: Oranor\",\n    },\n    {\n        emoji: \"🌙\",\n        english: \"Moon Day\",\n        quenya: \"Isilya\",\n        sindarin: \"Orithil\",\n        description: \"English: Moon Day\\nQuenya: Isilya\\nSindarin: Orithil\",\n    },\n    {\n        emoji: \"🌳\",\n        english: \"White Tree's Day\",\n        quenya: \"Aldëa\",\n        sindarin: \"Orgaladh\",\n        description:\n            \"English: White Tree's Day\\nQuenya: Aldëa\\nSindarin: Orgaladh\",\n    },\n    {\n        emoji: \"🌌\",\n        english: \"Heavens Day\",\n        quenya: \"Menelya\",\n        sindarin: \"Ormenel\",\n        description: \"English: Heavens Day\\nQuenya: Menelya\\nSindarin: Ormenel\",\n    },\n    {\n        emoji: \"🌊\",\n        english: \"Sea Day\",\n        quenya: \"Eärenya\",\n        sindarin: \"Oraearon\",\n        description: \"English: Sea Day\\nQuenya: Eärenya\\nSindarin: Oraearon\",\n    },\n    {\n        emoji: \"🏔\",\n        english: \"Valar or Powers Day\",\n        quenya: \"Valanya or Tárion\",\n        sindarin: \"Orbelain or Rodyn\",\n        description:\n            \"English: Valar or Powers Day\\nQuenya: Valanya or Tárion\\nSindarin: Orbelain or Rodyn\",\n    },\n];\n\n/**\n * @property emoji - An icon representing this month.\n * @property english - The English translation of this month name.\n * @property quenya - The Quenya name for this month.\n * @property sindarin - The Sindarin name for this month.\n * @property description\n * @property className - UI-hint for styling this month.\n */\ninterface GondorMonth {\n    emoji: string;\n    english: string;\n    quenya: string;\n    sindarin: string;\n    description: string;\n    className: string;\n}\n\n/**\n * Month names and descriptions.\n * @constant\n */\nconst GondorMonths: GondorMonth[] = [\n    {\n        emoji: \"🌄\",\n        english: \"New Sun\",\n        quenya: \"Narvinyë\",\n        sindarin: \"Narwain\",\n        description: \"English: New Sun\\nQuenya: Narvinyë\\nSindarin: Narwain\",\n        className: \"afteryule\",\n    },\n    {\n        emoji: \"🌧\",\n        english: \"Wet Month\",\n        quenya: \"Nénimë\",\n        sindarin: \"Nínui\",\n        description: \"English: Wet Month\\nQuenya: Nénimë\\nSindarin: Nínui\",\n        className: \"solmath\",\n    },\n    {\n        emoji: \"🌬\",\n        english: \"Windy Month\",\n        quenya: \"Súlimë\",\n        sindarin: \"Gwaeron\",\n        description: \"English: Windy Month\\nQuenya: Súlimë\\nSindarin: Gwaeron\",\n        className: \"rethe\",\n    },\n    {\n        emoji: \"🌱\",\n        english: \"Budding Month\",\n        quenya: \"Víressë\",\n        sindarin: \"Gwirith\",\n        description:\n            \"English: Spring/Budding Month\\nQuenya: Víressë\\nSindarin: Gwirith\",\n        className: \"astron\",\n    },\n    {\n        emoji: \"🌼\",\n        english: \"Flower Month\",\n        quenya: \"Lótessë\",\n        sindarin: \"Lothron\",\n        description:\n            \"English: Flower Month\\nQuenya: Lótessë\\nSindarin: Lothron\",\n        className: \"thrimidge\",\n    },\n    {\n        emoji: \"☀️\",\n        english: \"Sunny Month\",\n        quenya: \"Nárië\",\n        sindarin: \"Nórui\",\n        description: \"English: Sunny Month\\nQuenya: Nárië\\nSindarin: Nórui\",\n        className: \"forelithe\",\n    },\n    {\n        emoji: \"🍃\",\n        english: \"Reaping Month\",\n        quenya: \"Cermië\",\n        sindarin: \"Cerveth\",\n        description:\n            \"English: Reaping Month\\nQuenya: Cermië\\nSindarin: Cerveth\",\n        className: \"afterlithe\",\n    },\n    {\n        emoji: \"🌿\",\n        english: \"Hot Month\",\n        quenya: \"Urimë\",\n        sindarin: \"Urui\",\n        description: \"English: Hot Month\\nQuenya: Urimë\\nSindarin: Urui\",\n        className: \"wedmath\",\n    },\n    {\n        emoji: \"🍇\",\n        english: \"Fruit Giving\",\n        quenya: \"Yavannië\",\n        sindarin: \"Ivanneth\",\n        description:\n            \"English: Fruit-giving Month\\nQuenya: Yavannië\\nSindarin: Ivanneth\",\n        className: \"halimath\",\n    },\n    {\n        emoji: \"🍂\",\n        english: \"Sun Waning\",\n        quenya: \"Narquelië\",\n        sindarin: \"Narbeleth\",\n        description:\n            \"English: Sun Waning/Fading\\nQuenya: Narquelië\\nSindarin: Narbeleth\",\n        className: \"winterfilth\",\n    },\n    {\n        emoji: \"🌫\",\n        english: \"Misty Month\",\n        quenya: \"Hísimë\",\n        sindarin: \"Hithui\",\n        description: \"English: Misty Month\\nQuenya: Hísimë\\nSindarin: Hithui\",\n        className: \"blotmath\",\n    },\n    {\n        emoji: \"❄️\",\n        english: \"Cold Month\",\n        quenya: \"Ringarë\",\n        sindarin: \"Girithron\",\n        description:\n            \"English: Cold/Shivering Month\\nQuenya: Ringarë\\nSindarin: Girithron\",\n        className: \"foreyule\",\n    },\n];\n\n/**\n * Gondor Holiday names and descriptions.\n * @constant\n */\nconst GondorHolidays: ElvishHolidays = {\n    ...CommonElvishHolidays,\n    Loëndë: {\n        english: \"Midyear's Day\",\n        quenya: \"Loëndë\",\n        sindarin: \"Lawenedh\",\n        description: \"Midyear's Day\",\n    },\n    Tuilérë: {\n        english: \"Spring-day\",\n        quenya: \"Tuilérë\",\n        sindarin: \"Ethuilor\",\n        description: \"Stewards' Midspring Day\",\n    },\n    Yáviérë: {\n        english: \"Autumn-day\",\n        quenya: \"Yáviérë\",\n        sindarin: \"Iavassor\",\n        description: \"Stewards' Midautumn Day\",\n    },\n    Cormarë: {\n        english: \"Ringday\",\n        quenya: \"Cormarë\",\n        sindarin: \"Corvor\",\n        description: \"Ring-bearer's Day\",\n    },\n};\n\n/**\n * @default new Date(0, 11, 21, 0,0,0)\n *\n * The Gregorian Date corresponding to the first Númenor New Year Date.\n * The default year is 0 in order to keep Gondor leap-years in sync with Gregorian leap-years.\n */\ntype FirstNumenorNewYearDate = Date;\n\n/**\n * @param {FirstNumenorNewYearDate} [startDate]\n * @return {FirstNumenorNewYearDate} startDate if not null, otherwise the default first New Year Date.\n */\nconst getStartDate = (\n    startDate?: FirstNumenorNewYearDate\n): FirstNumenorNewYearDate => {\n    if (!startDate) {\n        startDate = fullYearDate(0, 11, 21);\n    }\n\n    return startDate;\n};\n\n/**\n * @param {number} gondorYear\n * @return {boolean} True if the given `gondorYear` is a millennial year that requires an additional leap-day adjustment.\n */\nconst isMillennialLeapYear = (gondorYear: number): boolean => {\n    if (gondorYear > 3441) {\n        gondorYear -= 3441;\n\n        if (2000 < gondorYear && gondorYear < 4000) {\n            return gondorYear === 2059 || gondorYear === 2360;\n        }\n    }\n\n    return !(gondorYear % 1000);\n};\n\n/**\n * @param {number} gondorYear\n * @param {GondorLeapYearRuleEnum} [rules=GondorLeapYearRuleEnum.GREGORIAN]\n *\n * @return {boolean} True if the given `gondorYear` is a leap-year (standard or millennial).\n */\nconst isGondorLeapYear = (\n    gondorYear: number,\n    rules: GondorLeapYearRuleEnum = GondorLeapYearRuleEnum.GREGORIAN\n): boolean => {\n    if (rules === GondorLeapYearRuleEnum.GREGORIAN) {\n        return isLeapYear(gondorYear);\n    }\n\n    const millennialLeapYear = isMillennialLeapYear(gondorYear);\n\n    if (gondorYear > 3441) {\n        gondorYear -= 3441;\n    }\n\n    return (\n        (gondorYear % 4 === 0 && gondorYear % 100 !== 0) || millennialLeapYear\n    );\n};\n\n/**\n * @param {Date} today\n * @param {FirstNumenorNewYearDate} [startDate]\n * @param {GondorLeapYearRuleEnum} [rules=GondorLeapYearRuleEnum.GREGORIAN]\n *\n * @return {Date} The Gregorian Date corresponding to the Gondor New Year Date\n *                for the year of the given `today`.\n */\nconst getGondorNewYearDate = (\n    today: Date,\n    startDate: FirstNumenorNewYearDate,\n    rules: GondorLeapYearRuleEnum = GondorLeapYearRuleEnum.GREGORIAN\n): Date => {\n    startDate = getStartDate(startDate);\n\n    const getYearWithRemainder =\n        rules === GondorLeapYearRuleEnum.TRADITIONAL\n            ? daysElapsedToSecondAgeYear\n            : daysElapsedToGregorianYear;\n\n    const yearWithRemainder = getYearWithRemainder(\n        toDaysElapsed(startDate, today)\n    );\n\n    return getNewYearDate(startDate, today, yearWithRemainder.daysRemainder);\n};\n\n/**\n * @param {Date} today\n * @param {FirstNumenorNewYearDate} [startDate]\n * @param {GondorLeapYearRuleEnum} [rules=GondorLeapYearRuleEnum.GREGORIAN]\n *\n * @return {Date} The Gregorian Date corresponding to the Gondor New Year Date\n *                in the New Reckoning calendar for the year of the given `today`.\n */\nconst getNewReckoningNewYearDate = (\n    today: Date,\n    startDate: FirstNumenorNewYearDate,\n    rules: GondorLeapYearRuleEnum\n): Date => {\n    startDate = getStartDate(startDate);\n\n    const getYearWithRemainder =\n        rules === GondorLeapYearRuleEnum.TRADITIONAL\n            ? daysElapsedToSecondAgeYear\n            : daysElapsedToGregorianYear;\n\n    const daysElapsed = toDaysElapsed(startDate, today);\n    const yearWithRemainder = daysElapsedToNewReckoningYear(\n        getYearWithRemainder,\n        daysElapsed\n    );\n\n    return getNewYearDate(startDate, today, yearWithRemainder.daysRemainder);\n};\n\n/**\n * @param {GondorReckoningEnum} fromReckoning\n * @param {GondorReckoningEnum} toReckoning\n * @param {number} monthIndex The current {@link GondorMonths} index for the given `fromReckoning`.\n *\n * @return {number} The index to use with {@link GondorMonths} for the given `toReckoning`\n *                  that most closely matches the given `monthIndex`.\n */\nconst convertGondorianMonthIndex = (\n    fromReckoning: GondorReckoningEnum,\n    toReckoning: GondorReckoningEnum,\n    monthIndex: number\n): number => {\n    const fromNewReckoning = fromReckoning === GondorReckoningEnum.NEW;\n    const toNewReckoning = toReckoning === GondorReckoningEnum.NEW;\n    if (fromNewReckoning !== toNewReckoning) {\n        fromNewReckoning ? (monthIndex += 3) : (monthIndex -= 3);\n\n        // handle values less than 0 or greater than 12\n        monthIndex = (monthIndex + 12) % 12;\n    }\n\n    return monthIndex;\n};\n\n/**\n * @param {number} weekday - The current Gregorian weekday index (Sunday = 0).\n * @return {number} The Gondorian weekday index, for use with {@link GondorWeekdays},\n *                  that is the cultural equivalent for the given Gregorian weekday index.\n */\nconst convertGregorianToGondorianWeekday = (weekday: number): number => {\n    return (weekday + 6) % 7;\n};\n\n/**\n * @property day - The number of the day of the month, if this date is not intercalary; otherwise, the name of the intercalary date.\n * @property month - The month index of {@link GondorMonths}.\n * @property weekDay - The weekday index of {@link GondorWeekdays}.\n * @property gregorian - The corresponding Gregorian date.\n */\ninterface GondorDate extends CalendarDate {\n    className?: string;\n}\n\n/**\n * @property year - The current Gondor year.\n * @property dates - The dates of this Gondor calendar year.\n * @property todayGondor - The current Gondor date corresponding to the given {@link GondorCalendarYear.today}.\n */\ninterface GondorCalendarYear extends Calendar {\n    dates: GondorDate[];\n    todayGondor: GondorDate;\n}\n\n/**\n * Generates a calendar year for the given Date `today`,\n * according to the given `startDate` and `reckoning` rules.\n *\n * @param {Date} today\n * @param {FirstNumenorNewYearDate} [startDate]\n * @param {GondorReckoningEnum} [reckoning=GondorReckoningEnum.STEWARDS]\n * @param {GondorLeapYearRuleEnum} [rules=GondorLeapYearRuleEnum.GREGORIAN]\n *\n * @return {GondorCalendarYear} The calendar year for the given `today`.\n */\nconst makeGondorCalendarDates = (\n    today: Date,\n    startDate?: FirstNumenorNewYearDate,\n    reckoning: GondorReckoningEnum = GondorReckoningEnum.STEWARDS,\n    rules: GondorLeapYearRuleEnum = GondorLeapYearRuleEnum.GREGORIAN\n): GondorCalendarYear => {\n    startDate = getStartDate(startDate);\n\n    const kingsReckoning = reckoning === GondorReckoningEnum.KINGS;\n    const stewardsReckoning = reckoning === GondorReckoningEnum.STEWARDS;\n    const newReckoning = reckoning === GondorReckoningEnum.NEW;\n\n    const getYearWithRemainder =\n        rules === GondorLeapYearRuleEnum.TRADITIONAL\n            ? daysElapsedToSecondAgeYear\n            : daysElapsedToGregorianYear;\n\n    const daysElapsed = toDaysElapsed(startDate, today);\n\n    const yearWithRemainder = newReckoning\n        ? daysElapsedToNewReckoningYear(getYearWithRemainder, daysElapsed)\n        : getYearWithRemainder(daysElapsed);\n\n    const year = yearWithRemainder.year;\n\n    let gregorianDate = getNewYearDate(\n        startDate,\n        today,\n        yearWithRemainder.daysRemainder\n    );\n\n    let gondorDate;\n    let todayGondor;\n    let weekDay = convertGregorianToGondorianWeekday(gregorianDate.getDay());\n\n    if (rules === GondorLeapYearRuleEnum.TRADITIONAL) {\n        weekDay = getWeekDay(daysElapsed, yearWithRemainder.daysRemainder, 7);\n    }\n\n    const dates: GondorDate[] = [];\n\n    for (let month = 0; month < 12; month++) {\n        let maxdays = 30;\n\n        switch (month) {\n            case 0:\n                gondorDate = {\n                    day: \"Yestarë\",\n                    month: 0,\n                    weekDay: weekDay++ % 7,\n                    gregorian: gregorianDate,\n                };\n\n                dates.push(gondorDate);\n                if (datesMatch(today, gregorianDate)) {\n                    todayGondor = gondorDate;\n                }\n                gregorianDate = getNextDate(gregorianDate);\n\n                break;\n\n            case 5:\n            case 6:\n                if (kingsReckoning) maxdays = 31;\n                break;\n\n            default:\n                break;\n        }\n\n        for (\n            let day = 1;\n            day <= maxdays;\n            day++, gregorianDate = getNextDate(gregorianDate)\n        ) {\n            gondorDate = {\n                day: day,\n                month: month,\n                weekDay: weekDay++ % 7,\n                gregorian: gregorianDate,\n            };\n\n            dates.push(gondorDate);\n            if (datesMatch(today, gregorianDate)) {\n                todayGondor = gondorDate;\n            }\n        }\n\n        switch (month) {\n            case 2:\n                if (stewardsReckoning) {\n                    gondorDate = {\n                        day: \"Tuilérë\",\n                        month: month + 1,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                break;\n\n            case 5:\n                const leapYear = isGondorLeapYear(year, rules);\n\n                if (leapYear && newReckoning) {\n                    gondorDate = {\n                        day: \"Cormarë\",\n                        month: month,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                if (\n                    rules === GondorLeapYearRuleEnum.TRADITIONAL\n                    && isMillennialLeapYear(year)\n                ) {\n                    gondorDate = {\n                        day: newReckoning ? \"Cormarë\" : \"Enderë\",\n                        month: newReckoning ? month : month + 1,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                if (leapYear || newReckoning) {\n                    gondorDate = {\n                        day: \"Enderë\",\n                        month: month + 1,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                if (!leapYear || newReckoning) {\n                    gondorDate = {\n                        day: \"Loëndë\",\n                        month: month + 1,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                if (leapYear || newReckoning) {\n                    gondorDate = {\n                        day: \"Enderë\",\n                        month: month + 1,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                break;\n\n            case 8:\n                if (stewardsReckoning) {\n                    gondorDate = {\n                        day: \"Yáviérë\",\n                        month: month + 1,\n                        weekDay: weekDay++ % 7,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(gondorDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayGondor = gondorDate;\n                    }\n                    gregorianDate = getNextDate(gregorianDate);\n                }\n\n                break;\n\n            case 11:\n                gondorDate = {\n                    day: \"Mettarë\",\n                    month: 11,\n                    weekDay: weekDay++ % 7,\n                    gregorian: gregorianDate,\n                };\n\n                dates.push(gondorDate);\n                if (datesMatch(today, gregorianDate)) {\n                    todayGondor = gondorDate;\n                }\n                gregorianDate = getNextDate(gregorianDate);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    return {\n        year,\n        dates,\n        today,\n        todayGondor: todayGondor || dates[0],\n    };\n};\n\nconst {\n    KINGS: RECKONING_KINGS,\n    STEWARDS: RECKONING_STEWARDS,\n    NEW: RECKONING_NEW,\n} = GondorReckoningEnum;\n\nconst {\n    TRADITIONAL: RECKONING_RULES_TRADITIONAL,\n    GREGORIAN: RECKONING_RULES_GREGORIAN,\n} = GondorLeapYearRuleEnum;\n\nexport {\n    RECKONING_KINGS,\n    RECKONING_STEWARDS,\n    RECKONING_NEW,\n    RECKONING_RULES_TRADITIONAL,\n    RECKONING_RULES_GREGORIAN,\n    GondorCalendarYear,\n    GondorDate,\n    GondorReckoningEnum,\n    GondorLeapYearRuleEnum,\n    GondorWeekdays,\n    GondorMonths,\n    GondorHolidays,\n    getGondorNewYearDate,\n    getNewReckoningNewYearDate,\n    isGondorLeapYear,\n    isMillennialLeapYear,\n    convertGondorianMonthIndex,\n    convertGregorianToGondorianWeekday,\n    makeGondorCalendarDates,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport {\n    Calendar,\n    CalendarDate,\n    YearWithRemainder,\n    toDaysElapsed,\n    daysElapsedToGregorianYear,\n    getNewYearDate,\n    getWeekDay,\n    isLeapYear,\n    datesMatch,\n    fullYearDate,\n    getNextDate,\n} from \"./Utils\";\n\nconst RIVENDELL_DAYS_PER_12_YEARS = 365 * 12 + 3;\nconst RIVENDELL_DAYS_PER_432_YEARS = RIVENDELL_DAYS_PER_12_YEARS * 12 * 3 - 3;\n\nenum RivendellRulesEnum {\n    TRADITIONAL = \"traditional\",\n    REFORMED = \"reformed\",\n}\n\nconst { TRADITIONAL: TRADITIONAL_RULES, REFORMED: REFORMED_RULES } =\n    RivendellRulesEnum;\n\n/**\n * @property emoji - An icon representing this weekday.\n * @property english - The English translation of this weekday name.\n * @property quenya - The Quenya name for this weekday.\n * @property sindarin - The Sindarin name for this weekday.\n */\ninterface RivendellWeekday {\n    emoji: string;\n    english: string;\n    quenya: string;\n    sindarin: string;\n    description: string;\n}\n\n/**\n * Weekday names and descriptions\n * @constant\n */\nconst RivendellWeekdays: RivendellWeekday[] = [\n    {\n        emoji: \"⭐\",\n        english: \"Stars Day\",\n        quenya: \"Elenya\",\n        sindarin: \"Orgilion\",\n        description: \"English: Stars Day\\nQuenya: Elenya\\nSindarin: Orgilion\",\n    },\n    {\n        emoji: \"☀️\",\n        english: \"Sun Day\",\n        quenya: \"Anarya\",\n        sindarin: \"Oranor\",\n        description: \"English: Sun Day\\nQuenya: Anarya\\nSindarin: Oranor\",\n    },\n    {\n        emoji: \"🌙\",\n        english: \"Moon Day\",\n        quenya: \"Isilya\",\n        sindarin: \"Orithil\",\n        description: \"English: Moon Day\\nQuenya: Isilya\\nSindarin: Orithil\",\n    },\n    {\n        emoji: \"🌳\",\n        english: \"Two Trees Day\",\n        quenya: \"Aldúya\",\n        sindarin: \"Orgaladhad\",\n        description:\n            \"English: Two Trees of Valinor Day\\nQuenya: Aldúya\\nSindarin: Orgaladhad\",\n    },\n    {\n        emoji: \"🌌\",\n        english: \"Heavens Day\",\n        quenya: \"Menelya\",\n        sindarin: \"Ormenel\",\n        description: \"English: Heavens Day\\nQuenya: Menelya\\nSindarin: Ormenel\",\n    },\n    {\n        emoji: \"🏔\",\n        english: \"Valar or Powers Day\",\n        quenya: \"Valanya or Tárion\",\n        sindarin: \"Orbelain or Rodyn\",\n        description:\n            \"English: Valar or Powers Day\\nQuenya: Valanya or Tárion\\nSindarin: Orbelain or Rodyn\",\n    },\n];\n\n/**\n * @property emoji - An icon representing this month.\n * @property english - The English translation of this month name.\n * @property quenya - The Quenya name for this month.\n * @property sindarin - The Sindarin name for this month.\n * @property description\n * @property className - UI-hint for styling this month.\n */\ninterface RivendellMonth {\n    emoji: string;\n    english: string;\n    quenya: string;\n    sindarin: string;\n    description: string;\n    className: string;\n}\n\n/**\n * Month names and descriptions.\n * @constant\n */\nconst RivendellMonths: RivendellMonth[] = [\n    {\n        emoji: \"🌼\",\n        english: \"Spring\",\n        quenya: \"Tuilë\",\n        sindarin: \"Ethuil\",\n        description: \"English: Spring\\nQuenya: Tuilë\\nSindarin: Ethuil\",\n        className: \"spring\",\n    },\n    {\n        emoji: \"☀️\",\n        english: \"Summer\",\n        quenya: \"Lairë\",\n        sindarin: \"Laer\",\n        description: \"English: Summer\\nQuenya: Lairë\\nSindarin: Laer\",\n        className: \"summer\",\n    },\n    {\n        emoji: \"🍇\",\n        english: \"Autumn\",\n        quenya: \"Yávië\",\n        sindarin: \"Iavas\",\n        description: \"English: Autumn\\nQuenya: Yávië\\nSindarin: Iavas\",\n        className: \"autumn\",\n    },\n    {\n        emoji: \"🍂\",\n        english: \"Fading\",\n        quenya: \"Quellë\",\n        sindarin: \"Firith\",\n        description:\n            \"English: Fading\\nQuenya: Quellë or 'lasse-lanta'\\nSindarin: Firith or 'narbeleth'\",\n        className: \"fading\",\n    },\n    {\n        emoji: \"❄️\",\n        english: \"Winter\",\n        quenya: \"Hrívë\",\n        sindarin: \"Rhîw\",\n        description: \"English: Winter\\nQuenya: Hrívë\\nSindarin: Rhîw\",\n        className: \"winter\",\n    },\n    {\n        emoji: \"🌱\",\n        english: \"Stirring\",\n        quenya: \"Coirë\",\n        sindarin: \"Echuir\",\n        description: \"English: Stirring\\nQuenya: Coirë\\nSindarin: Echuir\",\n        className: \"stirring\",\n    },\n];\n\n/**\n * @property english - The English translation of this holiday name.\n * @property quenya - The Quenya name for this holiday.\n * @property sindarin - The Sindarin name for this holiday.\n * @property description\n */\ninterface ElvishHoliday {\n    english: string;\n    quenya: string;\n    sindarin: string;\n    description: string;\n}\n\ntype ElvishHolidays = Record<string, ElvishHoliday>;\n\n/**\n * Elvish Holiday names and descriptions.\n * @constant\n */\nconst CommonElvishHolidays: ElvishHolidays = {\n    Yestarë: {\n        english: \"First Day\",\n        quenya: \"Yestarë\",\n        sindarin: \"Iestor\",\n        description: \"New Year's Day!\",\n    },\n    Enderë: {\n        english: \"Middleday\",\n        quenya: \"Enderë\",\n        sindarin: \"Enedhor\",\n        description: \"Middleday\",\n    },\n    Mettarë: {\n        english: \"Last Day\",\n        quenya: \"Mettarë\",\n        sindarin: \"Methor\",\n        description: \"New Year's Eve!\",\n    },\n};\n\n/**\n * Rivendell Holiday names and descriptions.\n * @constant\n */\nconst RivendellHolidays: ElvishHolidays = {\n    ...CommonElvishHolidays,\n    \"Reformed Enderë\": {\n        english: \"Leap Middleday\",\n        quenya: \"Reformed Enderë\",\n        sindarin: \"Reformed Enedhor\",\n        description: \"Leap Middleday\",\n    },\n};\n\n/**\n * @param {number} year - The Rivendell year to check.\n * @return {boolean} True if the given `year` is a Rivendell leap-year.\n */\nconst isRivendellLeapYear = (year: number): boolean => {\n    return year % 12 === 0 && year % 432 !== 0;\n};\n\n/**\n * @default new Date(1, 2, 22, 0,0,0)\n *\n * The Gregorian Date corresponding to the first Rivendell New Year Date.\n * The default year is 1 in order to keep Rivendell leap-years in sync with Gregorian leap-years.\n */\ntype FirstRivendellNewYearDate = Date;\n\n/**\n * @param {FirstRivendellNewYearDate} [startDate]\n * @return {FirstRivendellNewYearDate} startDate if not null, otherwise the default first New Year Date.\n */\nconst getStartDate = (\n    startDate?: FirstRivendellNewYearDate\n): FirstRivendellNewYearDate => {\n    if (!startDate) {\n        startDate = fullYearDate(1, 2, 22);\n    }\n\n    return startDate;\n};\n\n/**\n * @param {number} daysElapsed - The total number of whole days elapsed since the first New Year Date.\n * @return {YearWithRemainder} The current Rivendell year (including 0) for the given `daysElapsed`.\n */\nconst daysElapsedToRivendellYear = (daysElapsed: number): YearWithRemainder => {\n    let negativeOffset = 0;\n\n    let year = Math.floor(daysElapsed / RIVENDELL_DAYS_PER_432_YEARS) * 432;\n    daysElapsed %= RIVENDELL_DAYS_PER_432_YEARS;\n\n    if (year < 0) {\n        negativeOffset = year;\n        year = 0;\n        if (daysElapsed < 0) {\n            daysElapsed += RIVENDELL_DAYS_PER_432_YEARS;\n        }\n    }\n\n    year += Math.floor(daysElapsed / RIVENDELL_DAYS_PER_12_YEARS) * 12;\n    daysElapsed %= RIVENDELL_DAYS_PER_12_YEARS;\n\n    if (daysElapsed > 365 * 11) {\n        year += 11;\n        daysElapsed %= 365 * 11;\n    } else {\n        year += Math.floor(daysElapsed / 365);\n        daysElapsed %= 365;\n    }\n\n    year += negativeOffset + 1;\n\n    return {\n        year: year,\n        daysRemainder: daysElapsed,\n    };\n};\n\n/**\n * @param {Date} today\n * @param {FirstRivendellNewYearDate} [startDate]\n * @param {RivendellRulesEnum} [calendarRules=TRADITIONAL_RULES]\n *\n * @return {Date} The Gregorian Date corresponding to the Rivendell New Year's Day for the year of the given `today`.\n */\nconst getRivendellNewYearDate = (\n    today: Date,\n    startDate: FirstRivendellNewYearDate,\n    calendarRules: RivendellRulesEnum = TRADITIONAL_RULES\n): Date => {\n    startDate = getStartDate(startDate);\n\n    const getYearWithRemainder =\n        calendarRules === TRADITIONAL_RULES\n            ? daysElapsedToRivendellYear\n            : daysElapsedToGregorianYear;\n\n    const yearWithRemainder = getYearWithRemainder(\n        toDaysElapsed(startDate, today)\n    );\n\n    return getNewYearDate(startDate, today, yearWithRemainder.daysRemainder);\n};\n\n/**\n * @property month - The month index of {@link RivendellMonths}.\n * @property weekDay - The weekday index of {@link RivendellWeekdays}.\n */\ninterface RivendellDate extends CalendarDate {\n    className?: string;\n}\n\n/**\n * @property year - The current Rivendell year.\n * @property dates - The dates of this Rivendell calendar year.\n * @property todayRivendell - The current Rivendell date corresponding to the given\n *     [today]{@link RivendellCalendarYear.today}.\n */\ninterface RivendellCalendarYear extends Calendar {\n    dates: RivendellDate[];\n    todayRivendell: RivendellDate;\n}\n\n/**\n * Generates a calendar year for the given Date `today`,\n * according to the given `startDate` and `calendarRules`.\n *\n * @param {Date} today\n * @param {FirstRivendellNewYearDate} [startDate]\n * @param {RivendellRulesEnum} [calendarRules=TRADITIONAL_RULES]\n *\n * @return {RivendellCalendarYear} The calendar year for the given `today`.\n */\nconst makeRivendellCalendarDates = (\n    today: Date,\n    startDate?: FirstRivendellNewYearDate,\n    calendarRules: RivendellRulesEnum = TRADITIONAL_RULES\n): RivendellCalendarYear => {\n    startDate = getStartDate(startDate);\n\n    let todayRivendell;\n    const getYearWithRemainder =\n        calendarRules === TRADITIONAL_RULES\n            ? daysElapsedToRivendellYear\n            : daysElapsedToGregorianYear;\n\n    const daysElapsed = toDaysElapsed(startDate, today);\n    const yearWithRemainder = getYearWithRemainder(daysElapsed);\n    const year = yearWithRemainder.year;\n\n    let rivendellDate;\n    let gregorianDate = getNewYearDate(\n        startDate,\n        today,\n        yearWithRemainder.daysRemainder\n    );\n\n    let weekDay = getWeekDay(daysElapsed, yearWithRemainder.daysRemainder, 6);\n\n    const dates: RivendellDate[] = [];\n    if (calendarRules === REFORMED_RULES && isLeapYear(year)) {\n        rivendellDate = {\n            day: \"Reformed Enderë\",\n            month: 0,\n            weekDay: weekDay % 6,\n            gregorian: gregorianDate,\n        };\n\n        dates.push(rivendellDate);\n        if (datesMatch(today, gregorianDate)) {\n            todayRivendell = rivendellDate;\n        }\n        gregorianDate = getNextDate(gregorianDate);\n        weekDay++;\n    }\n\n    rivendellDate = {\n        day: \"Yestarë\",\n        month: 0,\n        weekDay: weekDay % 6,\n        gregorian: gregorianDate,\n    };\n\n    dates.push(rivendellDate);\n    if (datesMatch(today, gregorianDate)) {\n        todayRivendell = rivendellDate;\n    }\n    gregorianDate = getNextDate(gregorianDate);\n    weekDay++;\n\n    for (let month = 0; month < 6; month++) {\n        let maxdays = 54;\n\n        switch (month) {\n            case 1:\n            case 4:\n                maxdays = 72;\n                break;\n            case 3:\n                let enderiCount = 3;\n                if (\n                    calendarRules === TRADITIONAL_RULES\n                    && isRivendellLeapYear(year)\n                ) {\n                    enderiCount = 6;\n                }\n                for (\n                    let enderi = 0;\n                    enderi < enderiCount;\n                    enderi++,\n                        weekDay++,\n                        gregorianDate = getNextDate(gregorianDate)\n                ) {\n                    rivendellDate = {\n                        day: \"Enderë\",\n                        month: month,\n                        weekDay: weekDay % 6,\n                        gregorian: gregorianDate,\n                    };\n\n                    dates.push(rivendellDate);\n                    if (datesMatch(today, gregorianDate)) {\n                        todayRivendell = rivendellDate;\n                    }\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        for (\n            let day = 1;\n            day <= maxdays;\n            day++, weekDay++, gregorianDate = getNextDate(gregorianDate)\n        ) {\n            rivendellDate = {\n                day: day,\n                month: month,\n                weekDay: weekDay % 6,\n                gregorian: gregorianDate,\n            };\n\n            dates.push(rivendellDate);\n            if (datesMatch(today, gregorianDate)) {\n                todayRivendell = rivendellDate;\n            }\n        }\n    }\n\n    rivendellDate = {\n        day: \"Mettarë\",\n        month: 5,\n        weekDay: weekDay % 6,\n        gregorian: gregorianDate,\n    };\n\n    dates.push(rivendellDate);\n    if (datesMatch(today, gregorianDate)) {\n        todayRivendell = rivendellDate;\n    }\n\n    return {\n        year,\n        dates,\n        today,\n        todayRivendell: todayRivendell || dates[0],\n    };\n};\n\nexport {\n    TRADITIONAL_RULES,\n    REFORMED_RULES,\n    RivendellRulesEnum,\n    ElvishHolidays,\n    RivendellCalendarYear,\n    RivendellDate,\n    RivendellWeekdays,\n    RivendellMonths,\n    RivendellHolidays,\n    CommonElvishHolidays,\n    isRivendellLeapYear,\n    getRivendellNewYearDate,\n    makeRivendellCalendarDates,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport {\n    Calendar,\n    CalendarDate,\n    toDaysElapsed,\n    daysElapsedToGregorianYear,\n    daysElapsedToSecondAgeYear,\n    getNewYearDate,\n    getWeekDay,\n    datesMatch,\n    fullYearDate,\n    getNextDate,\n} from \"./Utils\";\n\nimport {\n    GondorLeapYearRuleEnum,\n    isMillennialLeapYear,\n    isGondorLeapYear,\n} from \"./GondorReckoning\";\n\nenum ShireRegionEnum {\n    TOLKIEN = \"tolkien\",\n    SHIRE = \"shire\",\n    BREE = \"bree\",\n}\n\n/**\n * @property emoji - An icon representing this weekday.\n * @property tolkien - The Gregorian substitution Tolkien used for this weekday name.\n * @property shire - The Shire name for this weekday.\n * @property bree - The Bree name for this weekday.\n * @property description\n */\ninterface ShireWeekday {\n    emoji: string;\n    tolkien: string;\n    shire: string;\n    bree: string;\n    description: string;\n}\n\n/**\n * Weekday names and descriptions\n * @constant\n */\nconst ShireWeekdays: ShireWeekday[] = [\n    {\n        emoji: \"⭐\",\n        tolkien: \"Saturday\",\n        shire: \"Sterday\",\n        bree: \"Sterday\",\n        // prettier-ignore\n        description:\n`Tolkien: Saturday\nShire: Sterday\nStar Day. From the archaic Sterrendei (from Old English steorra dæg).`,\n    },\n    {\n        emoji: \"☀️\",\n        tolkien: \"Sunday\",\n        shire: \"Sunday\",\n        bree: \"Sunday\",\n        // prettier-ignore\n        description:\n`Tolkien: Sunday\nShire: Sunday\nSun Day. From the archaic Sunnendei (from Old English sunne dæg).`,\n    },\n    {\n        emoji: \"🌙\",\n        tolkien: \"Monday\",\n        shire: \"Monday\",\n        bree: \"Monday\",\n        // prettier-ignore\n        description:\n`Tolkien: Monday\nShire: Monday\nMoon Day. From the archaic Monendei (from Old English mōna dæg).`,\n    },\n    {\n        emoji: \"🌳\",\n        tolkien: \"Tuesday\",\n        shire: \"Trewsday\",\n        bree: \"Trewsday\",\n        // prettier-ignore\n        description:\n`Tolkien: Tuesday\nShire: Trewsday\nTrees Day. From the archaic Trewesdei (from Old English trēow dæg).`,\n    },\n    {\n        emoji: \"🌌\",\n        tolkien: \"Wednesday\",\n        shire: \"Hevensday\",\n        bree: \"Hevensday\",\n        // prettier-ignore\n        description:\n`Tolkien: Wednesday\nShire: Hevensday\nHeavens Day. From the archaic Hevensdei (from Old English heofen dæg).`,\n    },\n    {\n        emoji: \"🌊\",\n        tolkien: \"Thursday\",\n        shire: \"Mersday\",\n        bree: \"Mersday\",\n        // prettier-ignore\n        description:\n`Tolkien: Thursday\nShire: Mersday\nSea Day. From the archaic Meresdei (from Old English mere dæg).`,\n    },\n    {\n        emoji: \"🏔\",\n        tolkien: \"Friday\",\n        shire: \"Highday\",\n        bree: \"Highday\",\n        // prettier-ignore\n        description:\n`Tolkien: Friday\nShire: Highday\nHigh Day. From the archaic Hihdei (from Old English hēah dæg).`,\n    },\n];\n\n/**\n * @property emoji - An icon representing this month.\n * @property tolkien - The Gregorian substitution Tolkien used for this month name.\n * @property shire - The Shire name for this month.\n * @property bree - The Bree name for this month.\n * @property description\n * @property className - UI-hint for styling this month.\n */\ninterface ShireMonth {\n    emoji: string;\n    tolkien: string;\n    shire: string;\n    bree: string;\n    description: string;\n    className: string;\n}\n\n/**\n * Month names and descriptions.\n * @constant\n */\nconst ShireMonths: ShireMonth[] = [\n    {\n        emoji: \"🌄\",\n        tolkien: \"January\",\n        shire: \"Afteryule\",\n        bree: \"Frery\",\n        // prettier-ignore\n        description:\n`Tolkien: January\nShire: Afteryule\nBree: Frery\nThe month after the winter solstice (Midwinter),\nfrom æfter Gēola 'after Winter Solstice',\nand from frēorig 'freezing, frigid'.`,\n        className: \"afteryule\",\n    },\n    {\n        emoji: \"🌧\",\n        tolkien: \"February\",\n        shire: \"Solmath\",\n        bree: \"Solmath\",\n        // prettier-ignore\n        description:\n`Tolkien: February\nShire: Solmath\nBree: Solmath\nFrom Solmōnað, perhaps from the Old English word for mud, 'sol'.\nMuddy Month.`,\n        className: \"solmath\",\n    },\n    {\n        emoji: \"🌬\",\n        tolkien: \"March\",\n        shire: \"Rethe\",\n        bree: \"Rethe\",\n        // prettier-ignore\n        description:\n`Tolkien: March\nShire: Rethe\nBree: Rethe\nFrom Hrēðmōnað 'glory-month'. Month of the Goddess Hrēþ or Hretha, according to the Venerable Bede. 'Storm-month' according to Dr. Eleanor Parker.`,\n        className: \"rethe\",\n    },\n    {\n        emoji: \"🌱\",\n        tolkien: \"April\",\n        shire: \"Astron\",\n        bree: \"Chithing\",\n        // prettier-ignore\n        description:\n`Tolkien: April\nShire: Astron\nBree: Chithing\nFrom Ēastermōnað 'Easter-month', named after the Goddess Ēostre,\nand from cīþing 'growing thing' (cīþ 'young shoot, sprout').`,\n        className: \"astron\",\n    },\n    {\n        emoji: \"🌼\",\n        tolkien: \"May\",\n        shire: \"Thrimidge\",\n        bree: \"Thrimidge\",\n        // prettier-ignore\n        description:\n`Tolkien: May\nShire: Thrimidge\nBree: Thrimidge\nThe month of plenty, when cows were given three milkings (þri-milce) daily.`,\n        className: \"thrimidge\",\n    },\n    {\n        emoji: \"☀️\",\n        tolkien: \"June\",\n        shire: \"Forelithe\",\n        bree: \"Lithe\",\n        // prettier-ignore\n        description:\n`Tolkien: June\nShire: Forelithe\nBree: Lithe\nThe month before the summer solstice (Midsummer), when 'litha' (gentle or navigable) weather encouraged voyages.\nFrom ǣrra Līða 'before Litha'.`,\n        className: \"forelithe\",\n    },\n    {\n        emoji: \"🍃\",\n        tolkien: \"July\",\n        shire: \"Afterlithe\",\n        bree: \"Mede\",\n        // prettier-ignore\n        description:\n`Tolkien: July\nShire: Afterlithe\nBree: Mede\nThe month after the summer solstice (Midsummer), from æfter Līða, and from mǣd 'mead, meadow'.`,\n        className: \"afterlithe\",\n    },\n    {\n        emoji: \"🌿\",\n        tolkien: \"August\",\n        shire: \"Wedmath\",\n        bree: \"Wedmath\",\n        // prettier-ignore\n        description:\n`Tolkien: August\nShire: Wedmath\nBree: Wedmath\nWhen fields were beset by weeds, from Wēodmōnað 'weed-month'.`,\n        className: \"wedmath\",\n    },\n    {\n        emoji: \"🍇\",\n        tolkien: \"September\",\n        shire: \"Halimath\",\n        bree: \"Harvestmath\",\n        // prettier-ignore\n        description:\n`Tolkien: September\nShire: Halimath\nBree: Harvestmath\nThe holy month of offerings, from Hāligmōnað 'holy-month', and from Hærfestmōnað 'harvest-month'.`,\n        className: \"halimath\",\n    },\n    {\n        emoji: \"🍂\",\n        tolkien: \"October\",\n        shire: \"Winterfilth\",\n        bree: \"Wintring\",\n        // prettier-ignore\n        description:\n`Tolkien: October\nShire: Winterfilth\nBree: Wintring\nThe filling of winter's first full moon, according to the Venerable Bede.\nTolkien instead suggests the \"filling\" or completion of the year before Winter, after the harvest.\nFrom Winterfylleð 'winter fullness', and wintrig 'wintry, winter'.`,\n        className: \"winterfilth\",\n    },\n    {\n        emoji: \"🌫\",\n        tolkien: \"November\",\n        shire: \"Blotmath\",\n        bree: \"Blooting\",\n        // prettier-ignore\n        description:\n`Tolkien: November\nShire: Blotmath\nBree: Blooting\nFrom Blōtmōnað 'sacrifice-month'.`,\n        className: \"blotmath\",\n    },\n    {\n        emoji: \"❄️\",\n        tolkien: \"December\",\n        shire: \"Foreyule\",\n        bree: \"Yulemath\",\n        // prettier-ignore\n        description:\n`Tolkien: December\nShire: Foreyule\nBree: Yulemath\nThe month before the winter solstice (Midwinter),\nfrom ǣrra Gēola 'before Winter Solstice', and from Gēolamōnað 'Yule-month'.`,\n        className: \"foreyule\",\n    },\n];\n\n/**\n * @default new Date(0, 11, 21, 0,0,0)\n *\n * The Gregorian Date corresponding to the first Shire New Year Date.\n * The default year is 0 in order to keep Shire leap-years in sync with Gregorian leap-years.\n */\ntype FirstShireNewYearDate = Date;\n\n/**\n * @param {FirstShireNewYearDate} [startDate]\n * @return {FirstShireNewYearDate} startDate if not null, otherwise the default first New Year Date.\n */\nconst getStartDate = (\n    startDate?: FirstShireNewYearDate\n): FirstShireNewYearDate => {\n    if (!startDate) {\n        startDate = fullYearDate(0, 11, 21);\n    }\n\n    return startDate;\n};\n\n/**\n * @param {Date} today\n * @param {FirstShireNewYearDate} [startDate]\n * @param {GondorLeapYearRuleEnum} [rules=GondorLeapYearRuleEnum.GREGORIAN]\n *\n * @return {Date} The Gregorian Date corresponding to the Shire New Year Date\n *                for the year of the given `today`.\n */\nconst getShireNewYearDate = (\n    today: Date,\n    startDate: FirstShireNewYearDate,\n    rules = GondorLeapYearRuleEnum.GREGORIAN\n) => {\n    startDate = getStartDate(startDate);\n\n    const getYearWithRemainder =\n        rules === GondorLeapYearRuleEnum.TRADITIONAL\n            ? daysElapsedToSecondAgeYear\n            : daysElapsedToGregorianYear;\n\n    const yearWithRemainder = getYearWithRemainder(\n        toDaysElapsed(startDate, today)\n    );\n\n    return getNewYearDate(startDate, today, yearWithRemainder.daysRemainder);\n};\n\n/**\n * The Shire or Bree name of a holiday.\n */\ntype ShireHolidayRegionNames = Record<ShireRegionEnum, string>;\n\n/**\n * @property month - The month index of {@link ShireMonths}.\n * @property weekDay - The weekday index of {@link ShireWeekdays}.\n * @property region - The regional name variation.\n */\ninterface ShireDate extends CalendarDate {\n    region?: ShireHolidayRegionNames;\n    className?: string;\n}\n\n/**\n * @property year - The current Shire year.\n * @property dates - The dates of this Shire calendar year.\n * @property todayShire - The current Shire date corresponding to the given [today]{@link ShireCalendarYear#today}.\n */\ninterface ShireCalendarYear extends Calendar {\n    dates: ShireDate[];\n    todayShire: ShireDate;\n}\n\n/**\n * Generates a calendar year for the given Date `today`, according to the given `startDate`.\n *\n * @param {Date} today\n * @param {FirstShireNewYearDate} [startDate]\n * @param {GondorLeapYearRuleEnum} [rules=GondorLeapYearRuleEnum.GREGORIAN]\n *\n * @return {ShireCalendarYear} The calendar year for the given `today`.\n */\nconst makeShireCalendarDates = (\n    today: Date,\n    startDate?: FirstShireNewYearDate,\n    rules: GondorLeapYearRuleEnum = GondorLeapYearRuleEnum.GREGORIAN\n): ShireCalendarYear => {\n    startDate = getStartDate(startDate);\n\n    const reckonTraditional = rules === GondorLeapYearRuleEnum.TRADITIONAL;\n\n    const getYearWithRemainder = reckonTraditional\n        ? daysElapsedToSecondAgeYear\n        : daysElapsedToGregorianYear;\n\n    const daysElapsed = toDaysElapsed(startDate, today);\n    const yearWithRemainder = getYearWithRemainder(daysElapsed);\n    const year = yearWithRemainder.year;\n\n    let gregorianDate = getNewYearDate(\n        startDate,\n        today,\n        yearWithRemainder.daysRemainder\n    );\n\n    let weekDay = 0;\n    let shireReform = true;\n\n    if (reckonTraditional) {\n        // Shire-reform was enacted during the time of Isengrim II, sometime between T.A. 2683 - 2722.\n        // So probably starting with one of these years (if Kings' weekdays were reckoned continuously from S.A. 1):\n        // 2685 2691 2703 2714 2720\n        shireReform = year >= 2703 + 3441;\n\n        if (!shireReform) {\n            weekDay = getWeekDay(\n                daysElapsed,\n                yearWithRemainder.daysRemainder,\n                7\n            );\n        }\n    }\n\n    let shireDate: ShireDate = {\n        day: \"2 Yule\",\n        month: 0,\n        weekDay: weekDay++ % 7,\n        gregorian: gregorianDate,\n    };\n    const dates: ShireDate[] = [shireDate];\n\n    let todayShire = shireDate;\n\n    gregorianDate = getNextDate(gregorianDate);\n\n    for (let month = 0; month < 12; month++) {\n        for (\n            let day = 1;\n            day <= 30;\n            day++, weekDay++, gregorianDate = getNextDate(gregorianDate)\n        ) {\n            shireDate = {\n                day: day,\n                month: month,\n                weekDay: weekDay % 7,\n                gregorian: gregorianDate,\n            };\n\n            dates.push(shireDate);\n            if (datesMatch(today, gregorianDate)) {\n                todayShire = shireDate;\n            }\n        }\n\n        if (month === 5) {\n            const millennialLeapYear =\n                reckonTraditional && isMillennialLeapYear(year);\n\n            shireDate = {\n                day: \"1 Lithe\",\n                region: {\n                    tolkien: \"1 Lithe\",\n                    shire: \"1 Lithe\",\n                    bree: \"1 Summerday\",\n                },\n                month: shireReform ? month : month + 1,\n                weekDay: weekDay % 7,\n                gregorian: gregorianDate,\n            };\n\n            dates.push(shireDate);\n            if (datesMatch(today, gregorianDate)) {\n                todayShire = shireDate;\n            }\n\n            let summerday = 2;\n            if (millennialLeapYear) {\n                if (!shireReform) {\n                    weekDay++;\n                }\n\n                gregorianDate = getNextDate(gregorianDate);\n                shireDate = {\n                    day: \"Overlithe\",\n                    region: {\n                        tolkien: \"Overlithe\",\n                        shire: \"Overlithe\",\n                        bree: `${summerday++} Summerday`,\n                    },\n                    month: shireReform ? month : month + 1,\n                    weekDay: weekDay % 7,\n                    gregorian: gregorianDate,\n                };\n\n                dates.push(shireDate);\n                if (datesMatch(today, gregorianDate)) {\n                    todayShire = shireDate;\n                }\n            }\n\n            if (!shireReform) {\n                weekDay++;\n            }\n\n            gregorianDate = getNextDate(gregorianDate);\n            shireDate = {\n                day: \"Midyear's Day\",\n                month: shireReform && !millennialLeapYear ? month : month + 1,\n                weekDay: weekDay % 7,\n                gregorian: gregorianDate,\n            };\n\n            dates.push(shireDate);\n            if (datesMatch(today, gregorianDate)) {\n                todayShire = shireDate;\n            }\n\n            summerday++;\n            weekDay++;\n            const leapYear = isGondorLeapYear(year, rules);\n            if (leapYear) {\n                gregorianDate = getNextDate(gregorianDate);\n                shireDate = {\n                    day: \"Overlithe\",\n                    region: {\n                        tolkien: \"Overlithe\",\n                        shire: \"Overlithe\",\n                        bree: `${summerday++} Summerday`,\n                    },\n                    month: month + 1,\n                    weekDay: weekDay % 7,\n                    gregorian: gregorianDate,\n                };\n\n                dates.push(shireDate);\n                if (datesMatch(today, gregorianDate)) {\n                    todayShire = shireDate;\n                }\n\n                if (!shireReform) {\n                    weekDay++;\n                }\n            }\n\n            gregorianDate = getNextDate(gregorianDate);\n            shireDate = {\n                day: \"2 Lithe\",\n                region: {\n                    tolkien: \"2 Lithe\",\n                    shire: \"2 Lithe\",\n                    bree: `${summerday++} Summerday`,\n                },\n                month: month + 1,\n                weekDay: weekDay % 7,\n                gregorian: gregorianDate,\n            };\n\n            dates.push(shireDate);\n            if (datesMatch(today, gregorianDate)) {\n                todayShire = shireDate;\n            }\n\n            gregorianDate = getNextDate(gregorianDate);\n            weekDay++;\n        }\n    }\n\n    shireDate = {\n        day: \"1 Yule\",\n        month: 11,\n        weekDay: weekDay % 7,\n        gregorian: gregorianDate,\n    };\n\n    dates.push(shireDate);\n    if (datesMatch(today, gregorianDate)) {\n        todayShire = shireDate;\n    }\n\n    return {\n        year,\n        dates,\n        today,\n        todayShire,\n    };\n};\n\nconst {\n    TOLKIEN: REGION_NAMES_TOLKIEN,\n    SHIRE: REGION_NAMES_SHIRE,\n    BREE: REGION_NAMES_BREE,\n} = ShireRegionEnum;\n\nexport {\n    ShireCalendarYear,\n    ShireDate,\n    ShireWeekday,\n    ShireWeekdays,\n    ShireMonths,\n    ShireRegionEnum,\n    REGION_NAMES_TOLKIEN,\n    REGION_NAMES_SHIRE,\n    REGION_NAMES_BREE,\n    getShireNewYearDate,\n    makeShireCalendarDates,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\n\nconst GREGORIAN_DAYS_PER_4_YEARS = 365 * 4 + 1;\nconst GREGORIAN_DAYS_PER_100_YEARS = GREGORIAN_DAYS_PER_4_YEARS * 25 - 1;\nconst GREGORIAN_DAYS_PER_400_YEARS = GREGORIAN_DAYS_PER_100_YEARS * 4 + 1;\n\nconst GONDOR_DAYS_PER_4_YEARS = GREGORIAN_DAYS_PER_4_YEARS;\nconst GONDOR_DAYS_PER_100_YEARS = GREGORIAN_DAYS_PER_100_YEARS;\nconst GONDOR_DAYS_PER_1000_YEARS = GONDOR_DAYS_PER_100_YEARS * 10 + 2;\n\nconst SECOND_AGE_TOTAL_DAYS =\n    GONDOR_DAYS_PER_1000_YEARS * 3\n    + GONDOR_DAYS_PER_100_YEARS * 4\n    + GONDOR_DAYS_PER_4_YEARS * 10\n    + 365;\n\nconst THIRD_AGE_2059_TOTAL_DAYS =\n    SECOND_AGE_TOTAL_DAYS\n    + GONDOR_DAYS_PER_1000_YEARS * 2\n    + GONDOR_DAYS_PER_4_YEARS * 14\n    + 365 * 3\n    + 2;\n\nconst THIRD_AGE_2360_TOTAL_DAYS =\n    SECOND_AGE_TOTAL_DAYS\n    + GONDOR_DAYS_PER_1000_YEARS * 2\n    + GONDOR_DAYS_PER_100_YEARS * 3\n    + GONDOR_DAYS_PER_4_YEARS * 15\n    + 3;\n\n/**\n * @param {number} year\n * @return {boolean} True if the given year is a Gregorian leap-year.\n */\nconst isLeapYear = (year: number): boolean =>\n    !(year % 4 || (!(year % 100) && year % 400));\n\n/**\n * @param {Date} fromDate - The starting Date (e.g. first New Year's Day)\n * @param {Date} toDate - The end Date (e.g. today)\n * @return {number} The total number of whole days elapsed.\n */\nconst toDaysElapsed = (fromDate: Date, toDate: Date): number => {\n    // reset to/from hours to avoid DST problems\n    let fromDateMidnight = new Date(fromDate);\n    fromDateMidnight.setHours(0, 0, 0);\n\n    let toDateNoon = new Date(toDate);\n    toDateNoon.setHours(12, 0, 0);\n\n    const millisecondsElapsed =\n        toDateNoon.getTime() - fromDateMidnight.getTime();\n\n    return Math.floor(millisecondsElapsed / (24 * 60 * 60 * 1000));\n};\n\n/**\n * @property year - The current year (including 0).\n * @property daysRemainder - The number of days elapsed since the current New Year's Day.\n */\ninterface YearWithRemainder {\n    year: number;\n    daysRemainder: number;\n}\n\n/**\n * @param {number} daysElapsed - The total number of whole days elapsed since the first New Year Date.\n * @return {YearWithRemainder} The current Gregorian year for the given `daysElapsed`.\n */\nconst daysElapsedToGregorianYear = (daysElapsed: number): YearWithRemainder => {\n    let negativeOffset = 0;\n\n    let year = Math.floor(daysElapsed / GREGORIAN_DAYS_PER_400_YEARS) * 400;\n    daysElapsed %= GREGORIAN_DAYS_PER_400_YEARS;\n\n    if (year < 0) {\n        negativeOffset = year;\n        year = 0;\n        if (daysElapsed < 0) {\n            daysElapsed += GREGORIAN_DAYS_PER_400_YEARS;\n        }\n    }\n\n    if (daysElapsed > GREGORIAN_DAYS_PER_100_YEARS * 3) {\n        year += 300;\n        daysElapsed %= GREGORIAN_DAYS_PER_100_YEARS * 3;\n    } else {\n        year += Math.floor(daysElapsed / GREGORIAN_DAYS_PER_100_YEARS) * 100;\n        daysElapsed %= GREGORIAN_DAYS_PER_100_YEARS;\n    }\n\n    year += Math.floor(daysElapsed / GREGORIAN_DAYS_PER_4_YEARS) * 4;\n    daysElapsed %= GREGORIAN_DAYS_PER_4_YEARS;\n\n    if (daysElapsed > 365 * 3) {\n        year += 3;\n        daysElapsed %= 365 * 3;\n    } else {\n        year += Math.floor(daysElapsed / 365);\n        daysElapsed %= 365;\n    }\n\n    year += negativeOffset + 1;\n\n    return {\n        year: year,\n        daysRemainder: daysElapsed,\n    };\n};\n\n/**\n * @param {Date} today\n * @param {Date} startDate - The first New Year's Day (e.g. 1/1/1 12:00AM)\n * @param {number} daysSinceNewYearsDay - The number of whole days elapsed since today's New Year's Day.\n * @return {Date} The New Year Date for the year of the given `today`.\n */\nconst getNewYearDate = (\n    startDate: Date,\n    today: Date,\n    daysSinceNewYearsDay: number\n): Date => {\n    let newYearDate = new Date(startDate);\n    newYearDate.setFullYear(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate() - daysSinceNewYearsDay\n    );\n\n    return newYearDate;\n};\n\n/**\n * @param {number} daysElapsed - The total number of whole days elapsed since the first New Year Date.\n * @param {number} daysSinceNewYearsDay - The number of whole days elapsed since the current New Year's Day.\n * @param {number} daysPerWeek - The number of days in a week.\n * @return {number} The current day of the week.\n */\nconst getWeekDay = (\n    daysElapsed: number,\n    daysSinceNewYearsDay: number,\n    daysPerWeek: number\n): number => {\n    let weekDay = (daysElapsed - daysSinceNewYearsDay) % daysPerWeek;\n\n    if (weekDay < 0) {\n        weekDay += daysPerWeek;\n    }\n\n    return weekDay;\n};\n\nconst offsetThirdAgeDaysElapsed = (daysElapsed: number): number => {\n    if (daysElapsed >= THIRD_AGE_2059_TOTAL_DAYS) {\n        if (daysElapsed >= THIRD_AGE_2360_TOTAL_DAYS) {\n            daysElapsed--;\n        }\n        // 2 days were added to T.A.2059, but 2 were not added in T.A.3000\n        if (\n            daysElapsed\n            < 3 * GONDOR_DAYS_PER_1000_YEARS + SECOND_AGE_TOTAL_DAYS\n        ) {\n            daysElapsed -= 2;\n        }\n    }\n\n    daysElapsed -= SECOND_AGE_TOTAL_DAYS;\n\n    return daysElapsed;\n};\n\n/**\n * @param {number} daysElapsed - The total number of whole days elapsed since the first New Year Date.\n * @return {YearWithRemainder} The current Gondor (S.A.) year for the given `daysElapsed`.\n */\nconst daysElapsedToSecondAgeYear = (daysElapsed: number): YearWithRemainder => {\n    let year = 0;\n\n    if (\n        THIRD_AGE_2059_TOTAL_DAYS - 367 <= daysElapsed\n        && daysElapsed < THIRD_AGE_2059_TOTAL_DAYS\n    ) {\n        // The last couple of days of T.A.2059 need to be handled as a special case\n        year = 2059 + 3441;\n        daysElapsed %= THIRD_AGE_2059_TOTAL_DAYS - 367;\n    } else if (\n        THIRD_AGE_2360_TOTAL_DAYS - 367 <= daysElapsed\n        && daysElapsed < THIRD_AGE_2360_TOTAL_DAYS\n    ) {\n        // The last day of T.A.2360 needs to be handled as a special case\n        year = 2360 + 3441;\n        daysElapsed %= THIRD_AGE_2360_TOTAL_DAYS - 367;\n    } else {\n        let negativeOffset = 0;\n\n        if (daysElapsed > SECOND_AGE_TOTAL_DAYS) {\n            year = 3441;\n            daysElapsed = offsetThirdAgeDaysElapsed(daysElapsed);\n        }\n\n        year += Math.floor(daysElapsed / GONDOR_DAYS_PER_1000_YEARS) * 1000;\n        daysElapsed %= GONDOR_DAYS_PER_1000_YEARS;\n\n        if (year < 0) {\n            negativeOffset = year;\n            year = 0;\n            if (daysElapsed < 0) {\n                daysElapsed += GONDOR_DAYS_PER_1000_YEARS;\n            }\n        }\n\n        if (daysElapsed > GONDOR_DAYS_PER_100_YEARS * 9) {\n            year += 900;\n            daysElapsed %= GONDOR_DAYS_PER_100_YEARS * 9;\n        } else {\n            year += Math.floor(daysElapsed / GONDOR_DAYS_PER_100_YEARS) * 100;\n            daysElapsed %= GONDOR_DAYS_PER_100_YEARS;\n        }\n\n        if (daysElapsed > GONDOR_DAYS_PER_4_YEARS * 24) {\n            year += 96;\n            daysElapsed %= GONDOR_DAYS_PER_4_YEARS * 24;\n        } else {\n            year += Math.floor(daysElapsed / GONDOR_DAYS_PER_4_YEARS) * 4;\n            daysElapsed %= GONDOR_DAYS_PER_4_YEARS;\n        }\n\n        if (daysElapsed > 365 * 3) {\n            year += 3;\n            daysElapsed %= 365 * 3;\n        } else {\n            year += Math.floor(daysElapsed / 365);\n            daysElapsed %= 365;\n        }\n\n        year += negativeOffset + 1;\n    }\n\n    return {\n        year: year,\n        daysRemainder: daysElapsed,\n    };\n};\n\n/**\n * @param {(daysElapsedToGregorianYear|daysElapsedToSecondAgeYear)} getYearWithRemainder\n * @param {number} daysElapsed - The total number of whole days elapsed since the first New Year Date.\n * @return {YearWithRemainder} The current Gondor (S.A.) year, with daysRemainder since the current New Reckoning\n *                             New Year's Day.\n */\nconst daysElapsedToNewReckoningYear = (\n    getYearWithRemainder: { (daysElapsed: number): YearWithRemainder },\n    daysElapsed: number\n): YearWithRemainder => {\n    let yearWithRemainder = getYearWithRemainder(daysElapsed);\n\n    // New Reckoning always starts 85 days after old style New Year's Day.\n    if (yearWithRemainder.daysRemainder < 85) {\n        yearWithRemainder = getYearWithRemainder(daysElapsed - 365);\n        yearWithRemainder.daysRemainder += 365;\n    }\n\n    yearWithRemainder.daysRemainder -= 85;\n\n    return yearWithRemainder;\n};\n\n/**\n * @param {Date} date1\n * @param {Date} date2\n * @return {boolean} True if the given dates have the same year, month, and date.\n */\nconst datesMatch = (date1: Date, date2: Date): boolean => {\n    return (\n        date1.getFullYear() === date2.getFullYear()\n        && date1.getMonth() === date2.getMonth()\n        && date1.getDate() === date2.getDate()\n    );\n};\n\n/**\n * @param {number} fullYear\n * @param {number} month\n * @param {number} day\n * @return {Date} - A Date at midnight for the given year/month/day.\n */\nconst fullYearDate = (fullYear: number, month: number, day: number): Date => {\n    let date = new Date(fullYear, month, day, 0, 0, 0);\n\n    // reset full year, month, and day for years 0-99\n    date.setFullYear(fullYear, month, day);\n\n    return date;\n};\n\n/**\n *\n * @param today\n * @returns yesterday - A new Date instance that is 1 day before the given `today`.\n */\nconst getPrevDate = (today: Date): Date => {\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n\n    return yesterday;\n};\n\n/**\n * @param today\n * @returns tomorrow - A new Date instance that is 1 day after the given `today`.\n */\nconst getNextDate = (today: Date): Date => {\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n\n    return tomorrow;\n};\n\n/**\n * @property day - The number of the day of the month, if this date is not intercalary; otherwise, the name of the intercalary date.\n * @property month - The month index.\n * @property weekDay - The weekday index.\n * @property gregorian - The corresponding Gregorian date.\n */\ninterface CalendarDate {\n    day: number | string;\n    month: number;\n    weekDay: number;\n    gregorian: Date;\n}\n\n/**\n * @property year - The current year.\n * @property dates - The dates of this calendar year.\n * @property today - The given Gregorian Date this calendar year was generated from.\n */\ninterface Calendar {\n    year: number;\n    dates: CalendarDate[];\n    today: Date;\n}\n\nconst getFirstDate = (calendar: Calendar) => calendar.dates[0];\nconst getLastDate = (calendar: Calendar) =>\n    calendar.dates[calendar.dates.length - 1];\n\nconst getFirstDay = (calendar: Calendar) => getFirstDate(calendar).gregorian;\nconst getLastDay = (calendar: Calendar) => getLastDate(calendar).gregorian;\n\nexport {\n    GREGORIAN_DAYS_PER_4_YEARS,\n    GREGORIAN_DAYS_PER_100_YEARS,\n    GREGORIAN_DAYS_PER_400_YEARS,\n    GONDOR_DAYS_PER_4_YEARS,\n    GONDOR_DAYS_PER_100_YEARS,\n    GONDOR_DAYS_PER_1000_YEARS,\n    SECOND_AGE_TOTAL_DAYS,\n    THIRD_AGE_2059_TOTAL_DAYS,\n    THIRD_AGE_2360_TOTAL_DAYS,\n    Calendar,\n    CalendarDate,\n    YearWithRemainder,\n    toDaysElapsed,\n    daysElapsedToGregorianYear,\n    daysElapsedToSecondAgeYear,\n    daysElapsedToNewReckoningYear,\n    getNewYearDate,\n    getWeekDay,\n    isLeapYear,\n    datesMatch,\n    fullYearDate,\n    getNextDate,\n    getPrevDate,\n    getFirstDate,\n    getLastDate,\n    getFirstDay,\n    getLastDay,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    Button,\n    MenuItem,\n    TextField,\n    Toolbar,\n    Typography,\n} from \"@mui/material\";\n\nimport { fullYearDate } from \"../Utils\";\nimport \"./examples.css\";\n\nconst CalendarCellStyle = {\n    verticalAlign: \"top\",\n};\n\nconst CaptionCellStyle = {\n    verticalAlign: \"top\",\n    padding: \"1rem\",\n    borderTopStyle: \"solid\",\n    borderLeftStyle: \"solid\",\n    borderRightStyle: \"solid\",\n};\n\nconst DateNumberInput = (props: any) => (\n    <TextField type=\"number\" className=\"date-time-input\" step={1} {...props} />\n);\n\nconst OutlinedSelect = (props: any) => <TextField select {...props} />;\n\nconst ArrowKeyNavSelect = ({\n    onArrowUp,\n    onArrowDown,\n    onArrowRight,\n    onArrowLeft,\n    SelectProps,\n    ...props\n}: any) => {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <OutlinedSelect\n            SelectProps={{\n                open,\n                onClose: () => setOpen(false),\n                onOpen: (event: any) => {\n                    if (event.key !== \"ArrowUp\" && event.key !== \"ArrowDown\") {\n                        setOpen(true);\n                    }\n                },\n                ...SelectProps,\n            }}\n            onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n                if (event.key === \"ArrowUp\" && onArrowUp) {\n                    onArrowUp();\n                }\n                if (event.key === \"ArrowDown\" && onArrowDown) {\n                    onArrowDown();\n                }\n                if (event.key === \"ArrowRight\" && onArrowRight) {\n                    event.preventDefault();\n                    onArrowRight();\n                }\n                if (event.key === \"ArrowLeft\" && onArrowLeft) {\n                    event.preventDefault();\n                    onArrowLeft();\n                }\n            }}\n            {...props}\n        />\n    );\n};\n\nconst DateMonthSelect = ({ monthFormat = \"short\", ...props }: any) => {\n    const monthFormatter = new Intl.DateTimeFormat(\"en\", {\n        month: monthFormat,\n    });\n\n    const style = monthFormat === \"long\" ? { width: \"8.5rem\" } : undefined;\n\n    return (\n        <ArrowKeyNavSelect\n            label=\"Month\"\n            className=\"gregorian-month-picker\"\n            style={style}\n            {...props}\n        >\n            {[...Array(12)].map((_, m) => (\n                <MenuItem key={m} value={m}>\n                    {monthFormatter.format(new Date(2000, m, 1))}\n                </MenuItem>\n            ))}\n        </ArrowKeyNavSelect>\n    );\n};\n\nconst DayInput = (props: any) => {\n    return <DateNumberInput label=\"Day\" {...props} />;\n};\n\nconst YearInput = (props: any) => {\n    return <DateNumberInput label=\"Year\" {...props} />;\n};\n\nconst parseDatePickerChangedDate = (\n    year: number,\n    month: number,\n    day: number\n) => {\n    if (0 <= day && day <= 32) {\n        const currentDate = fullYearDate(year, month, day);\n\n        if (!isNaN(currentDate.getFullYear())) {\n            return currentDate;\n        }\n    }\n\n    return null;\n};\n\ninterface DatePickerProps {\n    date: Date;\n    onDateChanged: (date: Date) => void;\n    todayEnabled?: boolean;\n    label?: string;\n    className?: string;\n}\n\nconst DatePicker = (props: DatePickerProps) => {\n    const {\n        date: currentDate,\n        todayEnabled = true,\n        label = \"Gregorian Date:\",\n        className = \"gregorian-date-picker\",\n    } = props;\n\n    const resetDate = () => {\n        props.onDateChanged(new Date());\n    };\n\n    const onMonthChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const year = currentDate.getFullYear();\n        const month = parseInt(event.target.value, 10);\n        const day = currentDate.getDate();\n\n        onDateChanged(year, month, day);\n    };\n\n    const onMonthInc = () => {\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const day = currentDate.getDate();\n\n        onDateChanged(\n            month === 11 ? year + 1 : year,\n            month === 11 ? 0 : month + 1,\n            day\n        );\n    };\n\n    const onMonthDec = () => {\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const day = currentDate.getDate();\n\n        onDateChanged(\n            month === 0 ? year - 1 : year,\n            month === 0 ? 11 : month - 1,\n            day\n        );\n    };\n\n    const onDayChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const day = parseInt(event.target.value, 10);\n\n        onDateChanged(year, month, day);\n    };\n\n    const onYearChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const year = parseInt(event.target.value, 10);\n        const month = currentDate.getMonth();\n        const day = currentDate.getDate();\n\n        onDateChanged(year, month, day);\n    };\n\n    const onDateChanged = (year: number, month: number, day: number) => {\n        const currentDate = parseDatePickerChangedDate(year, month, day);\n\n        if (currentDate) {\n            props.onDateChanged(currentDate);\n        }\n    };\n\n    return (\n        <Toolbar className={className} style={{ paddingLeft: 0 }}>\n            {label && <Typography variant=\"h6\">{label}</Typography>}\n            <DateMonthSelect\n                value={currentDate.getMonth()}\n                onChange={onMonthChanged}\n                monthFormat=\"long\"\n                onArrowUp={onMonthDec}\n                onArrowLeft={onMonthDec}\n                onArrowDown={onMonthInc}\n                onArrowRight={onMonthInc}\n            />\n            <DayInput value={currentDate.getDate()} onChange={onDayChanged} />\n            <YearInput\n                style={{ width: \"6.2rem\" }}\n                value={currentDate.getFullYear()}\n                onChange={onYearChanged}\n            />\n            {todayEnabled && (\n                <Button\n                    variant=\"outlined\"\n                    size=\"large\"\n                    className=\"today-button\"\n                    onClick={resetDate}\n                >\n                    <span className=\"today-button-txt\">Today</span>\n                </Button>\n            )}\n        </Toolbar>\n    );\n};\n\nconst Badges = () => (\n    <>\n        <a\n            href=\"https://www.npmjs.org/package/shire-reckoning\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <img\n                src=\"https://img.shields.io/npm/v/shire-reckoning.svg?logo=npm\"\n                alt=\"[npm version]\"\n            />\n        </a>\n        &nbsp;\n        <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img\n                src=\"https://img.shields.io/npm/dependency-version/shire-reckoning/peer/react.svg?logo=react\"\n                alt=\"[react dependency version]\"\n            />\n        </a>\n    </>\n);\n\nconst DisplayTableRows = ({ rows }: { rows: React.ReactNode[][] }) => (\n    <table\n        border={1}\n        cellPadding={2}\n        style={{ margin: \"1em\", fontFamily: \"monospace\" }}\n    >\n        <tbody>\n            {rows.map((row, index) => (\n                <tr key={index}>\n                    {row.map((cell, index) => (\n                        <td key={index}>{cell}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\ninterface DisplayTableMapProps {\n    rowKeys: string[];\n    colKeys: string[];\n    table: { [row: string]: { [col: string]: React.ReactNode } };\n}\nconst DisplayTableMap = ({ rowKeys, colKeys, table }: DisplayTableMapProps) => (\n    <table\n        border={1}\n        cellPadding={2}\n        style={{ margin: \"1em\", fontFamily: \"monospace\", whiteSpace: \"pre\" }}\n    >\n        <tbody>\n            <tr>\n                <th></th>\n                {colKeys.map((head) => (\n                    <th key={head}>{head}</th>\n                ))}\n            </tr>\n            {rowKeys.map((row) => (\n                <tr key={row} style={{ textAlign: \"right\" }}>\n                    <th>{row}</th>\n                    {colKeys.map((col) => (\n                        <td key={col}>{table[row][col]}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\nexport {\n    Badges,\n    CalendarCellStyle,\n    CaptionCellStyle,\n    DateMonthSelect,\n    DateNumberInput,\n    DatePicker,\n    DisplayTableMap,\n    DisplayTableRows,\n    DayInput,\n    YearInput,\n    OutlinedSelect,\n    ArrowKeyNavSelect,\n    parseDatePickerChangedDate,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { MenuItem } from \"@mui/material\";\n\nimport {\n    GondorMonths,\n    GondorReckoningEnum,\n    convertGondorianMonthIndex,\n    makeGondorCalendarDates,\n} from \"../GondorReckoning\";\n\nimport { datesMatch, getFirstDay, getLastDay } from \"../Utils\";\n\nimport GondorCalendar, { defaultCaption } from \"../ui/GondorCalendar\";\nimport { LanguageEnum } from \"../ui/controls/LanguagePicker\";\nimport { MonthLayoutEnum } from \"../ui/controls/MonthViewLayout\";\nimport \"../ui/tolkien-calendars.css\";\n\nimport { OutlinedSelect } from \"./Common\";\nimport LanguagePicker from \"./controls/LanguagePicker\";\nimport MonthViewLayout from \"./controls/MonthViewLayout\";\nimport MonthViewPicker from \"./controls/MonthViewPicker\";\nimport { ShireStartDatePicker } from \"./controls/StartDatePicker\";\nimport { scriptFontFamily } from \"./theme\";\n\nimport { Grid } from \"@mui/material\";\n\ninterface GondorCalendarWithControlsProps {\n    className: string;\n    language?: LanguageEnum;\n    monthViewLayout?: MonthLayoutEnum;\n    reckoning?: GondorReckoningEnum;\n    date: Date;\n    startDate: Date;\n    onCalendarStartChange: (startDate: Date) => void;\n}\n\nconst GondorCalendarWithControls = (props: GondorCalendarWithControlsProps) => {\n    const {\n        className,\n        date: nextDate,\n        startDate: nextStartDate,\n        onCalendarStartChange,\n    } = props;\n\n    const [language, setLanguage] = React.useState(\n        props.language || LanguageEnum.QUENYA\n    );\n    const [monthViewLayout, setMonthViewLayout] = React.useState(\n        props.monthViewLayout || MonthLayoutEnum.VERTICAL\n    );\n    const [yearView, setYearView] = React.useState(false);\n    const [today, setToday] = React.useState(nextDate);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n\n    const [reckoning, setReckoning] = React.useState(\n        props.reckoning || GondorReckoningEnum.STEWARDS\n    );\n\n    const [calendar, setCalendar] = React.useState(() =>\n        makeGondorCalendarDates(today, startDate, reckoning)\n    );\n\n    const viewDate = calendar.todayGondor.gregorian;\n    const thisMonth = calendar.todayGondor.month;\n    const [monthView, setMonthView] = React.useState(thisMonth);\n\n    // Check object equality so views are updated anytime `Today` is clicked.\n    const updateToday = today !== nextDate;\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    if (updateToday || updateStartDate) {\n        const nextCalendar = makeGondorCalendarDates(\n            nextDate,\n            nextStartDate,\n            reckoning\n        );\n        setCalendar(nextCalendar);\n        setMonthView(nextCalendar.todayGondor.month);\n    }\n\n    const onMonthViewChange = (\n        nextViewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => {\n        setMonthView(monthView);\n        setYearView(yearView);\n\n        if (!datesMatch(viewDate, nextViewDate)) {\n            const nextCalendar = makeGondorCalendarDates(\n                nextViewDate,\n                startDate,\n                reckoning\n            );\n            setCalendar(nextCalendar);\n            setMonthView(nextCalendar.todayGondor.month);\n        }\n    };\n\n    const onStartMonthChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        const nextReckoning = event.target.value as GondorReckoningEnum;\n        const convertedMonthView = convertGondorianMonthIndex(\n            reckoning,\n            nextReckoning,\n            monthView\n        );\n\n        setReckoning(nextReckoning);\n        setMonthView(convertedMonthView);\n        setCalendar(\n            makeGondorCalendarDates(viewDate, startDate, nextReckoning)\n        );\n    };\n\n    const onMonthViewLayoutChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        setMonthViewLayout(event.target.value as MonthLayoutEnum);\n    };\n\n    const onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setLanguage(event.target.value as LanguageEnum);\n    };\n\n    const firstDay = getFirstDay(calendar);\n    const lastDay = getLastDay(calendar);\n\n    const startMonth = reckoning === GondorReckoningEnum.NEW ? 3 : 0;\n    const months = [];\n    for (let i = startMonth; i < GondorMonths.length + startMonth; i++) {\n        const gondorMonth = GondorMonths[i % 12];\n        months.push({\n            emoji: gondorMonth.emoji,\n            name: gondorMonth[language],\n        });\n    }\n\n    return (\n        <table className={className}>\n            <caption className=\"gondor-caption\">\n                {defaultCaption(reckoning)}\n            </caption>\n            <thead>\n                <tr>\n                    <th className=\"gondor-calendar-controls\">\n                        <ShireStartDatePicker\n                            selectedDate={startDate}\n                            onCalendarStartChange={onCalendarStartChange}\n                        />\n                        <OutlinedSelect\n                            className=\"gondor-rules-select\"\n                            style={{\n                                width: \"9.75rem\",\n                                margin: \"0.25rem 0\",\n                            }}\n                            SelectProps={{\n                                SelectDisplayProps: {\n                                    style: {\n                                        fontSize: \"0.72rem\",\n                                        fontWeight: \"normal\",\n                                        fontFamily: scriptFontFamily,\n                                    },\n                                },\n                            }}\n                            value={reckoning}\n                            onChange={onStartMonthChange}\n                        >\n                            <MenuItem value={GondorReckoningEnum.KINGS}>\n                                Kings' Reckoning\n                            </MenuItem>\n                            <MenuItem value={GondorReckoningEnum.STEWARDS}>\n                                Stewards' Reckoning\n                            </MenuItem>\n                            <MenuItem value={GondorReckoningEnum.NEW}>\n                                New Reckoning\n                            </MenuItem>\n                        </OutlinedSelect>\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justifyContent=\"center\"\n                            alignItems=\"flex-end\"\n                            wrap=\"nowrap\"\n                        >\n                            <LanguagePicker\n                                language={language}\n                                onLanguageChange={onLanguageChange}\n                            />\n                            <MonthViewLayout\n                                layout={monthViewLayout}\n                                onMonthViewLayoutChange={\n                                    onMonthViewLayoutChange\n                                }\n                            />\n                        </Grid>\n                    </th>\n                    <th className=\"gondor-calendar-controls month-picker-container\">\n                        <MonthViewPicker\n                            months={months}\n                            firstDay={firstDay}\n                            lastDay={lastDay}\n                            thisMonth={thisMonth}\n                            today={today}\n                            viewDate={viewDate}\n                            monthView={monthView}\n                            yearView={yearView}\n                            onMonthViewChange={onMonthViewChange}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3} className=\"shire-calendar-wrapper-cell\">\n                        <GondorCalendar\n                            className=\"shire-calendar gondor-calendar\"\n                            calendar={calendar}\n                            date={today}\n                            reckoning={reckoning}\n                            language={language}\n                            monthViewLayout={monthViewLayout}\n                            monthView={monthView}\n                            yearView={yearView}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default GondorCalendarWithControls;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { MenuItem } from \"@mui/material\";\n\nimport {\n    RivendellMonths,\n    RivendellRulesEnum,\n    makeRivendellCalendarDates,\n} from \"../RivendellReckoning\";\n\nimport { datesMatch, getFirstDay, getLastDay } from \"../Utils\";\n\nimport RivendellCalendar from \"../ui/RivendellCalendar\";\nimport { LanguageEnum } from \"../ui/controls/LanguagePicker\";\nimport \"../ui/tolkien-calendars.css\";\n\nimport { OutlinedSelect } from \"./Common\";\nimport LanguagePicker from \"./controls/LanguagePicker\";\nimport MonthViewPicker from \"./controls/MonthViewPicker\";\nimport { RivendellStartDatePicker } from \"./controls/StartDatePicker\";\n\ninterface RivendellCalendarWithControlsProps {\n    yearView: boolean;\n    date: Date;\n    startDate: Date;\n    calendarRules: RivendellRulesEnum;\n    onCalendarStartChange: (startDate: Date) => void;\n    onCalendarRulesChange: React.ChangeEventHandler<HTMLSelectElement>;\n}\n\nconst RivendellCalendarWithControls = (\n    props: RivendellCalendarWithControlsProps\n) => {\n    const {\n        yearView: nextYearView,\n        date: nextDate,\n        startDate: nextStartDate,\n        onCalendarStartChange,\n        onCalendarRulesChange,\n    } = props;\n\n    const [language, setLanguage] = React.useState(LanguageEnum.QUENYA);\n    const [propsYearView, setPropsYearView] = React.useState(nextYearView);\n    const [yearView, setYearView] = React.useState(nextYearView);\n    const [today, setToday] = React.useState(nextDate);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n\n    const nextRules = props.calendarRules || RivendellRulesEnum.TRADITIONAL;\n    const [calendarRules, setCalendarRules] = React.useState(nextRules);\n\n    const [calendar, setCalendar] = React.useState(() =>\n        makeRivendellCalendarDates(today, startDate, calendarRules)\n    );\n\n    const viewDate = calendar.todayRivendell.gregorian;\n    const thisMonth = calendar.todayRivendell.month;\n    const [monthView, setMonthView] = React.useState(thisMonth);\n\n    // Check object equality so views are updated anytime `Today` is clicked.\n    const updateToday = today !== nextDate;\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    const updateRules = calendarRules !== nextRules;\n    if (updateRules) {\n        setCalendarRules(nextRules);\n    }\n\n    if (updateToday || updateStartDate || updateRules) {\n        const nextCalendar = makeRivendellCalendarDates(\n            nextDate,\n            nextStartDate,\n            nextRules\n        );\n        setCalendar(nextCalendar);\n        setMonthView(nextCalendar.todayRivendell.month);\n    }\n\n    // If yearView from props changes, or is on, it should override this state.\n    if (propsYearView !== nextYearView || (propsYearView && !yearView)) {\n        setPropsYearView(nextYearView);\n        setYearView(nextYearView);\n    }\n\n    const onMonthViewChange = (\n        nextViewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => {\n        setMonthView(monthView);\n        setYearView(yearView);\n\n        if (!datesMatch(viewDate, nextViewDate)) {\n            const nextCalendar = makeRivendellCalendarDates(\n                nextViewDate,\n                startDate,\n                calendarRules\n            );\n            setCalendar(nextCalendar);\n            setMonthView(nextCalendar.todayRivendell.month);\n        }\n    };\n\n    const onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setLanguage(event.target.value as LanguageEnum);\n    };\n\n    const firstDay = getFirstDay(calendar);\n    const lastDay = getLastDay(calendar);\n\n    const months = RivendellMonths.map(function (month) {\n        return { emoji: month.emoji, name: month[language] };\n    });\n\n    return (\n        <table className=\"shire-calendar rivendell-calendar shire-calendar-styled-example\">\n            <caption className=\"rivendell-caption\">Rivendell Reckoning</caption>\n            <thead>\n                <tr>\n                    <th className=\"rivendell-calendar-controls\">\n                        <RivendellStartDatePicker\n                            selectedDate={startDate}\n                            onCalendarStartChange={onCalendarStartChange}\n                        />\n                        <OutlinedSelect\n                            className=\"rivendell-rules-select\"\n                            style={{\n                                width: \"9.75rem\",\n                                margin: \"0.25rem 0\",\n                            }}\n                            SelectProps={{\n                                SelectDisplayProps: {\n                                    style: { fontSize: \"0.72rem\" },\n                                },\n                            }}\n                            value={calendarRules}\n                            onChange={onCalendarRulesChange}\n                        >\n                            <MenuItem value={RivendellRulesEnum.TRADITIONAL}>\n                                Traditional Rules\n                            </MenuItem>\n                            <MenuItem value={RivendellRulesEnum.REFORMED}>\n                                Reformed Rules\n                            </MenuItem>\n                        </OutlinedSelect>\n                        <LanguagePicker\n                            language={language}\n                            onLanguageChange={onLanguageChange}\n                        />\n                    </th>\n                    <th className=\"rivendell-calendar-controls month-picker-container\">\n                        <MonthViewPicker\n                            months={months}\n                            monthLabel=\"Season\"\n                            firstDay={firstDay}\n                            lastDay={lastDay}\n                            thisMonth={thisMonth}\n                            today={today}\n                            viewDate={viewDate}\n                            monthView={monthView}\n                            yearView={yearView}\n                            onMonthViewChange={onMonthViewChange}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3} className=\"shire-calendar-wrapper-cell\">\n                        <RivendellCalendar\n                            className=\"shire-calendar rivendell-calendar\"\n                            calendar={calendar}\n                            date={today}\n                            language={language}\n                            monthView={monthView}\n                            yearView={yearView}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default RivendellCalendarWithControls;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    ShireMonths,\n    ShireRegionEnum,\n    makeShireCalendarDates,\n} from \"../ShireReckoning\";\nimport { datesMatch, getFirstDay, getLastDay } from \"../Utils\";\n\nimport ShireCalendar from \"../ui/ShireCalendar\";\nimport { MonthLayoutEnum } from \"../ui/controls/MonthViewLayout\";\nimport \"../ui/tolkien-calendars.css\";\n\nimport MonthViewLayout from \"./controls/MonthViewLayout\";\nimport MonthViewPicker from \"./controls/MonthViewPicker\";\nimport ShireRegionPicker from \"./controls/ShireRegionPicker\";\nimport { ShireStartDatePicker } from \"./controls/StartDatePicker\";\n\ninterface ShireCalendarWithControlsProps {\n    region: ShireRegionEnum;\n    yearView: boolean;\n    date: Date;\n    startDate: Date;\n    onCalendarStartChange: (startDate: Date) => void;\n    onRegionChange: React.ChangeEventHandler<HTMLSelectElement>;\n}\n\nconst ShireCalendarWithControls = (props: ShireCalendarWithControlsProps) => {\n    const {\n        region,\n        yearView: nextYearView,\n        date: nextDate,\n        startDate: nextStartDate,\n        onCalendarStartChange,\n        onRegionChange,\n    } = props;\n\n    const [monthViewLayout, setMonthViewLayout] = React.useState(\n        MonthLayoutEnum.HORIZONTAL\n    );\n    const [propsYearView, setPropsYearView] = React.useState(nextYearView);\n    const [yearView, setYearView] = React.useState(nextYearView);\n    const [today, setToday] = React.useState(nextDate);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n    const [calendar, setCalendar] = React.useState(() =>\n        makeShireCalendarDates(today, startDate)\n    );\n\n    const viewDate = calendar.todayShire.gregorian;\n    const thisMonth = calendar.todayShire.month;\n    const [monthView, setMonthView] = React.useState(thisMonth);\n\n    // Check object equality so views are updated anytime `Today` is clicked.\n    const updateToday = today !== nextDate;\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    if (updateToday || updateStartDate) {\n        const nextCalendar = makeShireCalendarDates(nextDate, nextStartDate);\n        setCalendar(nextCalendar);\n        setMonthView(nextCalendar.todayShire.month);\n    }\n\n    // If yearView from props changes, or is on, it should override this state.\n    if (propsYearView !== nextYearView || (propsYearView && !yearView)) {\n        setPropsYearView(nextYearView);\n        setYearView(nextYearView);\n    }\n\n    const onMonthViewChange = (\n        nextViewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => {\n        setMonthView(monthView);\n        setYearView(yearView);\n\n        if (!datesMatch(viewDate, nextViewDate)) {\n            const nextCalendar = makeShireCalendarDates(\n                nextViewDate,\n                startDate\n            );\n            setCalendar(nextCalendar);\n            setMonthView(nextCalendar.todayShire.month);\n        }\n    };\n\n    const onMonthViewLayoutChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        setMonthViewLayout(event.target.value as MonthLayoutEnum);\n    };\n\n    const firstDay = getFirstDay(calendar);\n    const lastDay = getLastDay(calendar);\n\n    const months = ShireMonths.map(function (month) {\n        return { emoji: month.emoji, name: month[region] };\n    });\n\n    return (\n        <table className=\"shire-calendar shire-calendar-styled-example\">\n            <caption className=\"shire-caption\">Shire Reckoning</caption>\n            <thead>\n                <tr>\n                    <th className=\"shire-calendar-controls\">\n                        <ShireStartDatePicker\n                            selectedDate={startDate}\n                            onCalendarStartChange={onCalendarStartChange}\n                        />\n                        <ShireRegionPicker\n                            region={region}\n                            onRegionChange={onRegionChange}\n                        />\n                        <MonthViewLayout\n                            layout={monthViewLayout}\n                            onMonthViewLayoutChange={onMonthViewLayoutChange}\n                        />\n                    </th>\n                    <th className=\"shire-calendar-controls month-picker-container\">\n                        <MonthViewPicker\n                            months={months}\n                            firstDay={firstDay}\n                            lastDay={lastDay}\n                            thisMonth={thisMonth}\n                            today={today}\n                            viewDate={viewDate}\n                            monthView={monthView}\n                            yearView={yearView}\n                            onMonthViewChange={onMonthViewChange}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3} className=\"shire-calendar-wrapper-cell\">\n                        <ShireCalendar\n                            className=\"shire-calendar\"\n                            calendar={calendar}\n                            date={today}\n                            region={region}\n                            monthViewLayout={monthViewLayout}\n                            monthView={monthView}\n                            yearView={yearView}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default ShireCalendarWithControls;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\n\nimport {\n    Checkbox,\n    FormControlLabel,\n    ListItemText,\n    MenuItem,\n    Stack,\n} from \"@mui/material\";\n\nimport { ThemeProvider } from \"@mui/material/styles\";\n\nimport { datesMatch, fullYearDate } from \"../Utils\";\n\nimport { ShireRegionEnum } from \"../ShireReckoning\";\nimport { RivendellRulesEnum } from \"../RivendellReckoning\";\n\nimport ShireCalendar from \"../ui/ShireCalendar\";\nimport GondorCalendar from \"../ui/GondorCalendar\";\nimport RivendellCalendar from \"../ui/RivendellCalendar\";\nimport \"../ui/tolkien-calendars.css\";\n\nimport ShireCalendarWithControls from \"./ShireCalendarWithControls\";\nimport RivendellCalendarWithControls from \"./RivendellCalendarWithControls\";\nimport GondorCalendarWithControls from \"./GondorCalendarWithControls\";\n\nimport theme from \"./theme\";\n\nimport {\n    Badges,\n    CalendarCellStyle,\n    DatePicker,\n    OutlinedSelect,\n} from \"./Common\";\nimport \"./examples.css\";\n\n/**\n * @property {string} label - Display label for this synchronization scheme.\n * @property {Date} startDate - The Gregorian Date of the first Shire New Year Date.\n */\ninterface ShireCalendarSyncScheme {\n    label: string;\n    startDate: Date;\n}\n\ninterface ShireCalendarCustomSyncScheme extends ShireCalendarSyncScheme {\n    gondorLeftStartDate: Date;\n    gondorRightStartDate: Date;\n}\n\n/**\n * Shire Calendar synchronization schemes.\n * @constant\n */\nconst SyncShireCalendar: ShireCalendarSyncScheme[] = [\n    {\n        label: \"Mid-year's Day with the modern summer solstice.\",\n        startDate: fullYearDate(0, 11, 21),\n    },\n    {\n        label: \"Shire 'January' 9 with modern New Year's Day.\",\n        startDate: fullYearDate(0, 11, 23),\n    },\n    {\n        label: \"Shire New Year's Day with modern Christmas Day.\",\n        startDate: fullYearDate(0, 11, 25),\n    },\n    {\n        label: \"Mid-year's Day with Southern Hemisphere summer solstice.\",\n        startDate: fullYearDate(0, 5, 22),\n    },\n];\n\n/**\n * @property {string} label - Display label for this synchronization scheme.\n * @property {string} subtitle - Extra display info for this synchronization scheme.\n * @property {Date} startDate - The Gregorian Date of the first Rivendell New Year Date.\n * @property {RivendellRulesEnum} calendarRules\n */\ninterface RivendellCalendarSyncScheme {\n    label: string;\n    subtitle?: string;\n    startDate: Date;\n    calendarRules: RivendellRulesEnum;\n}\n\n/**\n * Rivendell Calendar synchronization schemes.\n * @constant\n */\nconst SyncRivendellCalendar: RivendellCalendarSyncScheme[] = [\n    {\n        label: `Enderi with \"Hobbit Day\"`,\n        subtitle: \"modern September 22, as Tolkien could have intended\",\n        startDate: fullYearDate(1, 2, 22),\n        calendarRules: RivendellCalendar.TRADITIONAL_RULES,\n    },\n    {\n        label: \"Yestarë with modern March 25\",\n        subtitle: `as Tolkien probably intended, but using my \"Reformed\" rules`,\n        startDate: fullYearDate(1, 2, 25),\n        calendarRules: RivendellCalendar.REFORMED_RULES,\n    },\n    {\n        label: `Yestarë with Shire 'April' 6, \"more or less\"`,\n        subtitle: \"the way it may have been by the end of the Third Age\",\n        startDate: fullYearDate(1, 2, 25),\n        calendarRules: RivendellCalendar.TRADITIONAL_RULES,\n    },\n    {\n        label: `with Boris Shapiro's \"7th Age\" Reckoning`,\n        subtitle: \"as detailed in http://www.elvish.org/gwaith/calendars.htm\",\n        startDate: fullYearDate(1, 2, 27),\n        calendarRules: RivendellCalendar.TRADITIONAL_RULES,\n    },\n    {\n        label: \"Enderi with March 25\",\n        subtitle: \"for our friends in the Southern Hemisphere\",\n        startDate: fullYearDate(0, 8, 22),\n        calendarRules: RivendellCalendar.TRADITIONAL_RULES,\n    },\n];\n\nconst findRivendellSyncIndex = (\n    rivendellStartDate: Date,\n    rivendellCalendarRules: RivendellRulesEnum\n) => {\n    let rivendellSyncScheme = SyncRivendellCalendar.findIndex(\n        (syncScheme) =>\n            syncScheme.calendarRules === rivendellCalendarRules\n            && datesMatch(syncScheme.startDate, rivendellStartDate)\n    );\n\n    if (rivendellSyncScheme < 0) {\n        rivendellSyncScheme = SyncRivendellCalendar.length;\n    }\n\n    return rivendellSyncScheme;\n};\n\nconst adjustRivendellAprilSyncScheme = (\n    shireStartDate: Date,\n    rivendellStartDate: Date,\n    rivendellSyncScheme: number\n) => {\n    const rivendellAprilSyncScheme = SyncRivendellCalendar[2];\n    rivendellAprilSyncScheme.startDate = new Date(shireStartDate);\n    rivendellAprilSyncScheme.startDate.setDate(shireStartDate.getDate() + 94);\n\n    if (\n        SyncRivendellCalendar[rivendellSyncScheme] === rivendellAprilSyncScheme\n    ) {\n        rivendellStartDate = rivendellAprilSyncScheme.startDate;\n    }\n\n    return rivendellStartDate;\n};\n\ninterface TolkienCalendarsExampleProps {\n    date?: Date;\n}\n\nconst TolkienCalendarsExample = (props: TolkienCalendarsExampleProps) => {\n    const [currentDate, setDate] = React.useState(props.date || new Date());\n\n    const [shireAlign, setShireAlign] = React.useState(false);\n    const [rivendellAlign, setRivendellAlign] = React.useState(false);\n\n    const [shireSyncScheme, setShireSyncScheme] = React.useState(0);\n    const [shireStartDate, setShireStartDate] = React.useState(\n        () => SyncShireCalendar[shireSyncScheme].startDate\n    );\n    const [shireCustomSyncScheme, setShireCustomSyncScheme] =\n        React.useState<ShireCalendarCustomSyncScheme>();\n\n    const [shireRegion, setShireRegion] = React.useState(\n        ShireCalendar.REGION_NAMES_TOLKIEN\n    );\n\n    const [gondorLeftStartDate, setGondorLeftStartDate] = React.useState(\n        new Date(shireStartDate)\n    );\n    const [gondorRightStartDate, setGondorRightStartDate] = React.useState(\n        new Date(shireStartDate)\n    );\n\n    const [rivendellSyncScheme, setRivendellSyncScheme] = React.useState(0);\n    const [rivendellStartDate, setRivendellStartDate] = React.useState(\n        () => SyncRivendellCalendar[rivendellSyncScheme].startDate\n    );\n    const [rivendellCustomSyncScheme, setRivendellCustomSyncScheme] =\n        React.useState<RivendellCalendarSyncScheme>();\n    const [rivendellCalendarRules, setRivendellCalendarRules] = React.useState(\n        () => SyncRivendellCalendar[rivendellSyncScheme].calendarRules\n    );\n\n    const onDateChanged = (currentDate: Date) => {\n        setDate(currentDate);\n    };\n\n    const alignChanged = (\n        event: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean\n    ) => {\n        setShireAlign(event.target.value === \"shire\" && checked);\n        setRivendellAlign(event.target.value === \"rivendell\" && checked);\n    };\n\n    const onShireSyncChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        let shireSyncScheme = parseInt(event.target.value, 10);\n        let shireStartDate, gondorLeftStartDate, gondorRightStartDate;\n\n        if (\n            shireCustomSyncScheme\n            && shireSyncScheme === SyncShireCalendar.length\n        ) {\n            shireStartDate = shireCustomSyncScheme.startDate;\n            gondorLeftStartDate = shireCustomSyncScheme.gondorLeftStartDate;\n            gondorRightStartDate = shireCustomSyncScheme.gondorRightStartDate;\n        } else {\n            if (shireSyncScheme === SyncShireCalendar.length) {\n                shireSyncScheme = 0;\n            } else if (\n                shireSyncScheme === 3\n                && shireRegion === ShireRegionEnum.TOLKIEN\n            ) {\n                setShireRegion(ShireRegionEnum.SHIRE);\n            }\n\n            shireStartDate = SyncShireCalendar[shireSyncScheme].startDate;\n\n            gondorLeftStartDate = shireStartDate;\n            gondorRightStartDate = shireStartDate;\n        }\n\n        setRivendellStartDate(\n            adjustRivendellAprilSyncScheme(\n                shireStartDate,\n                rivendellStartDate,\n                rivendellSyncScheme\n            )\n        );\n\n        setShireStartDate(shireStartDate);\n        setGondorLeftStartDate(gondorLeftStartDate);\n        setGondorRightStartDate(gondorRightStartDate);\n\n        setShireSyncScheme(shireSyncScheme);\n    };\n\n    const onShireStartDateChange = (shireStartDate: Date) => {\n        adjustShireSyncScheme(\n            shireStartDate,\n            gondorLeftStartDate,\n            gondorRightStartDate\n        );\n    };\n\n    const onGondorLeftStartDateChange = (gondorLeftStartDate: Date) => {\n        adjustShireSyncScheme(\n            shireStartDate,\n            gondorLeftStartDate,\n            gondorRightStartDate\n        );\n    };\n\n    const onGondorRightStartDateChange = (gondorRightStartDate: Date) => {\n        adjustShireSyncScheme(\n            shireStartDate,\n            gondorLeftStartDate,\n            gondorRightStartDate\n        );\n    };\n\n    const adjustShireSyncScheme = (\n        shireStartDate: Date,\n        gondorLeftStartDate: Date,\n        gondorRightStartDate: Date\n    ) => {\n        let shireSyncScheme = SyncShireCalendar.findIndex(\n            (syncScheme) =>\n                syncScheme.startDate\n                && datesMatch(syncScheme.startDate, shireStartDate)\n        );\n\n        if (\n            shireSyncScheme < 0\n            || !datesMatch(shireStartDate, gondorLeftStartDate)\n            || !datesMatch(shireStartDate, gondorRightStartDate)\n        ) {\n            shireSyncScheme = SyncShireCalendar.length;\n\n            if (\n                !shireCustomSyncScheme\n                || !datesMatch(shireCustomSyncScheme.startDate, shireStartDate)\n                || !datesMatch(\n                    shireCustomSyncScheme.gondorLeftStartDate,\n                    gondorLeftStartDate\n                )\n                || !datesMatch(\n                    shireCustomSyncScheme.gondorRightStartDate,\n                    gondorRightStartDate\n                )\n            ) {\n                setShireCustomSyncScheme({\n                    label: \"Custom Reckoning\",\n                    startDate: shireStartDate,\n                    gondorLeftStartDate,\n                    gondorRightStartDate,\n                });\n            }\n        }\n\n        setRivendellStartDate(\n            adjustRivendellAprilSyncScheme(\n                shireStartDate,\n                rivendellStartDate,\n                rivendellSyncScheme\n            )\n        );\n\n        setShireStartDate(shireStartDate);\n        setGondorLeftStartDate(gondorLeftStartDate);\n        setGondorRightStartDate(gondorRightStartDate);\n        setShireSyncScheme(shireSyncScheme);\n    };\n\n    const onShireRegionChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        setShireRegion(event.target.value as ShireRegionEnum);\n    };\n\n    const onRivendellSyncChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        let rivendellSyncScheme = parseInt(event.target.value, 10);\n\n        const syncScheme =\n            rivendellSyncScheme < SyncRivendellCalendar.length\n                ? SyncRivendellCalendar[rivendellSyncScheme]\n                : rivendellCustomSyncScheme || SyncRivendellCalendar[0];\n\n        setRivendellStartDate(syncScheme.startDate);\n        setRivendellCalendarRules(syncScheme.calendarRules);\n\n        setRivendellSyncScheme(rivendellSyncScheme);\n    };\n\n    const onRivendellStartDateChange = (rivendellStartDate: Date) => {\n        const rivendellSyncScheme = findRivendellSyncIndex(\n            rivendellStartDate,\n            rivendellCalendarRules\n        );\n\n        if (rivendellSyncScheme === SyncRivendellCalendar.length) {\n            if (\n                !(\n                    rivendellCustomSyncScheme\n                    && datesMatch(\n                        rivendellCustomSyncScheme.startDate,\n                        rivendellStartDate\n                    )\n                )\n            ) {\n                setRivendellCustomSyncScheme({\n                    label: \"Custom Reckoning\",\n                    startDate: rivendellStartDate,\n                    calendarRules: rivendellCalendarRules,\n                });\n            }\n        }\n\n        setRivendellStartDate(rivendellStartDate);\n        setRivendellSyncScheme(rivendellSyncScheme);\n    };\n\n    const onRivendellRulesChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        const rivendellCalendarRules = event.target.value as RivendellRulesEnum;\n        const rivendellSyncScheme = findRivendellSyncIndex(\n            rivendellStartDate,\n            rivendellCalendarRules\n        );\n\n        if (rivendellSyncScheme === SyncRivendellCalendar.length) {\n            if (\n                !(\n                    rivendellCustomSyncScheme\n                    && rivendellCustomSyncScheme.calendarRules\n                        === rivendellCalendarRules\n                )\n            ) {\n                setRivendellCustomSyncScheme({\n                    label: \"Custom Reckoning\",\n                    startDate: rivendellStartDate,\n                    calendarRules: rivendellCalendarRules,\n                });\n            }\n        }\n\n        setRivendellCalendarRules(rivendellCalendarRules);\n        setRivendellSyncScheme(rivendellSyncScheme);\n    };\n\n    let shireCellClassName = \"\";\n    if (shireAlign) {\n        shireCellClassName = \" align-shire-calendar\";\n    }\n    let rivendellCellClassName = \"\";\n    if (rivendellAlign) {\n        rivendellCellClassName = \" align-rivendell-calendar\";\n    }\n\n    const shireSyncSchemes = [...SyncShireCalendar];\n    if (shireCustomSyncScheme) {\n        shireSyncSchemes.push(shireCustomSyncScheme);\n    }\n\n    const shireSyncOptions = shireSyncSchemes.map((sync, i) => {\n        return (\n            <MenuItem key={i} value={i}>\n                {`Synchronize ${sync.label}`}\n            </MenuItem>\n        );\n    });\n\n    const rivendellSyncSchemes = [...SyncRivendellCalendar];\n    if (rivendellCustomSyncScheme) {\n        rivendellSyncSchemes.push(rivendellCustomSyncScheme);\n    }\n\n    const rivendellSyncOptions = rivendellSyncSchemes.map((sync, i) => {\n        return (\n            <MenuItem key={i} value={i}>\n                <ListItemText\n                    primary={`Synchronize ${sync.label}`}\n                    secondary={sync.subtitle}\n                />\n            </MenuItem>\n        );\n    });\n\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td colSpan={2}>\n                        <Stack justifyContent=\"center\">\n                            <DatePicker\n                                date={currentDate}\n                                onDateChanged={onDateChanged}\n                            />\n                        </Stack>\n                    </td>\n                </tr>\n                <tr>\n                    <th className=\"sync-calendar-controls\">\n                        <OutlinedSelect\n                            className=\"shire-sync-select\"\n                            label=\"Synchronize\"\n                            value={shireSyncScheme}\n                            onChange={onShireSyncChange}\n                            SelectProps={{\n                                renderValue: (value: number) =>\n                                    shireSyncSchemes[value].label,\n                            }}\n                        >\n                            {shireSyncOptions}\n                        </OutlinedSelect>\n                    </th>\n                    <th className=\"sync-calendar-controls\">\n                        <OutlinedSelect\n                            className=\"rivendell-sync-select\"\n                            label=\"Synchronize\"\n                            value={rivendellSyncScheme}\n                            onChange={onRivendellSyncChange}\n                            SelectProps={{\n                                renderValue: (value: number) =>\n                                    rivendellSyncSchemes[value].label,\n                            }}\n                        >\n                            {rivendellSyncOptions}\n                        </OutlinedSelect>\n                    </th>\n                </tr>\n                <tr>\n                    <th>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    value=\"shire\"\n                                    checked={shireAlign}\n                                    onChange={alignChanged}\n                                />\n                            }\n                            label=\"Try to align Shire Year with Rivendell Year?\"\n                        />\n                    </th>\n                    <th>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    value=\"rivendell\"\n                                    checked={rivendellAlign}\n                                    onChange={alignChanged}\n                                />\n                            }\n                            label=\"Try to align Rivendell Year with Shire Year?\"\n                        />\n                    </th>\n                </tr>\n                <tr>\n                    <td\n                        style={CalendarCellStyle}\n                        className={shireCellClassName}\n                    >\n                        <ShireCalendarWithControls\n                            region={shireRegion}\n                            date={currentDate}\n                            startDate={shireStartDate}\n                            onCalendarStartChange={onShireStartDateChange}\n                            onRegionChange={onShireRegionChange}\n                            yearView={shireAlign || rivendellAlign}\n                        />\n                    </td>\n                    <td\n                        style={CalendarCellStyle}\n                        className={rivendellCellClassName}\n                    >\n                        <RivendellCalendarWithControls\n                            date={currentDate}\n                            startDate={rivendellStartDate}\n                            calendarRules={rivendellCalendarRules}\n                            onCalendarStartChange={onRivendellStartDateChange}\n                            onCalendarRulesChange={onRivendellRulesChange}\n                            yearView={shireAlign || rivendellAlign}\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td style={CalendarCellStyle}>\n                        <GondorCalendarWithControls\n                            language={GondorCalendar.LANGUAGE_ENGLISH}\n                            monthViewLayout={\n                                GondorCalendar.MONTH_VIEW_HORIZONTAL\n                            }\n                            date={currentDate}\n                            startDate={gondorLeftStartDate}\n                            onCalendarStartChange={onGondorLeftStartDateChange}\n                            className=\"shire-calendar gondor-calendar stewards-calendar shire-calendar-styled-example\"\n                        />\n                    </td>\n                    <td style={CalendarCellStyle}>\n                        <GondorCalendarWithControls\n                            reckoning={GondorCalendar.RECKONING_NEW}\n                            date={currentDate}\n                            startDate={gondorRightStartDate}\n                            onCalendarStartChange={onGondorRightStartDateChange}\n                            className=\"shire-calendar gondor-calendar new-reckoning-calendar shire-calendar-styled-example\"\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport const StyledTolkienCalendars = (props: TolkienCalendarsExampleProps) => (\n    <ThemeProvider theme={theme}>\n        <TolkienCalendarsExample {...props} />\n    </ThemeProvider>\n);\n\nconst srcStyle = {\n    border: \"1px solid\",\n    margin: \"auto\",\n    padding: 8,\n};\n\nconst TolkienCalendarsWithInstructions = (\n    props: TolkienCalendarsExampleProps\n) => (\n    <>\n        <StyledTolkienCalendars {...props} />\n        <br />\n        <br />\n        The following example shows how a default Shire Calendar, with the\n        default styles, may be added to an HTML page. Note that React, ReactDOM,\n        and this library's modules are linked from{\" \"}\n        <a href=\"https://www.jsdelivr.com/\">jsDelivr</a>.\n        <pre style={srcStyle}>\n            <code>\n                {`\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n\n        <title>Shire Reckoning</title>\n\n        <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/react@18/umd/react.production.min.js\"></script>\n        <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.production.min.js\"></script>\n\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/shire-reckoning/lib/TolkienCalendars.css\"/>\n        <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/shire-reckoning/lib/TolkienCalendars.js\"></script>\n    </head>\n    <body>\n        <div id=\"shire-calendar\"></div>\n        <script type=\"text/javascript\">\n            const root ReactDOM.createRoot(\n                document.getElementById(\"shire-calendar\")\n            );\n            root.render(\n                React.createElement(TolkienCalendars.ShireCalendar, {\n                    className: \"shire-calendar\",\n                    caption: true,\n                })\n            );\n        </script>\n    </body>\n</html>\n                `}\n            </code>\n        </pre>\n        Most of the remaining examples also include a <code>source</code>{\" \"}\n        subfolder. So if there is a view in one of these examples you prefer,\n        look under its <code>source/javascript</code> subfolder for the view you\n        would like to use in your HTML page. Then click that view and a{\" \"}\n        <code>React.createElement</code> code block will display below the\n        preview, which can be used on your page in place of the{\" \"}\n        <code>React.createElement</code> block above.\n        <br />\n        <br />\n        <Badges />\n        <br />\n        To use this library as an ES6 module, for example in an app created by{\" \"}\n        <a href=\"https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application\">\n            create-react-app\n        </a>\n        , first install this library as a dependency by adding{\" \"}\n        <code>shire-reckoning</code> to your app's{\" \"}\n        <a href=\"https://docs.npmjs.com/files/package.json#dependencies\">\n            package.json\n        </a>\n        , then run <code>npm install</code>. Then update the default{\" \"}\n        <code>App.js</code> file with the following code, which will render the\n        default Shire, Rivendell, and Gondor Calendars with the included styles.\n        <pre style={srcStyle}>\n            <code>\n                {`\nimport React from \"react\";\n\nimport { ShireCalendar, RivendellCalendar, GondorCalendar } from \"shire-reckoning\";\nimport \"shire-reckoning/lib/TolkienCalendars.css\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ShireCalendar className=\"shire-calendar\" caption={true} />\n            <RivendellCalendar className=\"shire-calendar\" caption={true} />\n            <GondorCalendar className=\"shire-calendar\" caption={true} />\n        </div>\n    );\n}\n\nexport default App;\n                `}\n            </code>\n        </pre>\n    </>\n);\n\nconst meta = {\n    title: \"Shire Reckoning / All Tolkien Calendars\",\n\n    parameters: {\n        options: { showPanel: false },\n    },\n\n    component: TolkienCalendarsWithInstructions,\n    excludeStories: [\"StyledTolkienCalendars\", \"TolkienCalendarsExample\"],\n} satisfies Meta<typeof TolkienCalendarsWithInstructions>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const WithSynchronizationSettings: Story = {\n    name: \"with Synchronization settings\",\n};\n\nexport { TolkienCalendarsExample };\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { MenuItem } from \"@mui/material\";\n\nimport { LanguageEnum } from \"../../ui/controls/LanguagePicker\";\nimport { OutlinedSelect } from \"../Common\";\nimport { scriptFontFamily } from \"../theme\";\n\ninterface LanguagePickerProps {\n    language: LanguageEnum;\n    onLanguageChange: React.ChangeEventHandler<HTMLSelectElement>;\n}\n\nconst LanguagePicker = ({\n    language,\n    onLanguageChange,\n}: LanguagePickerProps) => {\n    return (\n        <OutlinedSelect\n            className=\"language-select\"\n            label=\"Language\"\n            style={{ width: \"8rem\", margin: \"0.25rem 0\" }}\n            SelectProps={{\n                SelectDisplayProps: {\n                    style: {\n                        fontSize: \"1rem\",\n                        fontFamily: scriptFontFamily,\n                    },\n                },\n            }}\n            value={language}\n            onChange={onLanguageChange}\n        >\n            <MenuItem value={LanguageEnum.ENGLISH}>English</MenuItem>\n            <MenuItem value={LanguageEnum.QUENYA}>Quenya</MenuItem>\n            <MenuItem value={LanguageEnum.SINDARIN}>Sindarin</MenuItem>\n        </OutlinedSelect>\n    );\n};\n\nexport default LanguagePicker;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { MenuItem } from \"@mui/material\";\n\nimport { MonthLayoutEnum } from \"../../ui/controls/MonthViewLayout\";\nimport { OutlinedSelect } from \"../Common\";\n\nimport \"../../ui/tolkien-calendars.css\";\n\ninterface MonthViewLayoutProps {\n    layout: MonthLayoutEnum;\n    onMonthViewLayoutChange: React.ChangeEventHandler<HTMLSelectElement>;\n}\n\nconst MonthViewLayout = ({\n    layout,\n    onMonthViewLayoutChange,\n}: MonthViewLayoutProps) => {\n    return (\n        <OutlinedSelect\n            className=\"month-layout-select\"\n            label=\"Month View\"\n            style={{\n                width: \"8rem\",\n                margin: \"0.25rem 0\",\n            }}\n            SelectProps={{\n                SelectDisplayProps: {\n                    style: {\n                        fontSize: \"0.75rem\",\n                        fontWeight: \"normal\",\n                    },\n                },\n            }}\n            value={layout}\n            onChange={onMonthViewLayoutChange}\n        >\n            <MenuItem value={MonthLayoutEnum.VERTICAL}>Vertical</MenuItem>\n            <MenuItem value={MonthLayoutEnum.HORIZONTAL}>Horizontal</MenuItem>\n        </OutlinedSelect>\n    );\n};\n\nexport default MonthViewLayout;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { Button, IconButton, MenuItem } from \"@mui/material\";\nimport {\n    ArrowBack as ArrowBackIcon,\n    ArrowForward as ArrowForwardIcon,\n} from \"@mui/icons-material\";\n\nimport { OutlinedSelect } from \"../Common\";\nimport \"../../ui/tolkien-calendars.css\";\nimport { scriptFontFamily } from \"../theme\";\n\nexport interface MonthViewDisplayItem {\n    emoji: string;\n    name: string;\n}\n\ninterface MonthViewPickerProps {\n    months: MonthViewDisplayItem[];\n    firstDay: Date;\n    lastDay: Date;\n    thisMonth: number;\n    today: Date;\n    viewDate: Date;\n    monthView: number;\n    yearView: boolean;\n    onMonthViewChange: (\n        viewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => void;\n    monthLabel?: string;\n}\n\nconst MonthViewPicker = (props: MonthViewPickerProps) => {\n    const onMonthViewChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const month = parseInt(event.target.value, 10);\n\n        const viewDate = props.viewDate;\n        const yearView = month < 0;\n        const monthView = yearView ? props.monthView : month;\n\n        props.onMonthViewChange(viewDate, monthView, yearView);\n    };\n\n    const onViewThisYear = () => {\n        const viewDate = props.today;\n        const month = props.thisMonth;\n        const yearView = true;\n\n        props.onMonthViewChange(viewDate, month, yearView);\n    };\n\n    const onViewThisMonth = () => {\n        const viewDate = props.today;\n        const month = props.thisMonth;\n        const yearView = false;\n\n        props.onMonthViewChange(viewDate, month, yearView);\n    };\n\n    const prevMonthView = () => {\n        let viewDate = props.viewDate;\n        let month = props.monthView;\n        const yearView = props.yearView;\n\n        if (!yearView) {\n            month--;\n        }\n\n        if (yearView || month < 0) {\n            month = yearView ? month : props.months.length - 1;\n\n            // View the calendar for the previous year\n            viewDate = new Date(props.firstDay);\n            // add a buffer to the view date so the month doesn't change when startDate changes\n            viewDate.setDate(viewDate.getDate() - 15);\n        }\n\n        props.onMonthViewChange(viewDate, month, yearView);\n    };\n\n    const nextMonthView = () => {\n        let viewDate = props.viewDate;\n        let month = props.monthView;\n        const yearView = props.yearView;\n\n        if (!yearView) {\n            month++;\n        }\n\n        if (yearView || month >= props.months.length) {\n            month = yearView ? month : 0;\n\n            // View the calendar for the next year\n            viewDate = new Date(props.lastDay);\n            // add a buffer to the view date so the month doesn't change when startDate changes\n            viewDate.setDate(viewDate.getDate() + 15);\n        }\n\n        props.onMonthViewChange(viewDate, month, yearView);\n    };\n\n    const monthLabel = props.monthLabel || \"Month\";\n    const monthView = props.yearView ? -1 : props.monthView;\n\n    const monthViewSelectOptions = props.months.map((month, i) => (\n        <MenuItem key={i} value={i}>\n            {month.emoji} {month.name}\n        </MenuItem>\n    ));\n\n    return (\n        <table className=\"month-picker\">\n            <tbody>\n                <tr>\n                    <td />\n                    <td>\n                        <Button\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            className=\"this-year-button\"\n                            style={{ fontSize: \"0.75rem\" }}\n                            fullWidth={true}\n                            onClick={onViewThisYear}\n                        >\n                            <span className=\"this-year-button-txt\">\n                                This Year\n                            </span>\n                        </Button>\n                    </td>\n                    <td />\n                </tr>\n                <tr>\n                    <td style={{ textAlign: \"right\" }}>\n                        <IconButton\n                            color=\"secondary\"\n                            className=\"prev-month-button\"\n                            onClick={prevMonthView}\n                        >\n                            <ArrowBackIcon className=\"prev-month-button-txt\" />\n                        </IconButton>\n                    </td>\n                    <td>\n                        <OutlinedSelect\n                            className=\"month-view-select\"\n                            style={{ width: \"10.75rem\" }}\n                            SelectProps={{\n                                SelectDisplayProps: {\n                                    style: {\n                                        fontWeight: \"normal\",\n                                        fontFamily: scriptFontFamily,\n                                    },\n                                },\n                            }}\n                            value={monthView}\n                            onChange={onMonthViewChange}\n                        >\n                            <MenuItem value={-1}>Year Calendar</MenuItem>\n                            {monthViewSelectOptions}\n                        </OutlinedSelect>\n                    </td>\n                    <td style={{ textAlign: \"left\" }}>\n                        <IconButton\n                            color=\"secondary\"\n                            className=\"next-month-button\"\n                            onClick={nextMonthView}\n                        >\n                            <ArrowForwardIcon className=\"next-month-button-txt\" />\n                        </IconButton>\n                    </td>\n                </tr>\n                <tr>\n                    <td />\n                    <td>\n                        <Button\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            className=\"this-month-button\"\n                            style={{ fontSize: \"0.75rem\" }}\n                            fullWidth={true}\n                            onClick={onViewThisMonth}\n                        >\n                            <span className=\"this-month-button-txt\">\n                                {\"This \" + monthLabel}\n                            </span>\n                        </Button>\n                    </td>\n                    <td />\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default MonthViewPicker;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { MenuItem } from \"@mui/material\";\n\nimport { ShireRegionEnum } from \"../../ShireReckoning\";\n\nimport { OutlinedSelect } from \"../Common\";\n\ninterface ShireRegionPickerProps {\n    label?: string;\n    region: string;\n    onRegionChange: React.ChangeEventHandler<HTMLSelectElement>;\n}\n\nconst ShireRegionPicker = (props: ShireRegionPickerProps) => (\n    <OutlinedSelect\n        className=\"shire-region-select\"\n        label={props.label}\n        style={{ width: \"9.75rem\", margin: \"0.25rem 0\" }}\n        SelectProps={{ SelectDisplayProps: { style: { fontSize: \"0.75rem\" } } }}\n        value={props.region}\n        onChange={props.onRegionChange}\n    >\n        <MenuItem value={ShireRegionEnum.TOLKIEN}>Tolkien Names</MenuItem>\n        <MenuItem value={ShireRegionEnum.SHIRE}>Shire Names</MenuItem>\n        <MenuItem value={ShireRegionEnum.BREE}>Bree Names</MenuItem>\n    </OutlinedSelect>\n);\n\nexport default ShireRegionPicker;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { MenuItem } from \"@mui/material\";\n\nimport { datesMatch, fullYearDate } from \"../../Utils\";\nimport { OutlinedSelect } from \"../Common\";\n\ninterface StartDatePickerItem {\n    label: string;\n    date: Date;\n}\n\ninterface StartDatePickerProps {\n    onCalendarStartChange: (startDate: Date) => void;\n    selectedDate: Date;\n}\n\nconst StartDatePicker = (\n    props: StartDatePickerProps & { startDates: StartDatePickerItem[] }\n) => {\n    const onDateChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const changedDate = event.target.value;\n        props.onCalendarStartChange(new Date(changedDate));\n    };\n\n    const selectedDate = props.startDates.find((startDate) =>\n        datesMatch(startDate.date, props.selectedDate)\n    );\n\n    const opts = props.startDates.map((startDate) => (\n        <MenuItem key={startDate.label} value={startDate.date.toISOString()}>\n            {startDate.label}\n        </MenuItem>\n    ));\n\n    return (\n        <OutlinedSelect\n            className=\"first-day-select\"\n            label=\"Start reckoning from\"\n            style={{ width: \"9.75rem\", marginTop: \"0.25rem\" }}\n            SelectProps={{\n                SelectDisplayProps: { style: { fontSize: \"0.75rem\" } },\n            }}\n            value={selectedDate && selectedDate.date.toISOString()}\n            onChange={onDateChanged}\n        >\n            {opts}\n        </OutlinedSelect>\n    );\n};\n\nconst getStartDates = (\n    monthLabel: string,\n    year: number,\n    month: number,\n    startRange: number,\n    endRange: number\n) => {\n    const startDates = [];\n    for (let day = startRange; day <= endRange; day++) {\n        const date = fullYearDate(year, month, day);\n\n        // avoid TZ or DST issues in onDateChanged handler\n        date.setHours(12, 0, 0);\n\n        startDates.push({ label: `${monthLabel} ${day}`, date });\n    }\n\n    return startDates;\n};\n\nconst ShireStartDatePicker = (props: StartDatePickerProps) => {\n    const { onCalendarStartChange, selectedDate } = props;\n    const startDates = [\n        ...getStartDates(\"December\", 0, 11, 18, 25),\n        ...getStartDates(\"June\", 0, 5, 18, 26),\n    ];\n\n    return (\n        <StartDatePicker\n            selectedDate={selectedDate}\n            startDates={startDates}\n            onCalendarStartChange={onCalendarStartChange}\n        />\n    );\n};\n\nconst ICalendarStartDatePicker = (props: StartDatePickerProps) => {\n    const { onCalendarStartChange, selectedDate } = props;\n    const startDates = getStartDates(\"December\", 0, 11, 18, 25);\n\n    return (\n        <StartDatePicker\n            selectedDate={selectedDate}\n            startDates={startDates}\n            onCalendarStartChange={onCalendarStartChange}\n        />\n    );\n};\n\nconst RivendellStartDatePicker = (props: StartDatePickerProps) => {\n    const { onCalendarStartChange, selectedDate } = props;\n    const startDates = [\n        ...getStartDates(\"March\", 1, 2, 17, 29),\n        ...getStartDates(\"September\", 0, 8, 17, 29),\n    ];\n\n    return (\n        <StartDatePicker\n            selectedDate={selectedDate}\n            startDates={startDates}\n            onCalendarStartChange={onCalendarStartChange}\n        />\n    );\n};\n\nexport {\n    ShireStartDatePicker,\n    RivendellStartDatePicker,\n    ICalendarStartDatePicker,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport { makeShireCalendarDates } from \"../../ShireReckoning\";\nimport { GondorLeapYearRuleEnum } from \"../../GondorReckoning\";\nimport { getRivendellNewYearDate } from \"../../RivendellReckoning\";\nimport {\n    GONDOR_DAYS_PER_1000_YEARS,\n    toDaysElapsed,\n    daysElapsedToSecondAgeYear,\n    datesMatch,\n    fullYearDate,\n} from \"../../Utils\";\n\n/**\n * The Middle-earth New Year Dates, relative to the Second Age.\n */\ninterface StartDates {\n    // The Gregorian Date of the first Rivendell New Year Date.\n    rivendell: Date;\n    // The Gregorian Date of the first Númenor New Year Date, relative to the Second Age.\n    gondor: Date;\n    // The Gregorian Date of the first Shire New Year Date, relative to the Second Age.\n    shire: Date;\n}\n\ninterface SecondAgeSyncScheme {\n    // Display label for this synchronization scheme.\n    label: string;\n    startDates: StartDates;\n}\n\n/**\n * Calendar simulation synchronization schemes.\n * @constant\n */\nconst SyncAges: SecondAgeSyncScheme[] = [\n    {\n        label: \"Gregorian years with Second Age years\",\n        startDates: {\n            rivendell: fullYearDate(-589, 2, 23),\n            gondor: fullYearDate(0, 11, 23),\n            shire: fullYearDate(0, 11, 23),\n        },\n    },\n    {\n        label: \"2025-26 Southern Hemisphere moon phases with Third Age 3018-19\",\n        startDates: {\n            rivendell: fullYearDate(-5023, 8, 22),\n            gondor: fullYearDate(-4433, 5, 26),\n            shire: fullYearDate(-4433, 5, 26),\n        },\n    },\n    {\n        label: \"2020-21 Moon phases with Third Age 3018-19\",\n        startDates: {\n            rivendell: fullYearDate(-5028, 2, 23),\n            gondor: fullYearDate(-4439, 11, 25),\n            shire: fullYearDate(-4439, 11, 25),\n        },\n    },\n    {\n        label: \"2017-18 Moon phases with Third Age 3018-19\",\n        startDates: {\n            rivendell: fullYearDate(-5031, 2, 26),\n            gondor: fullYearDate(-4442, 11, 28),\n            shire: fullYearDate(-4442, 11, 28),\n        },\n    },\n    {\n        label: \"1941-42 Moon phases with Third Age 3018-19\",\n        startDates: {\n            rivendell: fullYearDate(-5107, 2, 26),\n            gondor: fullYearDate(-4518, 11, 28),\n            shire: fullYearDate(-4518, 11, 28),\n        },\n    },\n    {\n        label: \"Gregorian years with Years of the Sun\",\n        startDates: {\n            rivendell: fullYearDate(-10799, 2, 21),\n            gondor: fullYearDate(-10210, 11, 22),\n            shire: fullYearDate(-10210, 11, 22),\n        },\n    },\n    {\n        label: \"Fourth Age with Venerable Bede's Reckoning\",\n        startDates: {\n            rivendell: fullYearDate(-11002, 2, 21),\n            gondor: fullYearDate(-10413, 11, 23),\n            shire: fullYearDate(-10413, 11, 23),\n        },\n    },\n    {\n        label: `Fourth Age with James \"the Just\" Strom's Reckoning`,\n        startDates: {\n            rivendell: fullYearDate(-11056, 2, 22),\n            gondor: fullYearDate(-10467, 11, 24),\n            shire: fullYearDate(-10467, 11, 24),\n        },\n    },\n    {\n        label: \"Shire Reckoning with Joe Bartram's Reckoning\",\n        startDates: {\n            rivendell: fullYearDate(-11692, 2, 28),\n            gondor: fullYearDate(-11103, 11, 28),\n            shire: fullYearDate(-11103, 11, 28),\n        },\n    },\n    {\n        label: \"Fourth Age with my NoME-adjusted Stellarium Reckoning\",\n        startDates: {\n            rivendell: fullYearDate(-14244, 2, 23),\n            gondor: fullYearDate(-13655, 11, 25),\n            shire: fullYearDate(-13655, 11, 25),\n        },\n    },\n];\n\ninterface DateOfInterest {\n    // Display label for this Middle-earth event.\n    label: string;\n    // Middle-earth display date for this event.\n    displayDate: string;\n    // True if this event should display in the simulation for the entire S.R. year.\n    allYear: boolean;\n    // Second Age year of this event.\n    year: number;\n    // S.R. month of this event.\n    month?: number;\n    // S.R. day of this event.\n    day?: string | number;\n}\n\n/**\n * Calendar simulation Dates of Interest list of Fourth Age events.\n * @constant\n */\nconst DatesOfInterestFourthAge: DateOfInterest[] = [\n    {\n        year: 1592 + 1600 + 3441,\n        allYear: true,\n        displayDate: \"S.R. 1592\",\n        label: \"Red Book of Westmarch copied in Gondor.\",\n    },\n    {\n        year: 1542 + 1600 + 3441,\n        allYear: true,\n        month: 2,\n        day: 24,\n        displayDate: \"S.R. 1542 Coirë\",\n        label: \"Arwen Undómiel laid herself to rest upon Cerin Amroth.\",\n    },\n    {\n        year: 1541 + 1600 + 3441,\n        allYear: false,\n        month: 2,\n        day: 1,\n        displayDate: \"S.R. 1541 Rethe 1\",\n        label: \"Passing of King Elessar.\",\n    },\n    {\n        year: 1484 + 1600 + 3441,\n        allYear: true,\n        month: 8,\n        day: 22,\n        displayDate: \"S.R. 1484 Autumn\",\n        label: \"Passing of King Éomer.\",\n    },\n    {\n        year: 1482 + 1600 + 3441,\n        allYear: false,\n        month: 8,\n        day: 22,\n        displayDate: \"S.R. 1482 Halimath 22\",\n        label: \"Samwise departs Bag End, then leaves Middle-earth, last of the Ring-bearers.\",\n    },\n];\n\n/**\n * Calendar simulation Dates of Interest list of events that took place during the main story of The Lord of the Rings.\n * @constant\n */\nconst DatesOfInterestThirdAgeLotR: DateOfInterest[] = [\n    {\n        year: 3021 + 3441,\n        allYear: false,\n        month: 8,\n        day: 29,\n        displayDate: \"III 3021 Halimath 29\",\n        label: \"Frodo and Bilbo depart over Sea with the Three Keepers. End of Third Age.\",\n    },\n    {\n        year: 3020 + 3441,\n        allYear: false,\n        month: 8,\n        day: 22,\n        displayDate: \"III 3020 Halimath 22\",\n        label: \"Bilbo's 130th birthday.\",\n    },\n    {\n        year: 3020 + 3441,\n        allYear: false,\n        month: 3,\n        day: 6,\n        displayDate: \"III 3020 Astron 6\",\n        label: \"The mallorn tree planted by Samwise first flowers in the Party Field.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 10,\n        day: 3,\n        displayDate: \"III 3019 Blotmath 3\",\n        label: \"Battle of Bywater. Passing of Saruman. End of the War of the Ring.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 7,\n        day: 10,\n        displayDate: \"III 3019 Wedmath 10\",\n        label: \"Funeral of King Théoden.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 5,\n        day: \"Midyear's Day\",\n        displayDate: \"III 3019 Mid-year's Day\",\n        label: \"Wedding of Elessar and Arwen.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 4,\n        day: 1,\n        displayDate: \"III 3019 Thrimidge 1\",\n        label: \"Crowning of King Elessar.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 3,\n        day: 8,\n        displayDate: \"III 3019 Astron 8\",\n        label: \"The Ring-bearers are honoured on the Field of Cormallen.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 3,\n        day: 6,\n        displayDate: \"III 3019 Astron 6\",\n        label: \"Elves' New Year's Day. Meeting of Celeborn and Thranduil in Mirkwood.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 25,\n        displayDate: \"III 3019 Rethe 25\",\n        label: \"Destruction of the One Ring. Passing of Sauron.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 17,\n        displayDate: \"III 3019 Rethe 17\",\n        label: \"Battle of Dale.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 15,\n        displayDate: \"III 3019 Rethe 15\",\n        label: \"Battle of the Pelennor.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 13,\n        displayDate: \"III 3019 Rethe 13\",\n        label: \"Frodo is poisoned by Shelob. Aragorn captures the fleet at Pelargir.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 10,\n        displayDate: \"III 3019 Rethe 10\",\n        label: \"The Dawnless Day. The Muster of Rohan.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 8,\n        displayDate: \"III 3019 Rethe 8\",\n        label: \"Aragorn takes the 'Paths of the Dead'.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 7,\n        displayDate: \"III 3019 Rethe 7\",\n        label: \"Faramir takes Frodo and Sam to Henneth Annûn.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 5,\n        displayDate: \"III 3019 Rethe 5\",\n        label: \"Parley with Saruman in Orthanc. Frodo hides in sight of the Morannon.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 3,\n        displayDate: \"III 3019 Rethe 3\",\n        label: \"Théoden retreats to Helm's Deep. Battle of the Hornburg.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 2,\n        displayDate: \"III 3019 Rethe 2\",\n        label: \"Gandalf comes to Edoras and heals Théoden. The Ents march on Isengard.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 2,\n        day: 1,\n        displayDate: \"III 3019 Rethe 1\",\n        label: \"Frodo begins passage of Dead Marshes. Aragorn meets Gandalf the White.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 1,\n        day: 30,\n        displayDate: \"III 3019 Solmath 30\",\n        label: \"Entmoot begins. Éomer meets Aragorn.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 1,\n        day: 29,\n        displayDate: \"III 3019 Solmath 29\",\n        label: \"Merry and Pippin meet Treebeard.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 1,\n        day: 26,\n        displayDate: \"III 3019 Solmath 26\",\n        label: \"Breaking of the Fellowship of the Ring. Death of Boromir.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 1,\n        day: 25,\n        displayDate: \"III 3019 Solmath 25\",\n        label: \"First Battle of the Fords of Isen; Théodred son of Théoden is slain.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 1,\n        day: 16,\n        displayDate: \"III 3019 Solmath 16\",\n        label: \"Farewell to Lórien.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 1,\n        day: 15,\n        displayDate: \"III 3019 Solmath 15\",\n        label: \"Frodo is shown The Mirror of Galadriel.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 0,\n        day: 25,\n        displayDate: \"III 3019 Afteryule 25\",\n        label: \"Gandalf casts down the Balrog.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 0,\n        day: 17,\n        displayDate: \"III 3019 Afteryule 17\",\n        label: \"The Fellowship of the Ring comes to Caras Galadhon.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 0,\n        day: 15,\n        displayDate: \"III 3019 Afteryule 15\",\n        label: \"The Bridge of Khazad-Dûm, and fall of Gandalf.\",\n    },\n    {\n        year: 3019 + 3441,\n        allYear: false,\n        month: 0,\n        day: 13,\n        displayDate: \"III 3019 Afteryule 13\",\n        label: \"The Fellowship reach the West-gate of Moria at nightfall.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 11,\n        day: 25,\n        displayDate: \"III 3018 Foreyule 25\",\n        label: \"The Fellowship of the Ring leaves Rivendell.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 9,\n        day: 25,\n        displayDate: \"III 3018 Winterfilth 25\",\n        label: \"Council of Elrond.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 9,\n        day: 6,\n        displayDate: \"III 3018 Winterfilth 6\",\n        label: \"The camp under Weathertop attacked. Frodo wounded by the Witch-king.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 8,\n        day: 29,\n        displayDate: \"III 3018 Halimath 29\",\n        label: \"The hobbits stay at the Prancing Pony.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 8,\n        day: 28,\n        displayDate: \"III 3018 Halimath 28\",\n        label: \"The hobbits are captured by a Barrow-wight.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 8,\n        day: 26,\n        displayDate: \"III 3018 Halimath 26\",\n        label: \"The Old Forest. Frodo comes to Tom Bombadil.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 8,\n        day: 23,\n        displayDate: \"III 3018 Halimath 23\",\n        label: \"Frodo leaves Bag End. A Black Rider comes to Hobbiton at nightfall.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 8,\n        day: 18,\n        displayDate: \"III 3018 Halimath 18\",\n        label: \"Gandalf is rescued by Gwaihir from the top of Orthanc.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 6,\n        day: 10,\n        displayDate: \"III 3018 Afterlithe 10\",\n        label: \"Gandalf imprisoned in Orthanc by Saruman.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 5,\n        day: \"Midyear's Day\",\n        displayDate: \"III 3018 Mid-year's Day\",\n        label: \"Gandalf meets Radagast.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 5,\n        day: 20,\n        displayDate: \"III 3018 Forelithe 20\",\n        label: \"Sauron attacks Osgiliath. Start of the War of the Ring.\",\n    },\n    {\n        year: 3018 + 3441,\n        allYear: false,\n        month: 3,\n        day: 12,\n        displayDate: \"III 3018 Astron 12\",\n        label: \"Gandalf reaches Hobbiton.\",\n    },\n    {\n        year: 3001 + 3441,\n        allYear: false,\n        month: 8,\n        day: 22,\n        displayDate: \"III 3001 Halimath 22\",\n        label: \"Bilbo's 111th birthday.\",\n    },\n];\n\n/**\n * Calendar simulation Dates of Interest list of Third Age events.\n * @constant\n */\nconst DatesOfInterestThirdAge: DateOfInterest[] = [\n    {\n        year: 2995 + 3441,\n        allYear: true,\n        displayDate: \"III 2995\",\n        label: \"Éowyn sister of Éomer born.\",\n    },\n    {\n        year: 2994 + 3441,\n        allYear: false,\n        month: 10,\n        day: 10,\n        displayDate: \"III 2994 Blotmath 10\",\n        label: \"Balin, Lord of Moria, is killed. Dwarf-colony destroyed soon after.\",\n    },\n    {\n        year: 2991 + 3441,\n        allYear: true,\n        displayDate: \"III 2991\",\n        label: \"Éomer Éomund's son born in Rohan.\",\n    },\n    {\n        year: 2990 + 3441,\n        allYear: true,\n        displayDate: \"III 2990\",\n        label: \"Peregrin Took born.\",\n    },\n    {\n        year: 2984 + 3441,\n        allYear: true,\n        displayDate: \"III 2984\",\n        label: \"Denethor II becomes Steward of Gondor.\",\n    },\n    {\n        year: 2983 + 3441,\n        allYear: true,\n        displayDate: \"III 2983\",\n        label: \"Faramir son of Denethor born.\",\n    },\n    {\n        year: 2982 + 3441,\n        allYear: true,\n        displayDate: \"III 2982\",\n        label: \"Meriadoc Brandybuck born.\",\n    },\n    {\n        year: 2980 + 3441,\n        allYear: false,\n        month: 3,\n        day: 6,\n        displayDate: \"III 2980 Astron 6\",\n        label: \"Samwise Gamgee born.\",\n    },\n    {\n        year: 2978 + 3441,\n        allYear: true,\n        displayDate: \"III 2978\",\n        label: \"Boromir son of Denethor born.\",\n    },\n    {\n        year: 2968 + 3441,\n        allYear: false,\n        month: 8,\n        day: 22,\n        displayDate: \"III 2968 Halimath 22\",\n        label: \"Frodo Baggins born.\",\n    },\n    {\n        year: 2956 + 3441,\n        allYear: true,\n        displayDate: \"III 2956\",\n        label: \"Aragorn meets Gandalf.\",\n    },\n    {\n        year: 2954 + 3441,\n        allYear: true,\n        displayDate: \"III 2954\",\n        label: \"Mount Doom (Orodruin) bursts into flame again.\",\n    },\n    {\n        year: 2953 + 3441,\n        allYear: true,\n        displayDate: \"III 2953\",\n        label: \"Last meeting of the White Council.\",\n    },\n    {\n        year: 2951 + 3441,\n        allYear: false,\n        month: 2,\n        day: 2,\n        displayDate: \"III 2951 Rethe 2\",\n        label: \"Aragorn meets Arwen Undómiel. Sauron reveals himself in Mordor in this year.\",\n    },\n    {\n        year: 2948 + 3441,\n        allYear: true,\n        displayDate: \"III 2948\",\n        label: \"Théoden son of Thengel, King of Rohan, born.\",\n    },\n    {\n        year: 2941 + 3441,\n        allYear: true,\n        month: 8,\n        day: 22,\n        displayDate: \"III 2941\",\n        label: \"The year Bilbo finds the One Ring, Bard slays Smaug, and of The Battle of Five Armies.\",\n    },\n    {\n        year: 2931 + 3441,\n        allYear: false,\n        month: 2,\n        day: 1,\n        displayDate: \"III 2931 Rethe 1\",\n        label: \"Aragorn son of Arathorn II born.\",\n    },\n    {\n        year: 2930 + 3441,\n        allYear: true,\n        displayDate: \"III 2930\",\n        label: \"Denethor II born.\",\n    },\n    {\n        year: 2920 + 3441,\n        allYear: true,\n        displayDate: \"III 2920\",\n        label: \"Death of the Old Took (Bilbo's maternal grandfather).\",\n    },\n    {\n        year: 2890 + 3441,\n        allYear: false,\n        month: 8,\n        day: 22,\n        displayDate: \"III 2890 Halimath 22\",\n        label: \"Bilbo Baggins born.\",\n    },\n    {\n        year: 2879 + 3441,\n        allYear: true,\n        displayDate: \"III 2879\",\n        label: \"Gimli Glóin's son born.\",\n    },\n    {\n        year: 2799 + 3441,\n        allYear: true,\n        displayDate: \"III 2799\",\n        label: \"The Battle of Azanulbizar is fought and Azog is killed.\",\n    },\n    {\n        year: 2790 + 3441,\n        allYear: true,\n        displayDate: \"III 2790\",\n        label: \"Thrór slain by Azog in Moria. Gerontius born, later known as the Old Took.\",\n    },\n    {\n        year: 2770 + 3441,\n        allYear: true,\n        displayDate: \"III 2770\",\n        label: \"Smaug the Dragon descends on Erebor. Dale destroyed.\",\n    },\n    {\n        year: 2758 + 3441,\n        allYear: true,\n        month: 10,\n        day: 1,\n        displayDate: \"III 2758\",\n        label: \"The Long Winter.\",\n    },\n    {\n        year: 2747 + 3441,\n        allYear: true,\n        displayDate: \"III 2747\",\n        label: \"The Battle of the Greenfields. Bandobras 'the Bullroarer' Took invents golf.\",\n    },\n    {\n        year: 2746 + 3441,\n        allYear: true,\n        displayDate: \"III 2746\",\n        label: \"Thorin Oakenshield born.\",\n    },\n    {\n        year: 2703 + 3441,\n        allYear: true,\n        month: 5,\n        day: \"Midyear's Day\",\n        displayDate: \"III c.2703\",\n        label: \"Shire-reform enacted during the time of Isengrim II.\",\n    },\n    {\n        year: 2683 + 3441,\n        allYear: true,\n        displayDate: \"III 2683\",\n        label: \"Isengrim II becomes 10th Thain of the Took-line, begins excavation of the Great Smials.\",\n    },\n    {\n        year: 2670 + 3441,\n        allYear: true,\n        displayDate: \"III c.2670\",\n        label: \"Tobold Hornblower plants 'pipe-weed' in the Southfarthing.\",\n    },\n    {\n        year: 2570 + 3441,\n        allYear: true,\n        displayDate: \"III 2570\",\n        label: \"Baldor son of Brego lost beyond Forbidden Door of the 'Paths of the Dead'.\",\n    },\n    {\n        year: 2569 + 3441,\n        allYear: true,\n        displayDate: \"III 2569\",\n        label: \"Brego son of Eorl completes the Golden Hall.\",\n    },\n    {\n        year: 2510 + 3441,\n        allYear: false,\n        month: 7,\n        day: 15,\n        displayDate: \"III 2510 Urimë\",\n        label: \"Cirion the Steward gifts Calenardhon (Rohan) to Eorl and the Rohirrim.\",\n    },\n    {\n        year: 2510 + 3441,\n        allYear: false,\n        month: 3,\n        day: 16,\n        displayDate: \"III 2510 Víressë 15\",\n        label: \"Battle of the Field of Celebrant.\",\n    },\n    {\n        year: 2463 + 3441,\n        allYear: true,\n        displayDate: \"III 2463\",\n        label: \"Sméagol murders Déagol for the One Ring. White Council formed.\",\n    },\n    {\n        year: 2460 + 3441,\n        allYear: true,\n        displayDate: \"III 2460\",\n        label: \"Sauron returns to Dol Guldur. The Watchful Peace ends.\",\n    },\n    {\n        year: 2360 + 3441,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"III 2360\",\n        label: \"Hador the Steward adds an extra day to the calendars of the west-lands.\",\n    },\n    {\n        year: 2063 + 3441,\n        allYear: true,\n        displayDate: \"III 2063\",\n        label: \"The Watchful Peace begins.\",\n    },\n    {\n        year: 2060 + 3441,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"III 2060\",\n        label: \"First year of Stewards' Reckoning in Gondor.\",\n    },\n    {\n        year: 2059 + 3441,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"III 2059\",\n        label: \"Last year of Kings' Reckoning in Gondor.\",\n    },\n    {\n        year: 2050 + 3441,\n        allYear: true,\n        displayDate: \"III 2050\",\n        label: \"Mardil becomes the first Ruling Steward of Gondor.\",\n    },\n    {\n        year: 2002 + 3441,\n        allYear: true,\n        displayDate: \"III 2002\",\n        label: \"Fall of Minas Ithil, afterwards known as Minas Morgul.\",\n    },\n    {\n        year: 2000 + 3441,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"III 2000\",\n        label: \"Millennial Leap-year in Gondor (and the Shire?). Nazgûl besiege Minas Ithil.\",\n    },\n    {\n        year: 1999 + 3441,\n        allYear: true,\n        displayDate: \"III 1999\",\n        label: \"Erebor founded by Thráin I and the Arkenstone is discovered.\",\n    },\n    {\n        year: 1980 + 3441,\n        allYear: true,\n        displayDate: \"III 1980\",\n        label: \"A Balrog appears in Moria, and slays Durin VI.\",\n    },\n    {\n        year: 1975 + 3441,\n        allYear: true,\n        displayDate: \"III 1975\",\n        label: \"Last-king Arvedui drowned in Bay of Forochel. Witch-king defeated at Battle of Fornost.\",\n    },\n    {\n        year: 1636 + 3441,\n        allYear: true,\n        displayDate: \"III 1636\",\n        label: \"Year of the Great Plague (or Dark Plague), which reached the Shire in 1637.\",\n    },\n    {\n        year: 1601 + 3441,\n        allYear: true,\n        displayDate: \"III 1601\",\n        label: \"Shire colonized by Marcho and Blanco.\",\n    },\n    {\n        year: 1409 + 3441,\n        allYear: true,\n        displayDate: \"III 1409\",\n        label: \"The Witch-king of Angmar invades Arnor. King Arvaleg I slain. Tower of Amon Sûl destroyed.\",\n    },\n    {\n        year: 1300 + 3441,\n        allYear: true,\n        displayDate: \"III c.1300\",\n        label: \"Nazgûl reappear in Middle-earth and the realm of Angmar is founded by the Witch-King.\",\n    },\n    {\n        year: 1000 + 3441,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"III 1000\",\n        label: \"Millennial Leap-year in Gondor. The Istari arrive to Middle-earth around this time.\",\n    },\n    {\n        year: 241 + 3441,\n        allYear: true,\n        displayDate: \"III 241\",\n        label: \"Arwen Undómiel born.\",\n    },\n    {\n        year: 109 + 3441,\n        allYear: true,\n        displayDate: \"III 109\",\n        label: \"Elrond weds Celebrían, daughter of Celeborn.\",\n    },\n    {\n        year: 2 + 3441,\n        allYear: false,\n        month: 9,\n        day: 4,\n        displayDate: \"III 2 Narbeleth 4\",\n        label: \"Battle of the Gladden Fields. Death of Isildur. The One Ring is lost in the river.\",\n    },\n];\n\n/**\n * Calendar simulation Dates of Interest list of Second Age events.\n * @constant\n */\nconst DatesOfInterestSecondAge: DateOfInterest[] = [\n    {\n        year: 3441,\n        allYear: true,\n        displayDate: \"II 3441\",\n        label: \"Defeat of Sauron and death of Elendil and Gil-galad. End of Second Age.\",\n    },\n    {\n        year: 3440,\n        allYear: true,\n        displayDate: \"II 3440\",\n        label: \"Anárion slain.\",\n    },\n    {\n        year: 3430,\n        allYear: true,\n        displayDate: \"II 3430\",\n        label: \"The Last Alliance is formed.\",\n    },\n    {\n        year: 3320,\n        allYear: true,\n        displayDate: \"II 3320\",\n        label: \"Elendil and his sons, Isildur and Anárion, found the Realms in Exile: Arnor and Gondor.\",\n    },\n    {\n        year: 3319,\n        allYear: true,\n        displayDate: \"II 3319\",\n        label: \"Downfall of Númenor. World is made round. Elendil and his sons escape.\",\n    },\n    {\n        year: 3000,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"II 3000\",\n        label: \"Millennial Leap-year in Númenor, in the time when its kings took Adûnaic names.\",\n    },\n    {\n        year: 2000,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"II 2000\",\n        label: \"Millennial Leap-year. Sauron has extended his power and the shadow has fallen on Númenor.\",\n    },\n    {\n        year: 1697,\n        allYear: true,\n        displayDate: \"II 1697\",\n        label: \"Eregion destroyed. The gates of Moria are shut. Elrond founds Rivendell.\",\n    },\n    {\n        year: 1693,\n        allYear: true,\n        displayDate: \"II 1693\",\n        label: \"The Three Rings are hidden and the War of the Elves and Sauron begins.\",\n    },\n    {\n        year: 1600,\n        allYear: true,\n        displayDate: \"II c.1600\",\n        label: \"Sauron forges The One Ring and completes Barad-dûr.\",\n    },\n    {\n        year: 1590,\n        allYear: true,\n        displayDate: \"II c.1590\",\n        label: \"The Three Rings are completed in Eregion.\",\n    },\n    {\n        year: 1075,\n        allYear: true,\n        displayDate: \"II 1075\",\n        label: \"Tar-Aldarion yields the Sceptre of Númenor to his daughter, Tar-Ancalimë.\",\n    },\n    {\n        year: 1000,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"II 1000\",\n        label: \"Millennial Leap-year in Númenor. Sauron begins building Barad-dûr around this time.\",\n    },\n    {\n        year: 883,\n        allYear: true,\n        displayDate: \"II 883\",\n        label: \"Tar-Aldarion receives the Sceptre of Númenor from his father, Tar-Meneldur.\",\n    },\n    {\n        year: 870,\n        allYear: true,\n        displayDate: \"II 870\",\n        label: \"Marriage of Aldarion and Erendis.\",\n    },\n    {\n        year: 750,\n        allYear: true,\n        displayDate: \"II 750\",\n        label: \"Eregion founded by the Noldor.\",\n    },\n    {\n        year: 500,\n        allYear: true,\n        displayDate: \"II c.500\",\n        label: \"Sauron arises again in Middle-earth.\",\n    },\n    {\n        year: 442,\n        allYear: true,\n        displayDate: \"II 442\",\n        label: \"Death of Elros Tar-Minyatur.\",\n    },\n    {\n        year: 40,\n        allYear: true,\n        displayDate: \"II c.40\",\n        label: \"Many Dwarves leaving their old cities in Ered Luin migrate to Moria.\",\n    },\n    {\n        year: 32,\n        allYear: true,\n        displayDate: \"II 32\",\n        label: \"Elros is crowned first King of Númenor.\",\n    },\n    {\n        year: 1,\n        allYear: true,\n        displayDate: \"II 1\",\n        label: \"Foundation of the Grey Havens, and of Lindon.\",\n    },\n];\n\n/**\n * Calendar simulation Dates of Interest list of First Age events.\n * @constant\n */\nconst DatesOfInterestFirstAge: DateOfInterest[] = [\n    {\n        year: 0,\n        allYear: true,\n        displayDate: \"Iys 590\",\n        label: \"Morgoth cast through the Door of Night into the Void. First Age ends.\",\n    },\n    {\n        year: -3,\n        allYear: true,\n        displayDate: \"Iys 587\",\n        label: \"Eärendil slays Ancalagon the Black. Morgoth defeated and the War of Wrath ends.\",\n    },\n    {\n        year: -45,\n        allYear: true,\n        displayDate: \"Iys 545\",\n        label: \"War of Wrath begins.\",\n    },\n    {\n        year: -48,\n        allYear: true,\n        displayDate: \"Iys 542\",\n        label: \"Eärendil sails to Valinor and delivers the errand of the Two Kindreds.\",\n    },\n    {\n        year: -52,\n        allYear: true,\n        displayDate: \"Iys 538\",\n        label: \"Third Kinslaying at the Havens of Sirion. Maglor takes Elrond and Elros.\",\n    },\n    {\n        year: -58,\n        allYear: true,\n        displayDate: \"Iys 532\",\n        label: \"Elrond and Elros born.\",\n    },\n    {\n        year: -65,\n        allYear: true,\n        displayDate: \"Iys 525\",\n        label: \"Tuor and Idril sail Eärrámë into the West. Eärendil marries Elwing.\",\n    },\n    {\n        year: -80,\n        allYear: false,\n        month: 4,\n        day: 26,\n        displayDate: \"Iys 510 Gates of Summer\",\n        label: \"Fall of Gondolin.\",\n    },\n    {\n        year: -84,\n        allYear: false,\n        month: 11,\n        day: \"1 Yule\",\n        displayDate: \"Iys 506 Midwinter\",\n        label: \"Fall of Doriath in the Second Kinslaying.\",\n    },\n    {\n        year: -87,\n        allYear: true,\n        displayDate: \"Iys 503\",\n        label: \"Eärendil (spring) and Elwing born. Final deaths of Beren and Lúthien (autumn?).\",\n    },\n    {\n        year: -88,\n        allYear: true,\n        displayDate: \"Iys 502\",\n        label: \"Thingol slain by Dwarves in Menegroth. Melian returns to Valinor in grief.\",\n    },\n    {\n        year: -91,\n        allYear: true,\n        month: 4,\n        day: 25,\n        displayDate: \"Iys 499 Spring or Summer\",\n        label: \"Túrin Turambar slays Glaurung.\",\n    },\n    {\n        year: -95,\n        allYear: false,\n        month: 10,\n        day: 19,\n        displayDate: \"Iys 495 Hísimë 19\",\n        label: \"Tuor comes to Gondolin.\",\n    },\n    {\n        year: -95,\n        allYear: false,\n        month: 10,\n        day: 1,\n        displayDate: \"Iys 495 c.Hísimë 1\",\n        label: \"Fall of Nargothrond, followed by the Fell Winter.\",\n    },\n    {\n        year: -95,\n        allYear: false,\n        month: 9,\n        day: 11,\n        displayDate: \"Iys 495 Narquelië 11\",\n        label: \"Tuor meets Ulmo in Nevrast.\",\n    },\n    {\n        year: -118,\n        allYear: false,\n        month: 11,\n        day: \"1 Yule\",\n        displayDate: \"Iys 472 Winter\",\n        label: \"Tuor born.\",\n    },\n    {\n        year: -118,\n        allYear: false,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"Iys 472 Midsummer\",\n        label: 'Nírnaeth Arnoediad: The 6-day \"Battle of Unnumbered Tears\" begins.',\n    },\n    {\n        year: -124,\n        allYear: true,\n        displayDate: \"Iys 466 Spring\",\n        label: \"Beren and Lúthien achieve the Quest of the Silmaril.\",\n    },\n    {\n        year: -125,\n        allYear: true,\n        month: 10,\n        day: 23,\n        displayDate: \"Iys 465 Autumn or Winter\",\n        label: \"Finrod slain by a werewolf saving Beren during the Quest of the Silmaril.\",\n    },\n    {\n        year: -126,\n        allYear: false,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"Iys 464 Midsummer\",\n        label: \"Beren first sees Lúthien dancing under the moonrise in Neldoreth.\",\n    },\n    {\n        year: -126,\n        allYear: false,\n        displayDate: \"Iys 464 Gwaeron?\",\n        label: \"Túrin Turambar born.\",\n    },\n    {\n        year: -134,\n        allYear: false,\n        displayDate: \"Iys 456\",\n        label: \"Fingolfin slain in single combat with Morgoth.\",\n    },\n    {\n        year: -134,\n        allYear: false,\n        month: 0,\n        day: \"2 Yule\",\n        displayDate: \"Iys 455 Midwinter\",\n        label: \"Dagor Bragollach: Battle of Sudden Flame. Barahir rescues Finrod.\",\n    },\n    {\n        year: -158,\n        allYear: true,\n        displayDate: \"Iys 432\",\n        label: \"Beren Erchamion born.\",\n    },\n    {\n        year: -280,\n        allYear: true,\n        displayDate: \"Iys 310\",\n        label: \"Bëor leads The First House of the Edain into Beleriand and are discovered by Finrod.\",\n    },\n    {\n        year: -330,\n        allYear: true,\n        displayDate: \"Iys 260\",\n        label: \"Glaurung first appears and is driven back to Angband. The Long Peace begins.\",\n    },\n    {\n        year: -474,\n        allYear: true,\n        displayDate: \"Iys 116\",\n        label: \"Gondolin completed.\",\n    },\n    {\n        year: -488,\n        allYear: true,\n        displayDate: \"Iys 102\",\n        label: \"Nargothrond completed.\",\n    },\n    {\n        year: -526,\n        allYear: true,\n        displayDate: \"Iys 64\",\n        label: \"Turgon begins building Gondolin.\",\n    },\n    {\n        year: -530,\n        allYear: true,\n        displayDate: \"Iys 60\",\n        label: \"Dagor Aglareb: start of the Siege of Angband.\",\n    },\n    {\n        year: -537,\n        allYear: true,\n        displayDate: \"Iys 53\",\n        label: \"Turgon, guided by Ulmo, discovers the hidden valley of Tumladen.\",\n    },\n    {\n        year: -538,\n        allYear: true,\n        displayDate: \"Iys 52\",\n        label: \"Finrod begins building Nargothrond.\",\n    },\n    {\n        year: -540,\n        allYear: true,\n        month: 6,\n        day: \"Midyear's Day\",\n        displayDate: \"Iys 50 Summer\",\n        label: \"Ulmo sends Turgon and Finrod a dream near the Aelin-uial.\",\n    },\n    {\n        year: -570,\n        allYear: false,\n        displayDate: \"Iys 20 Spring\",\n        label: \"Mereth Aderthad: The Feast of Reuniting held near Eithel Ivrin.\",\n    },\n    {\n        year: -585,\n        allYear: true,\n        displayDate: \"Iys 5\",\n        label: \"Fingon rescues Maedhros from atop Thangorodrim.\",\n    },\n    {\n        year: -589,\n        allYear: false, // don't set a Shire date, so that Eldar New Year's Day is always selected.\n        displayDate: \"Iys 1\",\n        label: \"The Sun first rises over Middle-earth. Awakening of Men in Hildórien.\",\n    },\n];\n\n/**\n * Calendar simulation Dates of Interest list.\n * @constant\n */\nconst DatesOfInterest: DateOfInterest[] = [\n    ...DatesOfInterestFourthAge,\n    ...DatesOfInterestThirdAgeLotR,\n    ...DatesOfInterestThirdAge,\n    ...DatesOfInterestSecondAge,\n    ...DatesOfInterestFirstAge,\n];\n\n/**\n * Converts the given S.A. year to the gregorian date corresponding to an\n * arbirary date in the middle of that year, or to a gregorian date\n * corresponding to the specific S.R. month and day, if given.\n *\n * @param shireStartDate - Second Age start date.\n * @param year           - Second Age year (convert S.R. year += 1600 + 3441)\n * @param month          - Shire month.\n * @param day            - Shire day.\n * @returns The gregorian date corresponding to the given Shire date,\n *          possibly an arbitrary date in the middle of the given year.\n */\nconst convertShireToGregorianDate = (\n    shireStartDate: Date,\n    year: number,\n    month?: number,\n    day?: number | string\n): Date => {\n    // Find a date somewhere in the middle of the current Shire calendar year.\n    let gregorian = new Date(shireStartDate);\n    let daysElapsed =\n        Math.floor(((year - 1) * GONDOR_DAYS_PER_1000_YEARS) / 1000) + 183;\n    gregorian.setDate(gregorian.getDate() + daysElapsed);\n\n    if (day) {\n        const calendar = makeShireCalendarDates(\n            gregorian,\n            shireStartDate,\n            GondorLeapYearRuleEnum.TRADITIONAL\n        );\n\n        // Find the Gregorian date for the specific Shire Reckoning date.\n        const shireDate = calendar.dates.find(\n            (date) => date.month === month && date.day === day\n        );\n\n        if (shireDate) {\n            gregorian = shireDate.gregorian;\n        }\n    }\n\n    // Return the found date, or the arbitrary date in the middle of the year.\n    return gregorian;\n};\n\n/**\n * @return {Date} The Gregorian Date corresponding to the given `DateOfInterest` and start dates.\n */\nconst eventOfInterestToDate = (\n    eventOfInterest: DateOfInterest,\n    shireStartDate: Date,\n    rivendellStartDate: Date\n): Date => {\n    if (eventOfInterest.day) {\n        return convertShireToGregorianDate(\n            shireStartDate,\n            eventOfInterest.year,\n            eventOfInterest.month,\n            eventOfInterest.day\n        );\n    }\n\n    // Find the Elves' New Year's Day for the current Shire calendar year.\n    const midYear = convertShireToGregorianDate(\n        shireStartDate,\n        eventOfInterest.year\n    );\n\n    return getRivendellNewYearDate(midYear, rivendellStartDate);\n};\n\n/**\n * @return {Date} The Gregorian Date corresponding to the `currentEventIndex` and start dates,\n *                or `currentDate` if the `currentEventIndex` is not a valid `DateOfInterest`.\n */\nconst adjustDateForCurrentEvent = (\n    currentDate: Date,\n    currentEventIndex: number,\n    shireStartDate: Date,\n    rivendellStartDate: Date\n): Date => {\n    if (currentEventIndex < 0 || DatesOfInterest.length <= currentEventIndex) {\n        return currentDate;\n    }\n\n    return eventOfInterestToDate(\n        DatesOfInterest[currentEventIndex],\n        shireStartDate,\n        rivendellStartDate\n    );\n};\n\n/**\n * @return {number} The DatesOfInterest index for the `currentDate` according to the given start dates.\n */\nconst findEventIndex = (\n    currentDate: Date,\n    shireStartDate: Date,\n    rivendellStartDate: Date\n): number => {\n    const currentSAYear = daysElapsedToSecondAgeYear(\n        toDaysElapsed(shireStartDate, currentDate)\n    ).year;\n\n    return DatesOfInterest.findIndex((event) => {\n        if (event.allYear) {\n            return currentSAYear === event.year;\n        }\n\n        return datesMatch(\n            currentDate,\n            eventOfInterestToDate(event, shireStartDate, rivendellStartDate)\n        );\n    });\n};\n\n/**\n * @return {number} The DatesOfInterest index preceding the `currentDate` according to the given start dates, or -1.\n */\nconst findPreviousEventIndex = (\n    currentDate: Date,\n    shireStartDate: Date,\n    rivendellStartDate: Date\n): number => {\n    const currentSAYear = daysElapsedToSecondAgeYear(\n        toDaysElapsed(shireStartDate, currentDate)\n    ).year;\n\n    return DatesOfInterest.findIndex((event) => {\n        if (event.allYear) {\n            return currentSAYear > event.year;\n        }\n\n        return (\n            currentDate\n            > eventOfInterestToDate(event, shireStartDate, rivendellStartDate)\n        );\n    });\n};\n\nexport {\n    SecondAgeSyncScheme,\n    SyncAges,\n    DatesOfInterest,\n    DatesOfInterestFourthAge,\n    DatesOfInterestThirdAgeLotR,\n    DatesOfInterestThirdAge,\n    DatesOfInterestSecondAge,\n    DatesOfInterestFirstAge,\n    adjustDateForCurrentEvent,\n    convertShireToGregorianDate,\n    eventOfInterestToDate,\n    findEventIndex,\n    findPreviousEventIndex,\n};\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    GondorCalendarYear,\n    GondorMonths,\n    GondorLeapYearRuleEnum,\n    GondorReckoningEnum,\n    makeGondorCalendarDates,\n} from \"../../GondorReckoning\";\n\nimport {\n    daysElapsedToSecondAgeYear,\n    daysElapsedToNewReckoningYear,\n    toDaysElapsed,\n    datesMatch,\n    getFirstDay,\n    getLastDay,\n} from \"../../Utils\";\n\nimport GondorCalendar from \"../../ui/GondorCalendar\";\nimport { LanguageEnum } from \"../../ui/controls/LanguagePicker\";\nimport { MonthLayoutEnum } from \"../../ui/controls/MonthViewLayout\";\nimport \"../../ui/tolkien-calendars.css\";\n\nimport LanguagePicker from \"../controls/LanguagePicker\";\nimport MonthViewLayout from \"../controls/MonthViewLayout\";\nimport MonthViewPicker from \"../controls/MonthViewPicker\";\n\nimport StartReckoningDatePicker from \"./StartReckoningDatePicker\";\n\nimport { Grid } from \"@mui/material\";\n\nconst getNewStyleYear = (startDate: Date, today: Date) =>\n    daysElapsedToNewReckoningYear(\n        daysElapsedToSecondAgeYear,\n        toDaysElapsed(startDate, today)\n    ).year - 3441;\n\nconst gondorReckoningForYear = (\n    calendar: GondorCalendarYear,\n    startDate: Date,\n    today: Date\n) => {\n    let year = calendar.year;\n\n    let gondorReckoning = GondorReckoningEnum.KINGS;\n    if (year > 3441) {\n        year -= 3441;\n\n        if (year > 2059) {\n            gondorReckoning = GondorReckoningEnum.STEWARDS;\n\n            // For year 3019, New Reckoning doesn't start until 3/25 old style.\n            if (year > 3019 || getNewStyleYear(startDate, today) >= 3019) {\n                gondorReckoning = GondorReckoningEnum.NEW;\n            }\n        }\n    }\n\n    return gondorReckoning;\n};\n\ninterface GondorCalendarSimulatedProps {\n    date: Date;\n    startDate: Date;\n    onCalendarStartChange: (startDate: Date) => void;\n}\n\nconst GondorCalendarSimulated = (props: GondorCalendarSimulatedProps) => {\n    const {\n        date: nextDate,\n        startDate: nextStartDate,\n        onCalendarStartChange,\n    } = props;\n\n    const [language, setLanguage] = React.useState(LanguageEnum.QUENYA);\n    const [yearView, setYearView] = React.useState(false);\n    const [monthViewLayout, setMonthViewLayout] = React.useState(\n        MonthLayoutEnum.VERTICAL\n    );\n    const [today, setToday] = React.useState(nextDate);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n    const [reckoning, setReckoning] = React.useState(\n        GondorCalendar.RECKONING_STEWARDS\n    );\n\n    const [calendar, setCalendar] = React.useState(() =>\n        makeGondorCalendarDates(\n            today,\n            startDate,\n            reckoning,\n            GondorLeapYearRuleEnum.TRADITIONAL\n        )\n    );\n\n    const viewDate = calendar.todayGondor.gregorian;\n    const thisMonth = calendar.todayGondor.month;\n    const [monthView, setMonthView] = React.useState(thisMonth);\n\n    const updateCalendarState = (\n        today: Date,\n        startDate: Date,\n        reckoning: GondorReckoningEnum\n    ) => {\n        const nextCalendar = makeGondorCalendarDates(\n            today,\n            startDate,\n            reckoning,\n            GondorLeapYearRuleEnum.TRADITIONAL\n        );\n        setCalendar(nextCalendar);\n        setMonthView(nextCalendar.todayGondor.month);\n\n        return nextCalendar;\n    };\n\n    let gondorReckoning = gondorReckoningForYear(calendar, startDate, viewDate);\n\n    // Check object equality so views are updated anytime `Today` is clicked.\n    const updateToday = today !== nextDate;\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    if (updateToday || updateStartDate) {\n        const nextCalendar = updateCalendarState(\n            nextDate,\n            nextStartDate,\n            reckoning\n        );\n        gondorReckoning = gondorReckoningForYear(\n            nextCalendar,\n            nextStartDate,\n            nextDate\n        );\n    }\n\n    const updateReckoning = reckoning !== gondorReckoning;\n    if (updateReckoning) {\n        setReckoning(gondorReckoning);\n        updateCalendarState(nextDate, nextStartDate, gondorReckoning);\n    }\n\n    const onMonthViewChange = (\n        nextViewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => {\n        setMonthView(monthView);\n        setYearView(yearView);\n\n        if (!datesMatch(viewDate, nextViewDate)) {\n            const nextCalendar = updateCalendarState(\n                nextViewDate,\n                startDate,\n                reckoning\n            );\n\n            gondorReckoning = gondorReckoningForYear(\n                nextCalendar,\n                startDate,\n                nextViewDate\n            );\n            if (reckoning !== gondorReckoning) {\n                setReckoning(gondorReckoning);\n                updateCalendarState(nextViewDate, startDate, gondorReckoning);\n            }\n        }\n    };\n\n    const onMonthViewLayoutChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        setMonthViewLayout(event.target.value as MonthLayoutEnum);\n    };\n\n    const onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setLanguage(event.target.value as LanguageEnum);\n    };\n\n    let year = calendar.year;\n    let age = \"II\";\n    let reckoningDisplay = \"Kings'\";\n    if (year > 3441) {\n        year -= 3441;\n        age = \"III\";\n\n        if (year > 2059) {\n            reckoningDisplay = \"Stewards'\";\n\n            if (year > 3019 || reckoning === GondorReckoningEnum.NEW) {\n                reckoningDisplay = \"New\";\n\n                if (year > 3020) {\n                    year -= 3020;\n                    age = \"IV\";\n                }\n            }\n        }\n    }\n\n    const caption = `${reckoningDisplay} Reckoning ${age} ${year}`;\n\n    const startMonth = reckoning === GondorReckoningEnum.NEW ? 3 : 0;\n    const months = [];\n    for (let i = startMonth; i < GondorMonths.length + startMonth; i++) {\n        const gondorMonth = GondorMonths[i % 12];\n        months.push({\n            emoji: gondorMonth.emoji,\n            name: gondorMonth[language],\n        });\n    }\n\n    const firstDay = getFirstDay(calendar);\n    const lastDay = getLastDay(calendar);\n\n    return (\n        <table className=\"shire-calendar gondor-calendar shire-calendar-styled-example\">\n            <caption className=\"shire-caption\">{caption}</caption>\n            <thead>\n                <tr>\n                    <th className=\"gondor-calendar-controls\">\n                        <StartReckoningDatePicker\n                            startDate={startDate}\n                            onCalendarStartChange={onCalendarStartChange}\n                        />\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justifyContent=\"center\"\n                            alignItems=\"flex-end\"\n                            wrap=\"nowrap\"\n                        >\n                            <LanguagePicker\n                                language={language}\n                                onLanguageChange={onLanguageChange}\n                            />\n                            <MonthViewLayout\n                                layout={monthViewLayout}\n                                onMonthViewLayoutChange={\n                                    onMonthViewLayoutChange\n                                }\n                            />\n                        </Grid>\n                    </th>\n                    <th className=\"gondor-calendar-controls month-picker-container\">\n                        <MonthViewPicker\n                            months={months}\n                            firstDay={firstDay}\n                            lastDay={lastDay}\n                            thisMonth={thisMonth}\n                            today={today}\n                            viewDate={viewDate}\n                            monthView={monthView}\n                            yearView={yearView}\n                            onMonthViewChange={onMonthViewChange}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3} className=\"shire-calendar-wrapper-cell\">\n                        <GondorCalendar\n                            className=\"shire-calendar gondor-calendar\"\n                            calendar={calendar}\n                            date={today}\n                            reckoning={reckoning}\n                            language={language}\n                            monthViewLayout={monthViewLayout}\n                            monthView={monthView}\n                            yearView={yearView}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default GondorCalendarSimulated;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    RivendellMonths,\n    RivendellRulesEnum,\n    makeRivendellCalendarDates,\n} from \"../../RivendellReckoning\";\nimport { datesMatch, getFirstDay, getLastDay } from \"../../Utils\";\n\nimport RivendellCalendar from \"../../ui/RivendellCalendar\";\nimport { LanguageEnum } from \"../../ui/controls/LanguagePicker\";\nimport { MonthLayoutEnum } from \"../../ui/controls/MonthViewLayout\";\nimport \"../../ui/tolkien-calendars.css\";\n\nimport LanguagePicker from \"../controls/LanguagePicker\";\nimport MonthViewLayout from \"../controls/MonthViewLayout\";\nimport MonthViewPicker from \"../controls/MonthViewPicker\";\n\nimport \"../examples.css\";\n\nimport StartReckoningDatePicker from \"./StartReckoningDatePicker\";\n\nimport { Grid } from \"@mui/material\";\n\ninterface RivendellCalendarSimulatedProps {\n    date: Date;\n    startDate: Date;\n    onCalendarStartChange: (startDate: Date) => void;\n}\n\nconst RivendellCalendarSimulated = (props: RivendellCalendarSimulatedProps) => {\n    const {\n        date: nextDate,\n        startDate: nextStartDate,\n        onCalendarStartChange,\n    } = props;\n\n    const [language, setLanguage] = React.useState(LanguageEnum.QUENYA);\n    const [yearView, setYearView] = React.useState(false);\n    const [monthViewLayout, setMonthViewLayout] = React.useState(\n        MonthLayoutEnum.VERTICAL\n    );\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n    const [today, setToday] = React.useState(nextDate);\n\n    const [calendar, setCalendar] = React.useState(() =>\n        makeRivendellCalendarDates(\n            today,\n            startDate,\n            RivendellRulesEnum.TRADITIONAL\n        )\n    );\n\n    const viewDate = calendar.todayRivendell.gregorian;\n    const thisMonth = calendar.todayRivendell.month;\n    const [monthView, setMonthView] = React.useState(thisMonth);\n\n    // Check object equality so views are updated anytime `Today` is clicked.\n    const updateToday = today !== nextDate;\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    if (updateToday || updateStartDate) {\n        const nextCalendar = makeRivendellCalendarDates(\n            nextDate,\n            nextStartDate,\n            RivendellRulesEnum.TRADITIONAL\n        );\n        setCalendar(nextCalendar);\n        setMonthView(nextCalendar.todayRivendell.month);\n    }\n\n    const onMonthViewChange = (\n        nextViewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => {\n        setMonthView(monthView);\n        setYearView(yearView);\n\n        if (!datesMatch(viewDate, nextViewDate)) {\n            const nextCalendar = makeRivendellCalendarDates(\n                nextViewDate,\n                startDate,\n                RivendellRulesEnum.TRADITIONAL\n            );\n            setCalendar(nextCalendar);\n            setMonthView(nextCalendar.todayRivendell.month);\n        }\n    };\n\n    const onMonthViewLayoutChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        setMonthViewLayout(event.target.value as MonthLayoutEnum);\n    };\n\n    const onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setLanguage(event.target.value as LanguageEnum);\n    };\n\n    const year = calendar.year;\n    const yen = Math.ceil(year / 144);\n    const loa = year > 0 ? ((year - 1) % 144) + 1 : year % 144;\n    const caption = `Rivendell Reckoning ${year} (yén ${yen}, loa ${loa})`;\n\n    const months = RivendellMonths.map(function (month) {\n        return { emoji: month.emoji, name: month[language] };\n    });\n\n    const firstDay = getFirstDay(calendar);\n    const lastDay = getLastDay(calendar);\n\n    let calendarClassName = \"shire-calendar rivendell-calendar\";\n    if (!yearView && monthViewLayout === MonthLayoutEnum.VERTICAL) {\n        calendarClassName += \" rivendell-calendar-vertical-weeks\";\n    }\n\n    return (\n        <table className=\"shire-calendar rivendell-calendar shire-calendar-styled-example\">\n            <caption className=\"rivendell-caption\">{caption}</caption>\n            <thead>\n                <tr>\n                    <th className=\"rivendell-calendar-controls\">\n                        <StartReckoningDatePicker\n                            startDate={startDate}\n                            onCalendarStartChange={onCalendarStartChange}\n                        />\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justifyContent=\"center\"\n                            alignItems=\"flex-end\"\n                            wrap=\"nowrap\"\n                        >\n                            <LanguagePicker\n                                language={language}\n                                onLanguageChange={onLanguageChange}\n                            />\n                            <MonthViewLayout\n                                layout={monthViewLayout}\n                                onMonthViewLayoutChange={\n                                    onMonthViewLayoutChange\n                                }\n                            />\n                        </Grid>\n                    </th>\n                    <th className=\"rivendell-calendar-controls month-picker-container\">\n                        <MonthViewPicker\n                            months={months}\n                            monthLabel=\"Season\"\n                            firstDay={firstDay}\n                            lastDay={lastDay}\n                            thisMonth={thisMonth}\n                            today={today}\n                            viewDate={viewDate}\n                            monthView={monthView}\n                            yearView={yearView}\n                            onMonthViewChange={onMonthViewChange}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3} className=\"shire-calendar-wrapper-cell\">\n                        <RivendellCalendar\n                            className={calendarClassName}\n                            calendar={calendar}\n                            date={today}\n                            language={language}\n                            monthViewLayout={monthViewLayout}\n                            monthView={monthView}\n                            yearView={yearView}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default RivendellCalendarSimulated;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    makeShireCalendarDates,\n    ShireMonths,\n    ShireRegionEnum,\n} from \"../../ShireReckoning\";\nimport { GondorLeapYearRuleEnum } from \"../../GondorReckoning\";\nimport { datesMatch, getFirstDay, getLastDay } from \"../../Utils\";\n\nimport ShireCalendar from \"../../ui/ShireCalendar\";\nimport { MonthLayoutEnum } from \"../../ui/controls/MonthViewLayout\";\nimport \"../../ui/tolkien-calendars.css\";\n\nimport MonthViewLayout from \"../controls/MonthViewLayout\";\nimport MonthViewPicker from \"../controls/MonthViewPicker\";\nimport ShireRegionPicker from \"../controls/ShireRegionPicker\";\n\nimport StartReckoningDatePicker from \"./StartReckoningDatePicker\";\n\nimport { Grid } from \"@mui/material\";\n\ninterface ShireCalendarSimulatedProps {\n    date: Date;\n    startDate: Date;\n    onCalendarStartChange: (startDate: Date) => void;\n}\n\nconst ShireCalendarSimulated = (props: ShireCalendarSimulatedProps) => {\n    const {\n        date: nextDate,\n        startDate: nextStartDate,\n        onCalendarStartChange,\n    } = props;\n\n    const [yearView, setYearView] = React.useState(false);\n    const [monthViewLayout, setMonthViewLayout] = React.useState(\n        MonthLayoutEnum.VERTICAL\n    );\n    const [region, setRegion] = React.useState(ShireRegionEnum.SHIRE);\n    const [today, setToday] = React.useState(nextDate);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n\n    const [calendar, setCalendar] = React.useState(() =>\n        makeShireCalendarDates(\n            today,\n            startDate,\n            GondorLeapYearRuleEnum.TRADITIONAL\n        )\n    );\n\n    const viewDate = calendar.todayShire.gregorian;\n    const thisMonth = calendar.todayShire.month;\n    const [monthView, setMonthView] = React.useState(thisMonth);\n\n    // Check object equality so views are updated anytime `Today` is clicked.\n    const updateToday = today !== nextDate;\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    if (updateToday || updateStartDate) {\n        const nextCalendar = makeShireCalendarDates(\n            nextDate,\n            nextStartDate,\n            GondorLeapYearRuleEnum.TRADITIONAL\n        );\n        setCalendar(nextCalendar);\n        setMonthView(nextCalendar.todayShire.month);\n    }\n\n    const onMonthViewChange = (\n        nextViewDate: Date,\n        monthView: number,\n        yearView: boolean\n    ) => {\n        setMonthView(monthView);\n        setYearView(yearView);\n\n        if (!datesMatch(viewDate, nextViewDate)) {\n            const nextCalendar = makeShireCalendarDates(\n                nextViewDate,\n                startDate,\n                GondorLeapYearRuleEnum.TRADITIONAL\n            );\n            setCalendar(nextCalendar);\n            setMonthView(nextCalendar.todayShire.month);\n        }\n    };\n\n    const onMonthViewLayoutChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        setMonthViewLayout(event.target.value as MonthLayoutEnum);\n    };\n\n    const onRegionChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setRegion(event.target.value as ShireRegionEnum);\n    };\n\n    let reckoningName = \"Shire\";\n    let reckoningYearOffset = 1600;\n    if (region === ShireCalendar.REGION_NAMES_BREE) {\n        reckoningName = \"Bree\";\n        reckoningYearOffset = 1299;\n    }\n\n    const thirdAgeYear = calendar.year - 3441;\n\n    const reckoningYear = thirdAgeYear - reckoningYearOffset;\n    const caption = `${reckoningName} Reckoning ${reckoningYear}`;\n\n    const astron6 = calendar.dates[96];\n    let blotmath2 = calendar.dates[305];\n    if (blotmath2.day === 1) {\n        // leap-year\n        blotmath2 = calendar.dates[306];\n    } else if (blotmath2.day === 30) {\n        // millennial leap-year\n        blotmath2 = calendar.dates[307];\n    }\n\n    if (thirdAgeYear < 3020) {\n        // Force these days to the month's default colors, since they are not holidays until at least S.R. 1420.\n        astron6.className = ShireMonths[3].className;\n        blotmath2.className = ShireMonths[10].className;\n    } else {\n        delete astron6.className;\n        delete blotmath2.className;\n    }\n\n    const months = ShireMonths.map(function (month) {\n        return { emoji: month.emoji, name: month[region] };\n    });\n\n    const firstDay = getFirstDay(calendar);\n    const lastDay = getLastDay(calendar);\n\n    return (\n        <table className=\"shire-calendar shire-calendar-styled-example\">\n            <caption className=\"shire-caption\">{caption}</caption>\n            <thead>\n                <tr>\n                    <th className=\"shire-calendar-controls\">\n                        <StartReckoningDatePicker\n                            startDate={startDate}\n                            onCalendarStartChange={onCalendarStartChange}\n                        />\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justifyContent=\"center\"\n                            alignItems=\"flex-end\"\n                            wrap=\"nowrap\"\n                        >\n                            <ShireRegionPicker\n                                label=\"Reckon with\"\n                                region={region}\n                                onRegionChange={onRegionChange}\n                            />\n                            <MonthViewLayout\n                                layout={monthViewLayout}\n                                onMonthViewLayoutChange={\n                                    onMonthViewLayoutChange\n                                }\n                            />\n                        </Grid>\n                    </th>\n                    <th className=\"shire-calendar-controls month-picker-container\">\n                        <MonthViewPicker\n                            months={months}\n                            firstDay={firstDay}\n                            lastDay={lastDay}\n                            thisMonth={thisMonth}\n                            today={today}\n                            viewDate={viewDate}\n                            monthView={monthView}\n                            yearView={yearView}\n                            onMonthViewChange={onMonthViewChange}\n                        />\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td colSpan={3} className=\"shire-calendar-wrapper-cell\">\n                        <ShireCalendar\n                            className=\"shire-calendar\"\n                            calendar={calendar}\n                            date={today}\n                            region={region}\n                            monthViewLayout={monthViewLayout}\n                            monthView={monthView}\n                            yearView={yearView}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport default ShireCalendarSimulated;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { Button, ListItemText, MenuItem, Toolbar } from \"@mui/material\";\n\nimport { ShireMonths, makeShireCalendarDates } from \"../../ShireReckoning\";\nimport {\n    GondorLeapYearRuleEnum,\n    isGondorLeapYear,\n} from \"../../GondorReckoning\";\nimport { getNextDate, getPrevDate } from \"../../Utils\";\n\nimport { convertShireToGregorianDate } from \"./DatesOfInterest\";\n\nimport { ArrowKeyNavSelect, DateNumberInput } from \"../Common\";\nimport \"../examples.css\";\n\ninterface ShireDatePickerProps {\n    today: Date;\n    shireStartDate: Date;\n    onDateChanged: (date: Date) => void;\n    todayEnabled?: boolean;\n}\n\nconst ShireDatePicker = (props: ShireDatePickerProps) => {\n    const { today, shireStartDate, onDateChanged, todayEnabled = true } = props;\n\n    const calendar = makeShireCalendarDates(\n        today,\n        shireStartDate,\n        GondorLeapYearRuleEnum.TRADITIONAL\n    );\n    const { year, todayShire } = calendar;\n\n    const resetDate = () => onDateChanged(new Date());\n\n    const onMonthChanged = (year: number, month: number) => {\n        let day = todayShire.day;\n\n        switch (day) {\n            case \"2 Yule\":\n            case \"Overlithe\":\n            case \"2 Lithe\":\n                day = 1;\n                break;\n            case \"1 Yule\":\n            case \"1 Lithe\":\n            case \"Midyear's Day\":\n                day = 30;\n                break;\n            default:\n                break;\n        }\n\n        onDateChanged(\n            convertShireToGregorianDate(shireStartDate, year, month, day)\n        );\n    };\n\n    const onMonthInc = () => {\n        const month = todayShire.month;\n\n        onMonthChanged(\n            month === 11 ? year + 1 : year,\n            month === 11 ? 0 : month + 1\n        );\n    };\n\n    const onMonthDec = () => {\n        const month = todayShire.month;\n\n        onMonthChanged(\n            month === 0 ? year - 1 : year,\n            month === 0 ? 11 : month - 1\n        );\n    };\n\n    const onDayChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const day = event.target.value;\n        onDateChanged(new Date(day));\n    };\n\n    const onDayInc = () => {\n        onDateChanged(getNextDate(todayShire.gregorian));\n    };\n\n    const onDayDec = () => {\n        onDateChanged(getPrevDate(todayShire.gregorian));\n    };\n\n    const onYearChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const year = parseInt(event.target.value, 10) + 1600 + 3441;\n        const month = todayShire.month;\n        let day = todayShire.day;\n\n        if (\n            day === \"Overlithe\"\n            && !isGondorLeapYear(year, GondorLeapYearRuleEnum.TRADITIONAL)\n        ) {\n            day = \"2 Lithe\";\n        }\n\n        onDateChanged(\n            convertShireToGregorianDate(shireStartDate, year, month, day)\n        );\n    };\n\n    return (\n        <Toolbar\n            className=\"simulated-shire-date-picker\"\n            style={{ paddingLeft: 0 }}\n        >\n            <ArrowKeyNavSelect\n                className=\"date-time-input simulated-shire-month-picker\"\n                label=\"Month\"\n                value={todayShire.month}\n                onChange={(event: React.ChangeEvent<HTMLSelectElement>) =>\n                    onMonthChanged(year, parseInt(event.target.value, 10))\n                }\n                onArrowUp={onMonthDec}\n                onArrowLeft={onMonthDec}\n                onArrowDown={onMonthInc}\n                onArrowRight={onMonthInc}\n                SelectProps={{\n                    renderValue: (value: number) => ShireMonths[value].tolkien,\n                }}\n            >\n                {ShireMonths.map((month, i) => (\n                    <MenuItem key={month.shire} value={i}>\n                        <ListItemText\n                            primary={month.tolkien}\n                            secondary={month.shire}\n                        />\n                    </MenuItem>\n                ))}\n            </ArrowKeyNavSelect>\n            <ArrowKeyNavSelect\n                className=\"date-time-input\"\n                label=\"Day\"\n                value={todayShire.gregorian.toISOString()}\n                onChange={onDayChanged}\n                onArrowUp={onDayDec}\n                onArrowLeft={onDayDec}\n                onArrowDown={onDayInc}\n                onArrowRight={onDayInc}\n            >\n                {calendar.dates\n                    .filter((date) => date.month === todayShire.month)\n                    .map((date) => (\n                        <MenuItem\n                            key={date.gregorian.toISOString()}\n                            value={date.gregorian.toISOString()}\n                        >\n                            {date.day}\n                        </MenuItem>\n                    ))}\n            </ArrowKeyNavSelect>\n            <DateNumberInput\n                label=\"Year\"\n                value={year - 1600 - 3441}\n                onChange={onYearChanged}\n            />\n            {todayEnabled && (\n                <Button\n                    variant=\"outlined\"\n                    size=\"large\"\n                    className=\"today-button\"\n                    onClick={resetDate}\n                >\n                    <span className=\"today-button-txt\">Today</span>\n                </Button>\n            )}\n        </Toolbar>\n    );\n};\n\nexport default ShireDatePicker;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { Toolbar, Typography } from \"@mui/material\";\n\nimport {\n    DateMonthSelect,\n    DayInput,\n    YearInput,\n    parseDatePickerChangedDate,\n} from \"../Common\";\n\ninterface StartDatePickerProps {\n    startDate: Date;\n    onCalendarStartChange: (startDate: Date) => void;\n}\n\nconst StartReckoningDatePicker = (props: StartDatePickerProps) => {\n    const { startDate: currentDate } = props;\n\n    const onMonthChanged = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const year = currentDate.getFullYear();\n        const month = parseInt(event.target.value, 10);\n        const day = currentDate.getDate();\n\n        onDateChanged(year, month, day);\n    };\n\n    const onMonthInc = () => {\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const day = currentDate.getDate();\n\n        onDateChanged(\n            month === 11 ? year + 1 : year,\n            month === 11 ? 0 : month + 1,\n            day\n        );\n    };\n\n    const onMonthDec = () => {\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const day = currentDate.getDate();\n\n        onDateChanged(\n            month === 0 ? year - 1 : year,\n            month === 0 ? 11 : month - 1,\n            day\n        );\n    };\n\n    const onDayChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const day = parseInt(event.target.value, 10);\n\n        onDateChanged(year, month, day);\n    };\n\n    const onYearChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const year = parseInt(event.target.value, 10);\n        const month = currentDate.getMonth();\n        const day = currentDate.getDate();\n\n        onDateChanged(year, month, day);\n    };\n\n    const onDateChanged = (year: number, month: number, day: number) => {\n        const currentDate = parseDatePickerChangedDate(year, month, day);\n\n        if (currentDate) {\n            props.onCalendarStartChange(currentDate);\n        }\n    };\n\n    return (\n        <>\n            <Typography variant=\"subtitle1\" gutterBottom>\n                Start reckoning from\n            </Typography>\n            <Toolbar\n                variant=\"dense\"\n                disableGutters\n                style={{\n                    margin: \"0 auto 0.25rem\",\n                    justifyContent: \"center\",\n                    fontWeight: \"normal\",\n                }}\n            >\n                <DateMonthSelect\n                    SelectProps={{\n                        SelectDisplayProps: {\n                            style: { fontSize: \"0.75rem\" },\n                        },\n                    }}\n                    value={currentDate.getMonth()}\n                    onChange={onMonthChanged}\n                    onArrowUp={onMonthDec}\n                    onArrowLeft={onMonthDec}\n                    onArrowDown={onMonthInc}\n                    onArrowRight={onMonthInc}\n                />\n                <DayInput\n                    style={{ width: \"4rem\" }}\n                    inputProps={{ style: { fontSize: \"0.75rem\" } }}\n                    value={currentDate.getDate()}\n                    onChange={onDayChanged}\n                />\n                <YearInput\n                    inputProps={{ style: { fontSize: \"0.75rem\" } }}\n                    value={currentDate.getFullYear()}\n                    onChange={onYearChanged}\n                />\n            </Toolbar>\n        </>\n    );\n};\n\nexport default StartReckoningDatePicker;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\n\nimport { MenuItem, Stack, Toolbar, Typography } from \"@mui/material\";\nimport { ThemeProvider } from \"@mui/material/styles\";\n\nimport { datesMatch, getNextDate, getPrevDate } from \"../../Utils\";\nimport \"../../ui/tolkien-calendars.css\";\n\nimport ShireCalendar from \"./ShireCalendar\";\nimport RivendellCalendar from \"./RivendellCalendar\";\nimport GondorCalendar from \"./GondorCalendars\";\nimport {\n    SyncAges,\n    SecondAgeSyncScheme,\n    DatesOfInterest,\n    adjustDateForCurrentEvent,\n    findEventIndex,\n    findPreviousEventIndex,\n} from \"./DatesOfInterest\";\nimport ShireDatePicker from \"./ShireDatePicker\";\n\nimport {\n    ArrowKeyNavSelect,\n    CalendarCellStyle,\n    DatePicker,\n    OutlinedSelect,\n} from \"../Common\";\nimport theme from \"../theme\";\nimport \"../examples.css\";\n\nconst ta3019_4_6_EventIndex = DatesOfInterest.findIndex(\n    ({ year, month, day }) => 3019 + 3441 === year && 3 === month && 6 === day\n);\n\nconst blankEvent = (\n    <MenuItem key=\"blankEvent\" value={-1}>\n        &nbsp;\n    </MenuItem>\n);\n\nenum DatePickerStyle {\n    Gregorian = \"gregorian-reckoning\",\n    Shire = \"shire-reckoning\",\n}\n\nenum TimeOfDay {\n    BeforeSunrise,\n    Daytime,\n    AfterSunset,\n}\n\ninterface SimulatedTolkienCalendarsProps {\n    calendarRules?: number;\n    selectedEvent?: number;\n    date?: Date;\n}\n\nexport const SimulatedTolkienCalendars = (\n    props: SimulatedTolkienCalendarsProps\n) => {\n    const initialDate = props.date || new Date();\n\n    const initialSelectedEvent =\n        props.selectedEvent\n        && -1 <= props.selectedEvent\n        && props.selectedEvent < DatesOfInterest.length\n            ? props.selectedEvent\n            : -1;\n\n    const [calendarRules, setCalendarRules] = React.useState(\n        props.calendarRules || props.calendarRules === 0\n            ? props.calendarRules\n            : 2 // Sync 2020-21 Moon phases with T.A. 3018-19\n    );\n\n    const [customSyncScheme, setCustomSyncScheme] =\n        React.useState<SecondAgeSyncScheme>();\n\n    const startDates = SyncAges[calendarRules]?.startDates;\n\n    const [rivendellStartDate, setRivendellStartDate] = React.useState(\n        startDates?.rivendell\n    );\n    const [gondorStartDate, setGondorStartDate] = React.useState(\n        startDates?.gondor\n    );\n    const [shireStartDate, setShireStartDate] = React.useState(\n        startDates?.shire\n    );\n\n    const [selectedEvent, setSelectedEvent] = React.useState(() => {\n        if (initialSelectedEvent < 0) {\n            return findEventIndex(\n                initialDate,\n                shireStartDate,\n                rivendellStartDate\n            );\n        }\n\n        return initialSelectedEvent;\n    });\n\n    const [currentDate, setCurrentDate] = React.useState(() => {\n        if (initialSelectedEvent >= 0) {\n            const adjustedDate = adjustDateForCurrentEvent(\n                initialDate,\n                initialSelectedEvent,\n                shireStartDate,\n                rivendellStartDate\n            );\n            if (!datesMatch(initialDate, adjustedDate)) {\n                return adjustedDate;\n            }\n        }\n\n        return initialDate;\n    });\n\n    const [gondorDate, setGondorDate] = React.useState(currentDate);\n    const [rivendellDate, setRivendellDate] = React.useState(currentDate);\n\n    const [datePickerView, setDatePickerView] = React.useState(\n        DatePickerStyle.Gregorian\n    );\n\n    const [timeOfDay, setTimeOfDay] = React.useState(TimeOfDay.Daytime);\n\n    const toggleDatePickerView = () => {\n        if (datePickerView === DatePickerStyle.Shire) {\n            setDatePickerView(DatePickerStyle.Gregorian);\n        } else {\n            setDatePickerView(DatePickerStyle.Shire);\n        }\n    };\n\n    const updateTodayState = (currentDate: Date, nextTimeOfDay: TimeOfDay) => {\n        let gondorDate = currentDate;\n        let rivendellDate = currentDate;\n\n        if (nextTimeOfDay === TimeOfDay.BeforeSunrise) {\n            gondorDate = getPrevDate(currentDate);\n        }\n\n        if (nextTimeOfDay === TimeOfDay.AfterSunset) {\n            rivendellDate = getNextDate(currentDate);\n        }\n\n        setGondorDate(gondorDate);\n        setRivendellDate(rivendellDate);\n        setCurrentDate(currentDate);\n    };\n\n    const onCalendarRulesChange = (calendarRules: number) => {\n        const startDates =\n            calendarRules < SyncAges.length\n                ? SyncAges[calendarRules].startDates\n                : customSyncScheme?.startDates || SyncAges[0].startDates;\n\n        const nextRivendellStartDate = startDates.rivendell;\n        const nextGondorStartDate = startDates.gondor;\n        const nextShireStartDate = startDates.shire;\n\n        let adjustedDate = currentDate;\n        let nextSelectedEvent = selectedEvent;\n        if (nextSelectedEvent === -1 && calendarRules === 0) {\n            nextSelectedEvent = ta3019_4_6_EventIndex;\n        }\n\n        if (nextSelectedEvent >= 0) {\n            adjustedDate = adjustDateForCurrentEvent(\n                currentDate,\n                nextSelectedEvent,\n                nextShireStartDate,\n                nextRivendellStartDate\n            );\n            if (currentDate !== adjustedDate) {\n                updateTodayState(adjustedDate, timeOfDay);\n            }\n        } else {\n            nextSelectedEvent = findEventIndex(\n                currentDate,\n                nextShireStartDate,\n                nextRivendellStartDate\n            );\n        }\n\n        if (selectedEvent !== nextSelectedEvent) {\n            setSelectedEvent(nextSelectedEvent);\n            setTimeOfDay(TimeOfDay.Daytime);\n            updateTodayState(adjustedDate, TimeOfDay.Daytime);\n        }\n\n        setCalendarRules(calendarRules);\n        setRivendellStartDate(nextRivendellStartDate);\n        setGondorStartDate(nextGondorStartDate);\n        setShireStartDate(nextShireStartDate);\n    };\n\n    const prevSyncScheme = () => {\n        if (calendarRules > 0) {\n            onCalendarRulesChange(calendarRules - 1);\n        }\n    };\n\n    const nextSyncScheme = () => {\n        if (calendarRules < SyncAges.length - 1) {\n            onCalendarRulesChange(calendarRules + 1);\n        }\n    };\n\n    const onDatesOfInterestChange = (selectedEvent: number) => {\n        const adjustedDate = adjustDateForCurrentEvent(\n            currentDate,\n            selectedEvent,\n            shireStartDate,\n            rivendellStartDate\n        );\n        if (currentDate !== adjustedDate) {\n            setTimeOfDay(TimeOfDay.Daytime);\n            updateTodayState(adjustedDate, TimeOfDay.Daytime);\n        }\n\n        setSelectedEvent(selectedEvent);\n    };\n\n    const prevEventOfInterest = () => {\n        if (selectedEvent === -1) {\n            const nextEvent = findPreviousEventIndex(\n                currentDate,\n                shireStartDate,\n                rivendellStartDate\n            );\n            if (nextEvent > 0) {\n                onDatesOfInterestChange(nextEvent - 1);\n            }\n        } else if (selectedEvent > 0) {\n            onDatesOfInterestChange(selectedEvent - 1);\n        }\n    };\n\n    const nextEventOfInterest = () => {\n        if (selectedEvent === -1) {\n            onDatesOfInterestChange(\n                findPreviousEventIndex(\n                    currentDate,\n                    shireStartDate,\n                    rivendellStartDate\n                )\n            );\n        } else if (selectedEvent < DatesOfInterest.length - 1) {\n            onDatesOfInterestChange(selectedEvent + 1);\n        }\n    };\n\n    const onDateChanged = (currentDate: Date) => {\n        setTimeOfDay(TimeOfDay.Daytime);\n        updateTodayState(currentDate, TimeOfDay.Daytime);\n        setSelectedEvent(\n            findEventIndex(currentDate, shireStartDate, rivendellStartDate)\n        );\n    };\n\n    const onTimeOfDayChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const nextTimeOfDay = parseInt(event.target.value) as TimeOfDay;\n\n        updateTodayState(currentDate, nextTimeOfDay);\n        setTimeOfDay(nextTimeOfDay);\n    };\n\n    const onShireStartDateChange = (shireStartDate: Date) => {\n        setCalendarRules(SyncAges.length);\n\n        const adjustedDate = adjustDateForCurrentEvent(\n            currentDate,\n            selectedEvent,\n            shireStartDate,\n            rivendellStartDate\n        );\n        if (currentDate !== adjustedDate) {\n            updateTodayState(adjustedDate, timeOfDay);\n        }\n\n        const gondorStartDate = new Date(shireStartDate);\n        setGondorStartDate(gondorStartDate);\n        setShireStartDate(shireStartDate);\n\n        setCustomSyncScheme({\n            label: \"Custom Reckoning\",\n            startDates: {\n                rivendell: rivendellStartDate,\n                gondor: gondorStartDate,\n                shire: shireStartDate,\n            },\n        });\n    };\n\n    const onGondorStartDateChange = (gondorStartDate: Date) => {\n        const shireStartDate = new Date(gondorStartDate);\n\n        setCalendarRules(SyncAges.length);\n\n        const adjustedDate = adjustDateForCurrentEvent(\n            currentDate,\n            selectedEvent,\n            shireStartDate,\n            rivendellStartDate\n        );\n        if (currentDate !== adjustedDate) {\n            updateTodayState(adjustedDate, timeOfDay);\n        }\n\n        setGondorStartDate(gondorStartDate);\n        setShireStartDate(shireStartDate);\n\n        setCustomSyncScheme({\n            label: \"Custom Reckoning\",\n            startDates: {\n                rivendell: rivendellStartDate,\n                gondor: gondorStartDate,\n                shire: shireStartDate,\n            },\n        });\n    };\n\n    const onRivendellStartDateChange = (rivendellStartDate: Date) => {\n        setCalendarRules(SyncAges.length);\n\n        const adjustedDate = adjustDateForCurrentEvent(\n            currentDate,\n            selectedEvent,\n            shireStartDate,\n            rivendellStartDate\n        );\n        if (currentDate !== adjustedDate) {\n            updateTodayState(adjustedDate, timeOfDay);\n        }\n\n        setRivendellStartDate(rivendellStartDate);\n\n        setCustomSyncScheme({\n            label: \"Custom Reckoning\",\n            startDates: {\n                rivendell: rivendellStartDate,\n                gondor: gondorStartDate,\n                shire: shireStartDate,\n            },\n        });\n    };\n\n    const eventOpts = DatesOfInterest.map((event, i) => (\n        <MenuItem key={i} value={i}>\n            {event.label ? (\n                `${event.displayDate} | ${event.label}`\n            ) : (\n                <>&nbsp;</>\n            )}\n        </MenuItem>\n    ));\n\n    if (selectedEvent === -1) {\n        const previousEvent = findPreviousEventIndex(\n            currentDate,\n            shireStartDate,\n            rivendellStartDate\n        );\n\n        if (previousEvent >= 0) {\n            eventOpts.splice(previousEvent, 0, blankEvent);\n        } else {\n            eventOpts.unshift(blankEvent);\n        }\n    }\n\n    const syncSchemes = [...SyncAges];\n    if (customSyncScheme) {\n        syncSchemes.push(customSyncScheme);\n    }\n    const syncOptions = syncSchemes.map(function (sync, i) {\n        return (\n            <MenuItem key={i} value={i}>\n                {sync.label}\n            </MenuItem>\n        );\n    });\n\n    return (\n        <table className=\"simulated-calendar\">\n            <tbody>\n                <tr>\n                    <th colSpan={3} className=\"simulated-date-controls\">\n                        <ArrowKeyNavSelect\n                            label=\"Synchronize\"\n                            style={{ width: \"33rem\" }}\n                            value={calendarRules}\n                            onChange={(\n                                event: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                                onCalendarRulesChange(\n                                    parseInt(event.target.value, 10)\n                                )\n                            }\n                            onArrowUp={prevSyncScheme}\n                            onArrowLeft={prevSyncScheme}\n                            onArrowDown={nextSyncScheme}\n                            onArrowRight={nextSyncScheme}\n                        >\n                            {syncOptions}\n                        </ArrowKeyNavSelect>\n                    </th>\n                </tr>\n                <tr>\n                    <th colSpan={3} className=\"simulated-date-controls\">\n                        <ArrowKeyNavSelect\n                            label=\"Dates of Interest\"\n                            style={{ width: \"60rem\", marginTop: \".33rem\" }}\n                            value={selectedEvent}\n                            onChange={(\n                                event: React.ChangeEvent<HTMLInputElement>\n                            ) =>\n                                onDatesOfInterestChange(\n                                    parseInt(event.target.value, 10)\n                                )\n                            }\n                            onArrowUp={prevEventOfInterest}\n                            onArrowLeft={prevEventOfInterest}\n                            onArrowDown={nextEventOfInterest}\n                            onArrowRight={nextEventOfInterest}\n                        >\n                            {eventOpts}\n                        </ArrowKeyNavSelect>\n                    </th>\n                </tr>\n                <tr>\n                    <th className=\"simulated-date-controls\" colSpan={2}>\n                        <Stack direction=\"row\" mt={1}>\n                            <Toolbar style={{ paddingRight: 0 }}>\n                                <ArrowKeyNavSelect\n                                    color=\"success\"\n                                    value={datePickerView}\n                                    onChange={(\n                                        event: React.ChangeEvent<HTMLSelectElement>\n                                    ) =>\n                                        setDatePickerView(\n                                            event.target\n                                                .value as DatePickerStyle\n                                        )\n                                    }\n                                    onArrowUp={toggleDatePickerView}\n                                    onArrowLeft={toggleDatePickerView}\n                                    onArrowDown={toggleDatePickerView}\n                                    onArrowRight={toggleDatePickerView}\n                                >\n                                    <MenuItem value={DatePickerStyle.Gregorian}>\n                                        <Typography variant=\"h6\">\n                                            Gregorian Date\n                                        </Typography>\n                                    </MenuItem>\n                                    <MenuItem value={DatePickerStyle.Shire}>\n                                        <Typography variant=\"h6\">\n                                            Shire-reckoning\n                                        </Typography>\n                                    </MenuItem>\n                                </ArrowKeyNavSelect>\n                            </Toolbar>\n                            {datePickerView === DatePickerStyle.Gregorian && (\n                                <DatePicker\n                                    date={currentDate}\n                                    onDateChanged={onDateChanged}\n                                    todayEnabled={!!calendarRules}\n                                    label=\"\"\n                                    className=\"simulated-gregorian-date-picker\"\n                                />\n                            )}\n                            {datePickerView === DatePickerStyle.Shire && (\n                                <ShireDatePicker\n                                    today={currentDate}\n                                    shireStartDate={shireStartDate}\n                                    onDateChanged={onDateChanged}\n                                    todayEnabled={!!calendarRules}\n                                />\n                            )}\n                            <Toolbar>\n                                <OutlinedSelect\n                                    label=\"Time of Day\"\n                                    value={timeOfDay}\n                                    onChange={onTimeOfDayChange}\n                                >\n                                    <MenuItem value={TimeOfDay.BeforeSunrise}>\n                                        Before Sunrise\n                                    </MenuItem>\n                                    <MenuItem value={TimeOfDay.Daytime}>\n                                        Daytime\n                                    </MenuItem>\n                                    <MenuItem value={TimeOfDay.AfterSunset}>\n                                        After Sunset\n                                    </MenuItem>\n                                </OutlinedSelect>\n                            </Toolbar>\n                        </Stack>\n                    </th>\n                </tr>\n                <tr>\n                    <td style={CalendarCellStyle}>\n                        <ShireCalendar\n                            date={currentDate}\n                            startDate={shireStartDate}\n                            onCalendarStartChange={onShireStartDateChange}\n                        />\n                    </td>\n                    <td style={CalendarCellStyle}>\n                        <GondorCalendar\n                            date={gondorDate}\n                            startDate={gondorStartDate}\n                            onCalendarStartChange={onGondorStartDateChange}\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td style={CalendarCellStyle} colSpan={2}>\n                        <RivendellCalendar\n                            date={rivendellDate}\n                            startDate={rivendellStartDate}\n                            onCalendarStartChange={onRivendellStartDateChange}\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n};\n\nexport const StyledSimulations = (props: SimulatedTolkienCalendarsProps) => (\n    <ThemeProvider theme={theme}>\n        <SimulatedTolkienCalendars {...props} />\n    </ThemeProvider>\n);\n\nconst meta = {\n    title: \"Shire Reckoning / Middle-earth Simulation\",\n\n    parameters: {\n        options: { showPanel: false },\n    },\n\n    component: StyledSimulations,\n    excludeStories: [\"SimulatedTolkienCalendars\", \"StyledSimulations\"],\n} satisfies Meta<typeof StyledSimulations>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Elves_NewYear_sDayInT_A_3019DefaultExample: Story = {\n    name: \"Elves' New Year's Day in T.A. 3019\",\n    args: { calendarRules: 0, selectedEvent: ta3019_4_6_EventIndex },\n};\n\nexport const _2020_21MoonPhaseSynchronizedSimulation: Story = {\n    name: \"2020-21 moon phase synchronized simulation (default example)\",\n};\n\nexport const _2017_18MoonPhaseSynchronizedSimulation: Story = {\n    name: \"2017-18 moon phase synchronized simulation\",\n    args: { calendarRules: 3, selectedEvent: -1 },\n};\n\nexport const _1941_42MoonPhaseSynchronizedSimulation: Story = {\n    name: \"1941-42 moon phase synchronized simulation\",\n    args: { calendarRules: 4, selectedEvent: -1 },\n};\n","import {\n    blue,\n    blueGrey,\n    cyan,\n    deepOrange,\n    green,\n    red,\n} from \"@mui/material/colors\";\nimport { createTheme } from \"@mui/material/styles\";\n\nconst baseFonts = [\"Libre Baskerville\", \"Georgia\", \"serif\"];\n\nconst theme = createTheme({\n    typography: {\n        fontFamily: baseFonts.join(\",\"),\n    },\n    palette: {\n        primary: { main: blue[800] },\n        secondary: { main: blueGrey[700] },\n        success: { main: green[600] },\n        error: { main: red[900] },\n        warning: { main: deepOrange[800] },\n        info: cyan,\n    },\n});\n\nconst scriptFontFamily = [\"Fondamento\", ...baseFonts].join(\",\");\n\nexport default theme;\nexport { scriptFontFamily };\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { CalendarDate, datesMatch } from \"../Utils\";\nimport \"./tolkien-calendars.css\";\n\ninterface DateCellProps {\n    className: string;\n    currentDate: Date;\n    date: CalendarDate;\n    description: string;\n    emoji: string;\n    month: string;\n    weekday: string;\n}\n\ninterface GregorianDateDisplayProps {\n    date: Date;\n}\n\nconst dateKey = (date: CalendarDate, suffix?: string | number) =>\n    `${date.month}/${date.day}${suffix}`;\n\nconst getDateColor = (\n    monthColor: string,\n    date1: Date | undefined,\n    date2: Date\n) => {\n    if (date1 && datesMatch(date1, date2)) {\n        return \"highlight\";\n    }\n\n    return monthColor;\n};\n\nconst GregorianDateDisplay = (props: GregorianDateDisplayProps) => (\n    <div className=\"gregorian-display\">{props.date.toDateString()}</div>\n);\n\nconst DateCell = (props: DateCellProps) => {\n    const {\n        className,\n        currentDate,\n        date: { gregorian, day },\n        description,\n        emoji,\n        month,\n        weekday,\n    } = props;\n\n    const dayColor = getDateColor(className, gregorian, currentDate);\n\n    const day1 = day === 1;\n\n    const dateDisplay = day1 ? month : day;\n    const dateDisplayClassName = day1 ? \"month-name-display\" : \"date-display\";\n\n    return (\n        <td className={dayColor} title={description + \"\\nWeekday: \" + weekday}>\n            <div className=\"date-container\">\n                <div className=\"date-display-emoji\">{day1 && emoji}</div>\n                <div className={dateDisplayClassName}>{dateDisplay}</div>\n                <GregorianDateDisplay date={gregorian} />\n            </div>\n        </td>\n    );\n};\n\nexport { dateKey, getDateColor, GregorianDateDisplay };\nexport default DateCell;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    GondorCalendarYear,\n    GondorDate,\n    GondorHolidays,\n    GondorMonths,\n    GondorWeekdays,\n    GondorLeapYearRuleEnum,\n    GondorReckoningEnum,\n    makeGondorCalendarDates,\n} from \"../GondorReckoning\";\n\nimport { datesMatch, fullYearDate } from \"../Utils\";\n\nimport DateCell, { dateKey } from \"./DateCell\";\nimport IntercalaryDay from \"./IntercalaryDay\";\nimport WeekDayHeaderCell, {\n    addMonthFiller,\n    addVerticalMonthFiller,\n} from \"./WeekDayHeaderCell\";\nimport \"./tolkien-calendars.css\";\n\nimport { LanguageEnum } from \"./controls/LanguagePicker\";\n\nimport {\n    MonthLayoutEnum,\n    VerticalLayoutFiller,\n} from \"./controls/MonthViewLayout\";\n\ninterface GondorCalendarProps {\n    caption?: string | boolean;\n    className?: string;\n    language?: LanguageEnum;\n    monthView?: number;\n    monthViewLayout?: MonthLayoutEnum;\n    startDay?: number;\n    yearView?: boolean;\n    date?: Date;\n    startDate?: Date;\n    reckoning?: GondorReckoningEnum;\n    calendarRules?: GondorLeapYearRuleEnum;\n    calendar?: GondorCalendarYear;\n}\n\ninterface GondorDateProps {\n    date: GondorDate;\n    today: Date;\n    language: LanguageEnum;\n    reckoning: GondorReckoningEnum;\n}\n\ninterface GondorYearProps {\n    dates: GondorDate[];\n    today: Date;\n    language: LanguageEnum;\n    reckoning: GondorReckoningEnum;\n}\n\ninterface GondorMonthProps extends GondorYearProps {\n    monthView: number;\n}\n\nconst defaultCaption = (reckoning: GondorReckoningEnum) => {\n    switch (reckoning) {\n        case GondorReckoningEnum.KINGS:\n            return \"Kings' Reckoning\";\n        case GondorReckoningEnum.STEWARDS:\n            return \"Stewards' Reckoning\";\n        case GondorReckoningEnum.NEW:\n            return \"New Reckoning\";\n        default:\n            // should never happen\n            return \"Gondor Reckoning\";\n    }\n};\n\nconst getDateColor = (\n    reckoning: GondorReckoningEnum,\n    date: GondorDate,\n    monthColor: string\n) => {\n    if (date.className !== undefined) {\n        return date.className;\n    }\n\n    if (\n        reckoning === GondorReckoningEnum.NEW\n        && date.month === 5\n        && date.day === 30\n    ) {\n        return \"holiday\";\n    }\n\n    return monthColor;\n};\n\nconst GondorDateCell = ({\n    date,\n    today,\n    language,\n    reckoning,\n}: GondorDateProps) => {\n    switch (date.day) {\n        case \"Yestarë\":\n        case \"Tuilérë\":\n        case \"Cormarë\":\n        case \"Loëndë\":\n        case \"Enderë\":\n        case \"Yáviérë\":\n        case \"Mettarë\":\n            const holiday = GondorHolidays[date.day];\n\n            return (\n                <IntercalaryDay\n                    name={holiday[language]}\n                    description={holiday.description}\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                />\n            );\n\n        default:\n            const startMonth = reckoning === GondorReckoningEnum.NEW ? 3 : 0;\n            const month = GondorMonths[(date.month + startMonth) % 12];\n            const weekday = GondorWeekdays[date.weekDay];\n            const className = getDateColor(reckoning, date, month.className);\n\n            return (\n                <DateCell\n                    date={date}\n                    currentDate={today}\n                    month={month[language]}\n                    emoji={month.emoji}\n                    description={month.description}\n                    weekday={weekday[language]}\n                    className={className}\n                />\n            );\n    }\n};\n\nconst GondorMonth = ({\n    monthView,\n    dates,\n    today,\n    language,\n    reckoning,\n}: GondorMonthProps) => {\n    const weeks: React.JSX.Element[] = [];\n    let week: React.JSX.Element[] = [];\n\n    let i = 0,\n        date = dates[i],\n        endere = 1;\n\n    for (; i < dates.length && date.month !== monthView; i++, date = dates[i]) {\n        // seek ahead to current month view\n    }\n\n    addMonthFiller(week, date.weekDay);\n\n    for (; i < dates.length && monthView === date.month; i++, date = dates[i]) {\n        week.push(\n            <GondorDateCell\n                key={dateKey(date, date.day === \"Enderë\" ? endere++ : \"\")}\n                date={date}\n                today={today}\n                language={language}\n                reckoning={reckoning}\n            />\n        );\n\n        if (date.weekDay === 6) {\n            weeks.push(<tr key={weeks.length}>{week}</tr>);\n            week = [];\n        }\n    }\n\n    switch (monthView) {\n        case 2:\n            if (date.day === \"Tuilérë\") {\n                week.push(\n                    <GondorDateCell\n                        key={dateKey(date)}\n                        date={date}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                );\n            }\n\n            break;\n\n        case 5:\n            date = dates[i];\n            for (\n                ;\n                date.day === \"Enderë\" || date.day === \"Loëndë\";\n                i++, date = dates[i]\n            ) {\n                week.push(\n                    <GondorDateCell\n                        key={dateKey(\n                            date,\n                            date.day === \"Enderë\" ? endere++ : \"\"\n                        )}\n                        date={date}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                );\n\n                if (date.weekDay === 6) {\n                    weeks.push(<tr key={weeks.length}>{week}</tr>);\n                    week = [];\n                }\n            }\n\n            break;\n\n        case 8:\n            if (date.day === \"Yáviérë\") {\n                week.push(\n                    <GondorDateCell\n                        key={dateKey(date)}\n                        date={date}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                );\n            }\n\n            break;\n\n        default:\n            break;\n    }\n\n    if (week.length > 0) {\n        weeks.push(<tr key={weeks.length}>{week}</tr>);\n    }\n\n    return weeks;\n};\n\nconst GondorMonthVertical = ({\n    monthView,\n    dates,\n    today,\n    language,\n    reckoning,\n}: GondorMonthProps) => {\n    let weeks = GondorWeekdays.map(function (weekday) {\n        const weekdayName = weekday[language];\n        return [\n            <WeekDayHeaderCell\n                key={weekdayName}\n                emoji={weekday.emoji}\n                name={weekdayName}\n                description={weekday.description}\n                colSpan={2}\n                scope=\"row\"\n            />,\n        ];\n    });\n\n    let i = 0,\n        date = dates[i],\n        endere = 1;\n\n    for (; i < dates.length && date.month !== monthView; i++, date = dates[i]) {\n        // seek ahead to current month view\n    }\n\n    addVerticalMonthFiller(weeks, date.weekDay);\n\n    for (; i < dates.length && monthView === date.month; i++, date = dates[i]) {\n        weeks[date.weekDay].push(\n            <GondorDateCell\n                key={dateKey(date, date.day === \"Enderë\" ? endere++ : \"\")}\n                date={date}\n                today={today}\n                language={language}\n                reckoning={reckoning}\n            />\n        );\n    }\n\n    switch (monthView) {\n        case 2:\n            if (date.day === \"Tuilérë\") {\n                weeks[date.weekDay].push(\n                    <GondorDateCell\n                        key={dateKey(date)}\n                        date={date}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                );\n            }\n\n            break;\n\n        case 5:\n            date = dates[i];\n            for (\n                ;\n                date.day === \"Enderë\" || date.day === \"Loëndë\";\n                i++, date = dates[i]\n            ) {\n                weeks[date.weekDay].push(\n                    <GondorDateCell\n                        key={dateKey(\n                            date,\n                            date.day === \"Enderë\" ? endere++ : \"\"\n                        )}\n                        date={date}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                );\n            }\n\n            break;\n        case 8:\n            if (date.day === \"Yáviérë\") {\n                weeks[date.weekDay].push(\n                    <GondorDateCell\n                        key={dateKey(date)}\n                        date={date}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                );\n            }\n\n            break;\n\n        default:\n            break;\n    }\n\n    if (weeks[0].length > 6) {\n        weeks = GondorWeekdays.map(function (weekday, i) {\n            const week = weeks[i];\n            const weekdayName = weekday[language];\n\n            week.shift();\n            week.unshift(\n                <WeekDayHeaderCell\n                    key={weekdayName}\n                    emoji={weekday.emoji}\n                    name={weekdayName}\n                    description={weekday.description}\n                    scope=\"row\"\n                />\n            );\n\n            return week;\n        });\n    }\n\n    return weeks.map(function (week, i) {\n        return <tr key={i}>{week}</tr>;\n    });\n};\n\nconst GondorYear = ({ dates, today, language, reckoning }: GondorYearProps) => {\n    const weeks: React.JSX.Element[] = [];\n    let week: React.JSX.Element[] = [],\n        endere = 1;\n\n    addMonthFiller(week, dates[0].weekDay);\n\n    for (let i = 0, date = dates[i]; i < dates.length; i++, date = dates[i]) {\n        week.push(\n            <GondorDateCell\n                key={dateKey(date, date.day === \"Enderë\" ? endere++ : \"\")}\n                date={date}\n                today={today}\n                language={language}\n                reckoning={reckoning}\n            />\n        );\n\n        if (date.weekDay === 6) {\n            weeks.push(<tr key={weeks.length}>{week}</tr>);\n            week = [];\n        }\n    }\n\n    if (week.length > 0) {\n        weeks.push(<tr key={weeks.length}>{week}</tr>);\n    }\n\n    return weeks;\n};\n\nconst GondorCalendar = (props: GondorCalendarProps) => {\n    const {\n        caption,\n        className,\n        language = LanguageEnum.QUENYA,\n        monthViewLayout = MonthLayoutEnum.VERTICAL,\n        startDay = 21,\n        yearView = false,\n    } = props;\n\n    const nextDate = props.date || new Date();\n    const [today, setToday] = React.useState(nextDate);\n\n    const nextStartDate = props.startDate || fullYearDate(0, 11, startDay);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n\n    const nextReckoning = props.reckoning || GondorReckoningEnum.STEWARDS;\n    const [reckoning, setReckoning] = React.useState(nextReckoning);\n\n    const nextRules = props.calendarRules || GondorLeapYearRuleEnum.GREGORIAN;\n    const [calendarRules, setCalendarRules] = React.useState(nextRules);\n\n    const [calendar, setCalendar] = React.useState(\n        () =>\n            props.calendar\n            || makeGondorCalendarDates(\n                today,\n                startDate,\n                reckoning,\n                calendarRules\n            )\n    );\n\n    const updateToday = !datesMatch(today, nextDate);\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    const updateReckoning = reckoning !== nextReckoning;\n    if (updateReckoning) {\n        setReckoning(nextReckoning);\n    }\n\n    const updateRules = calendarRules !== nextRules;\n    if (updateRules) {\n        setCalendarRules(nextRules);\n    }\n\n    const updateCalendar = props.calendar && props.calendar !== calendar;\n    if (\n        updateCalendar\n        || updateToday\n        || updateStartDate\n        || updateReckoning\n        || updateRules\n    ) {\n        setCalendar(\n            props.calendar\n                || makeGondorCalendarDates(\n                    nextDate,\n                    nextStartDate,\n                    nextReckoning,\n                    nextRules\n                )\n        );\n    }\n\n    const { dates, todayGondor } = calendar;\n\n    const monthView =\n        props.monthView === undefined ? todayGondor.month : props.monthView;\n\n    return (\n        <table className={className}>\n            {caption && (\n                <caption className=\"gondor-caption\">\n                    {caption === true ? defaultCaption(reckoning) : caption}\n                </caption>\n            )}\n            <thead>\n                {monthViewLayout === MonthLayoutEnum.VERTICAL && !yearView ? (\n                    <VerticalLayoutFiller weekdays={GondorWeekdays} />\n                ) : (\n                    <tr>\n                        {GondorWeekdays.map(function (weekday) {\n                            const weekdayName = weekday[language];\n                            return (\n                                <WeekDayHeaderCell\n                                    key={weekdayName}\n                                    emoji={weekday.emoji}\n                                    name={weekdayName}\n                                    description={weekday.description}\n                                    scope=\"col\"\n                                />\n                            );\n                        })}\n                    </tr>\n                )}\n            </thead>\n            <tbody>\n                {yearView ? (\n                    <GondorYear\n                        dates={dates}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                ) : monthViewLayout === MonthLayoutEnum.VERTICAL ? (\n                    <GondorMonthVertical\n                        monthView={monthView}\n                        dates={dates}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                ) : (\n                    <GondorMonth\n                        monthView={monthView}\n                        dates={dates}\n                        today={today}\n                        language={language}\n                        reckoning={reckoning}\n                    />\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nGondorCalendar.RECKONING_KINGS = GondorReckoningEnum.KINGS;\nGondorCalendar.RECKONING_STEWARDS = GondorReckoningEnum.STEWARDS;\nGondorCalendar.RECKONING_NEW = GondorReckoningEnum.NEW;\n\nGondorCalendar.RECKONING_RULES_TRADITIONAL = GondorLeapYearRuleEnum.TRADITIONAL;\nGondorCalendar.RECKONING_RULES_GREGORIAN = GondorLeapYearRuleEnum.GREGORIAN;\n\nGondorCalendar.MONTH_VIEW_VERTICAL = MonthLayoutEnum.VERTICAL;\nGondorCalendar.MONTH_VIEW_HORIZONTAL = MonthLayoutEnum.HORIZONTAL;\n\nGondorCalendar.LANGUAGE_ENGLISH = LanguageEnum.ENGLISH;\nGondorCalendar.LANGUAGE_QUENYA = LanguageEnum.QUENYA;\nGondorCalendar.LANGUAGE_SINDARIN = LanguageEnum.SINDARIN;\n\nexport default GondorCalendar;\nexport { defaultCaption };\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport { getDateColor, GregorianDateDisplay } from \"./DateCell\";\n\ninterface IntercalaryDayProps {\n    currentDate: Date;\n    dayClassName?: string;\n    dayExtra?: string | number;\n    dayExtraClassName?: string;\n    description: string;\n    gregorian: Date;\n    gregorianExtra?: Date;\n    name: string | number;\n}\n\nconst IntercalaryDay = (props: IntercalaryDayProps) => {\n    const {\n        currentDate,\n        dayClassName,\n        dayExtra,\n        dayExtraClassName,\n        description,\n        gregorian,\n        gregorianExtra,\n        name,\n    } = props;\n\n    let dayColor = getDateColor(\"holiday\", gregorian, currentDate);\n\n    if (dayExtra && gregorianExtra) {\n        dayColor = getDateColor(dayColor, gregorianExtra, currentDate);\n\n        return (\n            <td\n                className={`${dayColor} intercalary-multi-day`}\n                title={description}\n            >\n                <div className={dayClassName}>{name}</div>\n                <GregorianDateDisplay date={gregorian} />\n                <hr className=\"intercalary-day-separator\" />\n                <div className={dayExtraClassName}>{dayExtra}</div>\n                <GregorianDateDisplay date={gregorianExtra} />\n            </td>\n        );\n    }\n\n    return (\n        <td className={dayColor} title={description}>\n            <div className=\"date-container\">\n                <div className=\"date-display-emoji\" />\n                <div className=\"date-display\">{name}</div>\n                <GregorianDateDisplay date={gregorian} />\n            </div>\n        </td>\n    );\n};\n\nexport default IntercalaryDay;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    RivendellCalendarYear,\n    RivendellDate,\n    RivendellWeekdays,\n    RivendellMonths,\n    RivendellHolidays,\n    RivendellRulesEnum,\n    makeRivendellCalendarDates,\n} from \"../RivendellReckoning\";\n\nimport { fullYearDate, datesMatch } from \"../Utils\";\n\nimport DateCell, { dateKey } from \"./DateCell\";\nimport IntercalaryDay from \"./IntercalaryDay\";\nimport WeekDayHeaderCell, {\n    addMonthFiller,\n    addVerticalMonthFiller,\n} from \"./WeekDayHeaderCell\";\nimport \"./tolkien-calendars.css\";\n\nimport { LanguageEnum } from \"./controls/LanguagePicker\";\n\nimport {\n    MonthLayoutEnum,\n    VerticalLayoutFiller,\n} from \"./controls/MonthViewLayout\";\n\ninterface RivendellCalendarProps {\n    caption?: string | boolean;\n    className?: string;\n    language?: LanguageEnum;\n    monthView?: number;\n    monthViewLayout?: MonthLayoutEnum;\n    startDay?: number;\n    yearView?: boolean;\n    date?: Date;\n    startDate?: Date;\n    calendarRules?: RivendellRulesEnum;\n    calendar?: RivendellCalendarYear;\n}\n\ninterface RivendellDateProps {\n    date: RivendellDate;\n    today: Date;\n    language: LanguageEnum;\n}\n\ninterface RivendellYearProps {\n    dates: RivendellDate[];\n    today: Date;\n    language: LanguageEnum;\n}\n\ninterface RivendellMonthProps extends RivendellYearProps {\n    monthView: number;\n}\n\nconst RivendellDateCell = ({ date, today, language }: RivendellDateProps) => {\n    switch (date.day) {\n        case \"Yestarë\":\n        case \"Enderë\":\n        case \"Reformed Enderë\":\n        case \"Mettarë\":\n            const holiday = RivendellHolidays[date.day];\n\n            return (\n                <IntercalaryDay\n                    name={holiday[language]}\n                    description={holiday.description}\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                />\n            );\n\n        default:\n            const month = RivendellMonths[date.month];\n            const weekday = RivendellWeekdays[date.weekDay];\n            const className =\n                date.className === undefined ? month.className : date.className;\n\n            return (\n                <DateCell\n                    date={date}\n                    currentDate={today}\n                    month={month[language]}\n                    emoji={month.emoji}\n                    description={month.description}\n                    weekday={weekday[language]}\n                    className={className}\n                />\n            );\n    }\n};\n\nconst RivendellMonth = ({\n    monthView,\n    dates,\n    today,\n    language,\n}: RivendellMonthProps) => {\n    const weeks: React.JSX.Element[] = [];\n    let week: React.JSX.Element[] = [];\n\n    let i = 0,\n        date = dates[i],\n        endere = 1;\n\n    for (; i < dates.length && date.month < monthView; i++, date = dates[i]) {\n        // seek ahead to current month view\n    }\n\n    addMonthFiller(week, date.weekDay);\n\n    for (; i < dates.length && monthView === date.month; i++, date = dates[i]) {\n        week.push(\n            <RivendellDateCell\n                key={dateKey(date, date.day === \"Enderë\" ? endere++ : \"\")}\n                date={date}\n                today={today}\n                language={language}\n            />\n        );\n\n        if (date.weekDay === 5) {\n            weeks.push(<tr key={weeks.length}>{week}</tr>);\n            week = [];\n        }\n    }\n\n    if (monthView === 2) {\n        date = dates[i];\n        for (; date.day === \"Enderë\"; i++, date = dates[i]) {\n            week.push(\n                <RivendellDateCell\n                    key={dateKey(date, endere++)}\n                    date={date}\n                    today={today}\n                    language={language}\n                />\n            );\n\n            if (date.weekDay === 5) {\n                weeks.push(<tr key={weeks.length}>{week}</tr>);\n                week = [];\n            }\n        }\n    }\n\n    if (week.length > 0) {\n        weeks.push(<tr key={weeks.length}>{week}</tr>);\n    }\n\n    return weeks;\n};\n\nconst RivendellMonthVertical = ({\n    monthView,\n    dates,\n    today,\n    language,\n}: RivendellMonthProps) => {\n    const weeks = RivendellWeekdays.map(function (weekday) {\n        const weekdayName = weekday[language];\n        return [\n            <WeekDayHeaderCell\n                key={weekdayName}\n                emoji={weekday.emoji}\n                name={weekdayName}\n                description={weekday.description}\n                colSpan={2}\n                scope=\"row\"\n            />,\n        ];\n    });\n\n    let i = 0,\n        date = dates[i],\n        endere = 1;\n\n    for (; i < dates.length && date.month < monthView; i++, date = dates[i]) {\n        // seek ahead to current month view\n    }\n\n    addVerticalMonthFiller(weeks, date.weekDay);\n\n    for (; i < dates.length && monthView === date.month; i++, date = dates[i]) {\n        weeks[date.weekDay].push(\n            <RivendellDateCell\n                key={dateKey(date, date.day === \"Enderë\" ? endere++ : \"\")}\n                date={date}\n                today={today}\n                language={language}\n            />\n        );\n    }\n\n    if (monthView === 2) {\n        date = dates[i];\n        for (; date.day === \"Enderë\"; i++, date = dates[i]) {\n            weeks[date.weekDay].push(\n                <RivendellDateCell\n                    key={dateKey(date, endere++)}\n                    date={date}\n                    today={today}\n                    language={language}\n                />\n            );\n        }\n    }\n\n    return weeks.map(function (week, i) {\n        return <tr key={i}>{week}</tr>;\n    });\n};\n\nconst RivendellYear = ({ dates, today, language }: RivendellYearProps) => {\n    const weeks: React.JSX.Element[] = [];\n    let week: React.JSX.Element[] = [],\n        endere = 1;\n\n    addMonthFiller(week, dates[0].weekDay);\n\n    for (let i = 0, date = dates[i]; i < dates.length; i++, date = dates[i]) {\n        week.push(\n            <RivendellDateCell\n                key={dateKey(date, date.day === \"Enderë\" ? endere++ : \"\")}\n                date={date}\n                today={today}\n                language={language}\n            />\n        );\n\n        if (date.weekDay === 5) {\n            weeks.push(<tr key={weeks.length}>{week}</tr>);\n            week = [];\n        }\n    }\n\n    if (week.length > 0) {\n        weeks.push(<tr key={weeks.length}>{week}</tr>);\n    }\n\n    return weeks;\n};\n\nconst RivendellCalendar = (props: RivendellCalendarProps) => {\n    const {\n        caption,\n        className,\n        language = LanguageEnum.QUENYA,\n        monthViewLayout = MonthLayoutEnum.HORIZONTAL,\n        startDay = 22,\n        yearView = false,\n    } = props;\n\n    const nextDate = props.date || new Date();\n    const [today, setToday] = React.useState(nextDate);\n\n    const nextStartDate = props.startDate || fullYearDate(1, 2, startDay);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n\n    const nextRules = props.calendarRules || RivendellRulesEnum.TRADITIONAL;\n    const [calendarRules, setCalendarRules] = React.useState(nextRules);\n\n    const [calendar, setCalendar] = React.useState(\n        () =>\n            props.calendar\n            || makeRivendellCalendarDates(today, startDate, calendarRules)\n    );\n\n    const updateToday = !datesMatch(today, nextDate);\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    const updateRules = calendarRules !== nextRules;\n    if (updateRules) {\n        setCalendarRules(nextRules);\n    }\n\n    const updateCalendar = props.calendar && props.calendar !== calendar;\n    if (updateCalendar || updateToday || updateStartDate || updateRules) {\n        setCalendar(\n            props.calendar\n                || makeRivendellCalendarDates(\n                    nextDate,\n                    nextStartDate,\n                    nextRules\n                )\n        );\n    }\n\n    const { dates, todayRivendell } = calendar;\n\n    const monthView =\n        props.monthView === undefined ? todayRivendell.month : props.monthView;\n\n    return (\n        <table className={className}>\n            {caption && (\n                <caption className=\"rivendell-caption\">\n                    {caption === true ? \"Rivendell Reckoning\" : caption}\n                </caption>\n            )}\n            <thead>\n                {monthViewLayout === MonthLayoutEnum.VERTICAL && !yearView ? (\n                    <VerticalLayoutFiller weekdays={RivendellWeekdays} />\n                ) : (\n                    <tr>\n                        {RivendellWeekdays.map(function (weekday) {\n                            let weekdayName = weekday[language];\n                            return (\n                                <WeekDayHeaderCell\n                                    key={weekdayName}\n                                    emoji={weekday.emoji}\n                                    name={weekdayName}\n                                    description={weekday.description}\n                                    scope=\"col\"\n                                />\n                            );\n                        })}\n                    </tr>\n                )}\n            </thead>\n            <tbody>\n                {yearView ? (\n                    <RivendellYear\n                        dates={dates}\n                        today={today}\n                        language={language}\n                    />\n                ) : monthViewLayout === MonthLayoutEnum.VERTICAL ? (\n                    <RivendellMonthVertical\n                        monthView={monthView}\n                        dates={dates}\n                        today={today}\n                        language={language}\n                    />\n                ) : (\n                    <RivendellMonth\n                        monthView={monthView}\n                        dates={dates}\n                        today={today}\n                        language={language}\n                    />\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nRivendellCalendar.TRADITIONAL_RULES = RivendellRulesEnum.TRADITIONAL;\nRivendellCalendar.REFORMED_RULES = RivendellRulesEnum.REFORMED;\n\nRivendellCalendar.LANGUAGE_ENGLISH = LanguageEnum.ENGLISH;\nRivendellCalendar.LANGUAGE_QUENYA = LanguageEnum.QUENYA;\nRivendellCalendar.LANGUAGE_SINDARIN = LanguageEnum.SINDARIN;\n\nRivendellCalendar.MONTH_VIEW_VERTICAL = MonthLayoutEnum.VERTICAL;\nRivendellCalendar.MONTH_VIEW_HORIZONTAL = MonthLayoutEnum.HORIZONTAL;\n\nexport default RivendellCalendar;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport {\n    ShireCalendarYear,\n    ShireDate,\n    ShireWeekdays,\n    ShireMonths,\n    ShireRegionEnum,\n    makeShireCalendarDates,\n} from \"../ShireReckoning\";\nimport { GondorLeapYearRuleEnum } from \"../GondorReckoning\";\nimport { fullYearDate, datesMatch } from \"../Utils\";\n\nimport DateCell, { dateKey } from \"./DateCell\";\nimport IntercalaryDay from \"./IntercalaryDay\";\nimport WeekDayHeaderCell, {\n    addMonthFiller,\n    addVerticalMonthFiller,\n} from \"./WeekDayHeaderCell\";\nimport \"./tolkien-calendars.css\";\n\nimport {\n    MonthLayoutEnum,\n    VerticalLayoutFiller,\n} from \"./controls/MonthViewLayout\";\n\ninterface ShireCalendarProps {\n    caption?: string | boolean;\n    className?: string;\n    region?: ShireRegionEnum;\n    monthView?: number;\n    monthViewLayout?: MonthLayoutEnum;\n    startDay?: number;\n    yearView?: boolean;\n    date?: Date;\n    startDate?: Date;\n    calendarRules?: GondorLeapYearRuleEnum;\n    calendar?: ShireCalendarYear;\n}\n\ninterface ShireDateProps {\n    dates: ShireDate[];\n    today: Date;\n    region: ShireRegionEnum;\n}\n\ninterface ShireMonthProps extends ShireDateProps {\n    monthView: number;\n}\n\nconst getDateColor = (\n    region: ShireRegionEnum,\n    date: ShireDate,\n    monthColor: string\n): string => {\n    if (date.className !== undefined) {\n        return date.className;\n    }\n\n    const isHoliday =\n        region !== ShireRegionEnum.BREE\n        && ((date.month === 3 && date.day === 6)\n            || (date.month === 10 && date.day === 2));\n\n    return isHoliday ? \"holiday\" : monthColor;\n};\n\nconst ShireDateCell = ({ dates, today, region }: ShireDateProps) => {\n    const date = dates[0];\n    const dayName = date.region ? date.region[region] : date.day;\n\n    let dayClassName;\n    let dayExtraClassName;\n    let dayExtra;\n    let gregorianExtra;\n    let description;\n\n    if (dates.length > 1) {\n        dayExtra = dates[1].region ? dates[1].region[region] : dates[1].day;\n        gregorianExtra = dates[1].gregorian;\n    }\n\n    switch (date.day) {\n        case \"1 Yule\":\n            return (\n                <IntercalaryDay\n                    name={dayName}\n                    description=\"Shire New Year's Eve!\"\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                />\n            );\n\n        case \"2 Yule\":\n            return (\n                <IntercalaryDay\n                    name={dayName}\n                    description=\"Midwinter: Shire New Year!\"\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                />\n            );\n\n        case \"1 Lithe\":\n            description = \"Midsummer's Eve\";\n\n            if (dayExtra === \"Midyear's Day\") {\n                description = \"Midsummer's Eve and Midsummer Day!\";\n                dayExtraClassName = \"intercalary-midyears-day\";\n            } else if (dayExtra) {\n                description = \"Midsummer's Eve and Shire Leap Day!\";\n                dayExtraClassName = \"intercalary-overlithe-day\";\n            }\n\n            return (\n                <IntercalaryDay\n                    name={dayName}\n                    description={description}\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                    dayExtra={dayExtra}\n                    dayExtraClassName={dayExtraClassName}\n                    gregorianExtra={gregorianExtra}\n                />\n            );\n\n        case \"Midyear's Day\":\n            return (\n                <IntercalaryDay\n                    name={dayName}\n                    description=\"Midsummer Day!\"\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                />\n            );\n\n        case \"Overlithe\":\n            description = \"Shire Leap Day!\";\n            if (dayExtra) {\n                dayClassName = \"intercalary-overlithe-day\";\n                description = \"Shire Leap Day and Day after Midsummer.\";\n            }\n\n            return (\n                <IntercalaryDay\n                    name={dayName}\n                    description={description}\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                    dayClassName={dayClassName}\n                    dayExtra={dayExtra}\n                    gregorianExtra={gregorianExtra}\n                />\n            );\n\n        case \"2 Lithe\":\n            return (\n                <IntercalaryDay\n                    name={dayName}\n                    description=\"Day after Midsummer.\"\n                    currentDate={today}\n                    gregorian={date.gregorian}\n                />\n            );\n\n        default:\n            const month = ShireMonths[date.month];\n            const weekday = ShireWeekdays[date.weekDay];\n            const className = getDateColor(region, date, month.className);\n\n            return (\n                <DateCell\n                    date={date}\n                    currentDate={today}\n                    month={month[region]}\n                    emoji={month.emoji}\n                    description={month.description}\n                    weekday={weekday[region]}\n                    className={className}\n                />\n            );\n    }\n};\n\nconst ShireMonth = ({ monthView, today, dates, region }: ShireMonthProps) => {\n    const weeks: React.JSX.Element[] = [];\n    let week: React.JSX.Element[] = [];\n\n    let i = 0,\n        date = dates[i],\n        overlithe = 1;\n\n    for (; i < dates.length && date.month < monthView; i++, date = dates[i]) {\n        // seek ahead to current month view\n    }\n\n    addMonthFiller(week, date.weekDay);\n\n    for (; i < dates.length && monthView === date.month; i++, date = dates[i]) {\n        const nextDates = [date];\n\n        if (i + 1 < dates.length && date.weekDay === dates[i + 1].weekDay) {\n            nextDates.push(dates[++i]);\n        }\n\n        week.push(\n            <ShireDateCell\n                key={dateKey(date, date.day === \"Overlithe\" ? overlithe++ : \"\")}\n                dates={nextDates}\n                today={today}\n                region={region}\n            />\n        );\n\n        if (date.weekDay === 6) {\n            weeks.push(<tr key={weeks.length}>{week}</tr>);\n            week = [];\n        }\n    }\n\n    // Check if simulating without Shire Reform\n    if (monthView === 5 && date.day === \"1 Lithe\") {\n        for (\n            date = dates[i];\n            date.day === \"1 Lithe\"\n            || date.day === \"Midyear's Day\"\n            || date.day === \"Overlithe\"\n            || date.day === \"2 Lithe\";\n            i++, date = dates[i]\n        ) {\n            week.push(\n                <ShireDateCell\n                    key={dateKey(\n                        date,\n                        date.day === \"Overlithe\" ? overlithe++ : \"\"\n                    )}\n                    dates={[date]}\n                    today={today}\n                    region={region}\n                />\n            );\n\n            if (date.weekDay === 6) {\n                weeks.push(<tr key={weeks.length}>{week}</tr>);\n                week = [];\n            }\n        }\n    }\n\n    if (week.length > 0) {\n        weeks.push(<tr key={weeks.length}>{week}</tr>);\n    }\n\n    return weeks;\n};\n\nconst ShireMonthVertical = ({\n    monthView,\n    today,\n    dates,\n    region,\n}: ShireMonthProps) => {\n    let weeks = ShireWeekdays.map(function (weekday) {\n        const weekdayName = weekday[region];\n        return [\n            <WeekDayHeaderCell\n                key={weekdayName}\n                emoji={weekday.emoji}\n                name={weekdayName}\n                description={weekday.description}\n                colSpan={2}\n                scope=\"row\"\n            />,\n        ];\n    });\n\n    let i = 0,\n        date = dates[i],\n        overlithe = 1;\n\n    for (; i < dates.length && date.month < monthView; i++, date = dates[i]) {\n        // seek ahead to current month view\n    }\n\n    addVerticalMonthFiller(weeks, date.weekDay);\n\n    for (; i < dates.length && monthView === date.month; i++, date = dates[i]) {\n        const nextDates = [date];\n\n        if (i + 1 < dates.length && date.weekDay === dates[i + 1].weekDay) {\n            nextDates.push(dates[++i]);\n        }\n\n        weeks[date.weekDay].push(\n            <ShireDateCell\n                key={dateKey(date, date.day === \"Overlithe\" ? overlithe++ : \"\")}\n                dates={nextDates}\n                today={today}\n                region={region}\n            />\n        );\n    }\n\n    // Check if simulating without Shire Reform\n    if (monthView === 5 && date.day === \"1 Lithe\") {\n        for (\n            date = dates[i];\n            date.day === \"1 Lithe\"\n            || date.day === \"Midyear's Day\"\n            || date.day === \"Overlithe\"\n            || date.day === \"2 Lithe\";\n            i++, date = dates[i]\n        ) {\n            weeks[date.weekDay].push(\n                <ShireDateCell\n                    key={dateKey(\n                        date,\n                        date.day === \"Overlithe\" ? overlithe++ : \"\"\n                    )}\n                    dates={[date]}\n                    today={today}\n                    region={region}\n                />\n            );\n        }\n    }\n\n    if (weeks[0].length > 6) {\n        weeks = ShireWeekdays.map(function (weekday, i) {\n            const week = weeks[i];\n            const weekdayName = weekday[region];\n\n            week.shift();\n            week.unshift(\n                <WeekDayHeaderCell\n                    key={weekdayName}\n                    emoji={weekday.emoji}\n                    name={weekdayName}\n                    description={weekday.description}\n                    scope=\"row\"\n                />\n            );\n\n            return week;\n        });\n    }\n\n    return weeks.map(function (week, i) {\n        return <tr key={i}>{week}</tr>;\n    });\n};\n\nconst ShireYear = ({ today, dates, region }: ShireDateProps) => {\n    const weeks: React.JSX.Element[] = [];\n    let week: React.JSX.Element[] = [],\n        overlithe = 1;\n\n    addMonthFiller(week, dates[0].weekDay);\n\n    for (let i = 0, date = dates[i]; i < dates.length; i++, date = dates[i]) {\n        const nextDates = [date];\n\n        if (i + 1 < dates.length && date.weekDay === dates[i + 1].weekDay) {\n            nextDates.push(dates[++i]);\n        }\n\n        week.push(\n            <ShireDateCell\n                key={dateKey(date, date.day === \"Overlithe\" ? overlithe++ : \"\")}\n                dates={nextDates}\n                today={today}\n                region={region}\n            />\n        );\n\n        if (date.weekDay === 6) {\n            weeks.push(<tr key={weeks.length}>{week}</tr>);\n            week = [];\n        }\n    }\n\n    if (week.length > 0) {\n        weeks.push(<tr key={weeks.length}>{week}</tr>);\n    }\n\n    return weeks;\n};\n\nconst ShireCalendar = (props: ShireCalendarProps) => {\n    const {\n        caption,\n        className,\n        region = ShireRegionEnum.SHIRE,\n        monthViewLayout = MonthLayoutEnum.VERTICAL,\n        startDay = 21,\n        yearView = false,\n    } = props;\n\n    const nextDate = props.date || new Date();\n    const [today, setToday] = React.useState(nextDate);\n\n    const nextStartDate = props.startDate || fullYearDate(0, 11, startDay);\n    const [startDate, setStartDate] = React.useState(nextStartDate);\n\n    const nextRules = props.calendarRules || GondorLeapYearRuleEnum.GREGORIAN;\n    const [calendarRules, setCalendarRules] = React.useState(nextRules);\n\n    const [calendar, setCalendar] = React.useState(\n        () =>\n            props.calendar\n            || makeShireCalendarDates(today, startDate, calendarRules)\n    );\n\n    const updateToday = !datesMatch(today, nextDate);\n    if (updateToday) {\n        setToday(nextDate);\n    }\n\n    const updateStartDate = !datesMatch(startDate, nextStartDate);\n    if (updateStartDate) {\n        setStartDate(nextStartDate);\n    }\n\n    const updateRules = calendarRules !== nextRules;\n    if (updateRules) {\n        setCalendarRules(nextRules);\n    }\n\n    const updateCalendar = props.calendar && props.calendar !== calendar;\n    if (updateCalendar || updateToday || updateStartDate || updateRules) {\n        setCalendar(\n            props.calendar\n                || makeShireCalendarDates(nextDate, nextStartDate, nextRules)\n        );\n    }\n\n    const { dates, todayShire } = calendar;\n\n    const monthView =\n        props.monthView === undefined ? todayShire.month : props.monthView;\n\n    return (\n        <table className={className}>\n            {caption && (\n                <caption className=\"shire-caption\">\n                    {caption === true ? \"Shire Reckoning\" : caption}\n                </caption>\n            )}\n            <thead>\n                {monthViewLayout === MonthLayoutEnum.VERTICAL && !yearView ? (\n                    <VerticalLayoutFiller weekdays={ShireWeekdays} />\n                ) : (\n                    <tr>\n                        {ShireWeekdays.map((weekday) => {\n                            const weekdayName = weekday[region];\n                            return (\n                                <WeekDayHeaderCell\n                                    key={weekdayName}\n                                    emoji={weekday.emoji}\n                                    name={weekdayName}\n                                    description={weekday.description}\n                                    scope=\"col\"\n                                />\n                            );\n                        })}\n                    </tr>\n                )}\n            </thead>\n            <tbody>\n                {yearView ? (\n                    <ShireYear today={today} dates={dates} region={region} />\n                ) : monthViewLayout === MonthLayoutEnum.VERTICAL ? (\n                    <ShireMonthVertical\n                        monthView={monthView}\n                        today={today}\n                        dates={dates}\n                        region={region}\n                    />\n                ) : (\n                    <ShireMonth\n                        monthView={monthView}\n                        today={today}\n                        dates={dates}\n                        region={region}\n                    />\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nShireCalendar.REGION_NAMES_TOLKIEN = ShireRegionEnum.TOLKIEN;\nShireCalendar.REGION_NAMES_SHIRE = ShireRegionEnum.SHIRE;\nShireCalendar.REGION_NAMES_BREE = ShireRegionEnum.BREE;\n\nShireCalendar.MONTH_VIEW_VERTICAL = MonthLayoutEnum.VERTICAL;\nShireCalendar.MONTH_VIEW_HORIZONTAL = MonthLayoutEnum.HORIZONTAL;\n\nexport default ShireCalendar;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\nimport \"./tolkien-calendars.css\";\n\ninterface WeekDayHeaderCellProps {\n    colSpan?: number;\n    scope?: string;\n    description?: string;\n    name?: string;\n    emoji?: string;\n}\n\nconst WeekDayHeaderCell = (props: WeekDayHeaderCellProps) => {\n    return (\n        <th\n            className=\"weekday-header\"\n            colSpan={props.colSpan}\n            scope={props.scope}\n            title={props.description}\n        >\n            {props.name && (\n                <div className=\"weekday-name-container\">\n                    <div className=\"weekday-emoji\">{props.emoji}</div>\n                    <div className=\"weekday-name\">{props.name}</div>\n                </div>\n            )}\n        </th>\n    );\n};\n\nconst addMonthFiller = (week: React.JSX.Element[], upToWeekDay: number) => {\n    for (let weekday = 0; weekday < upToWeekDay; weekday++) {\n        week.push(<WeekDayHeaderCell key={\"month-filler-\" + weekday} />);\n    }\n};\n\nconst addVerticalMonthFiller = (\n    weeks: React.JSX.Element[][],\n    upToWeekDay: number\n) => {\n    for (let weekday = 0; weekday < upToWeekDay; weekday++) {\n        weeks[weekday].push(\n            <WeekDayHeaderCell key={\"month-filler-\" + weekday} />\n        );\n    }\n};\n\nexport { addMonthFiller, addVerticalMonthFiller };\nexport default WeekDayHeaderCell;\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\n\nexport enum LanguageEnum {\n    ENGLISH = \"english\",\n    QUENYA = \"quenya\",\n    SINDARIN = \"sindarin\",\n}\n","/**\n * Copyright (C) Paul Sarando\n * Distributed under the Eclipse Public License (http://www.eclipse.org/legal/epl-v10.html).\n */\nimport React from \"react\";\n\nimport \"../tolkien-calendars.css\";\n\ninterface VerticalLayoutFillerProps {\n    weekdays: Object[];\n}\n\nconst VerticalLayoutFiller = (props: VerticalLayoutFillerProps) => {\n    const weekdays = props.weekdays.map(function (weekday, i) {\n        return <td key={i} className=\"vertical-layout-filler\" />;\n    });\n\n    return <tr className=\"vertical-layout-filler\">{weekdays}</tr>;\n};\n\nenum MonthLayoutEnum {\n    VERTICAL = \"vertical\",\n    HORIZONTAL = \"horizontal\",\n}\n\nexport { MonthLayoutEnum, VerticalLayoutFiller };\n"],"names":["root","factory","exports","module","define","amd","self","window","React","ReactDOM","GondorReckoningEnum","GondorLeapYearRuleEnum","GondorWeekdays","emoji","english","quenya","sindarin","description","GondorMonths","className","GondorHolidays","CommonElvishHolidays","getStartDate","startDate","fullYearDate","isMillennialLeapYear","gondorYear","isGondorLeapYear","rules","GREGORIAN","isLeapYear","millennialLeapYear","getGondorNewYearDate","today","yearWithRemainder","TRADITIONAL","daysElapsedToSecondAgeYear","daysElapsedToGregorianYear","toDaysElapsed","getNewYearDate","daysRemainder","getNewReckoningNewYearDate","getYearWithRemainder","daysElapsed","daysElapsedToNewReckoningYear","convertGondorianMonthIndex","fromReckoning","toReckoning","monthIndex","fromNewReckoning","NEW","convertGregorianToGondorianWeekday","weekday","makeGondorCalendarDates","reckoning","STEWARDS","kingsReckoning","KINGS","stewardsReckoning","newReckoning","year","gondorDate","todayGondor","gregorianDate","weekDay","getDay","getWeekDay","dates","month","maxdays","day","gregorian","push","datesMatch","getNextDate","leapYear","RECKONING_KINGS","RECKONING_STEWARDS","RECKONING_NEW","RECKONING_RULES_TRADITIONAL","RECKONING_RULES_GREGORIAN","RIVENDELL_DAYS_PER_12_YEARS","RIVENDELL_DAYS_PER_432_YEARS","RivendellRulesEnum","TRADITIONAL_RULES","REFORMED","REFORMED_RULES","RivendellWeekdays","RivendellMonths","RivendellHolidays","isRivendellLeapYear","daysElapsedToRivendellYear","negativeOffset","Math","floor","getRivendellNewYearDate","calendarRules","makeRivendellCalendarDates","todayRivendell","rivendellDate","enderiCount","enderi","ShireRegionEnum","ShireWeekdays","tolkien","shire","bree","ShireMonths","getShireNewYearDate","makeShireCalendarDates","reckonTraditional","shireReform","shireDate","todayShire","region","summerday","TOLKIEN","REGION_NAMES_TOLKIEN","SHIRE","REGION_NAMES_SHIRE","BREE","REGION_NAMES_BREE","GREGORIAN_DAYS_PER_4_YEARS","GREGORIAN_DAYS_PER_100_YEARS","GREGORIAN_DAYS_PER_400_YEARS","GONDOR_DAYS_PER_4_YEARS","GONDOR_DAYS_PER_100_YEARS","GONDOR_DAYS_PER_1000_YEARS","SECOND_AGE_TOTAL_DAYS","THIRD_AGE_2059_TOTAL_DAYS","THIRD_AGE_2360_TOTAL_DAYS","fromDate","toDate","fromDateMidnight","Date","setHours","toDateNoon","millisecondsElapsed","getTime","daysSinceNewYearsDay","newYearDate","setFullYear","getFullYear","getMonth","getDate","daysPerWeek","offsetThirdAgeDaysElapsed","date1","date2","fullYear","date","getPrevDate","yesterday","setDate","tomorrow","getFirstDate","calendar","getLastDate","length","getFirstDay","getLastDay","CalendarCellStyle","verticalAlign","CaptionCellStyle","padding","borderTopStyle","borderLeftStyle","borderRightStyle","DateNumberInput","props","TextField","type","step","OutlinedSelect","select","ArrowKeyNavSelect","onArrowUp","onArrowDown","onArrowRight","onArrowLeft","SelectProps","open","setOpen","useState","onClose","onOpen","event","key","onKeyDown","preventDefault","DateMonthSelect","monthFormat","monthFormatter","Intl","DateTimeFormat","style","width","undefined","label","Array","map","_","m","MenuItem","value","format","DayInput","YearInput","parseDatePickerChangedDate","currentDate","isNaN","DatePicker","todayEnabled","onMonthInc","onDateChanged","onMonthDec","Toolbar","paddingLeft","Typography","variant","onChange","parseInt","target","Button","size","onClick","Badges","href","rel","src","alt","DisplayTableRows","rows","border","cellPadding","margin","fontFamily","row","index","cell","DisplayTableMap","rowKeys","colKeys","table","whiteSpace","head","textAlign","col","nextDate","nextStartDate","onCalendarStartChange","language","setLanguage","LanguageEnum","QUENYA","monthViewLayout","setMonthViewLayout","MonthLayoutEnum","VERTICAL","yearView","setYearView","setToday","setStartDate","setReckoning","setCalendar","viewDate","thisMonth","monthView","setMonthView","updateToday","updateStartDate","nextCalendar","firstDay","lastDay","startMonth","months","i","gondorMonth","name","defaultCaption","ShireStartDatePicker","selectedDate","SelectDisplayProps","fontSize","fontWeight","scriptFontFamily","nextReckoning","convertedMonthView","Grid","container","direction","justifyContent","alignItems","wrap","onLanguageChange","layout","onMonthViewLayoutChange","onMonthViewChange","nextViewDate","colSpan","nextYearView","onCalendarRulesChange","propsYearView","setPropsYearView","nextRules","setCalendarRules","updateRules","RivendellStartDatePicker","monthLabel","onRegionChange","HORIZONTAL","SyncShireCalendar","SyncRivendellCalendar","subtitle","findRivendellSyncIndex","rivendellStartDate","rivendellCalendarRules","rivendellSyncScheme","findIndex","syncScheme","adjustRivendellAprilSyncScheme","shireStartDate","rivendellAprilSyncScheme","TolkienCalendarsExample","shireAlign","setShireAlign","rivendellAlign","setRivendellAlign","shireSyncScheme","setShireSyncScheme","setShireStartDate","shireCustomSyncScheme","setShireCustomSyncScheme","shireRegion","setShireRegion","gondorLeftStartDate","setGondorLeftStartDate","gondorRightStartDate","setGondorRightStartDate","setRivendellSyncScheme","setRivendellStartDate","rivendellCustomSyncScheme","setRivendellCustomSyncScheme","setRivendellCalendarRules","alignChanged","checked","adjustShireSyncScheme","shireCellClassName","rivendellCellClassName","shireSyncSchemes","shireSyncOptions","sync","rivendellSyncSchemes","rivendellSyncOptions","ListItemText","primary","secondary","Stack","renderValue","FormControlLabel","control","Checkbox","LANGUAGE_ENGLISH","MONTH_VIEW_HORIZONTAL","StyledTolkienCalendars","ThemeProvider","theme","srcStyle","meta","title","parameters","options","showPanel","component","excludeStories","WithSynchronizationSettings","ENGLISH","SINDARIN","monthViewSelectOptions","color","fullWidth","IconButton","ArrowBack","ArrowForward","StartDatePicker","startDates","find","opts","toISOString","marginTop","changedDate","getStartDates","startRange","endRange","ICalendarStartDatePicker","SyncAges","rivendell","gondor","DatesOfInterestFourthAge","allYear","displayDate","DatesOfInterestThirdAgeLotR","DatesOfInterestThirdAge","DatesOfInterestSecondAge","DatesOfInterestFirstAge","DatesOfInterest","convertShireToGregorianDate","eventOfInterestToDate","eventOfInterest","midYear","adjustDateForCurrentEvent","currentEventIndex","findEventIndex","currentSAYear","findPreviousEventIndex","gondorReckoningForYear","gondorReckoning","getNewStyleYear","updateCalendarState","age","reckoningDisplay","caption","ceil","calendarClassName","setRegion","reckoningName","reckoningYearOffset","thirdAgeYear","astron6","blotmath2","onMonthChanged","onDayInc","onDayDec","filter","gutterBottom","disableGutters","inputProps","ta3019_4_6_EventIndex","blankEvent","DatePickerStyle","TimeOfDay","SimulatedTolkienCalendars","initialDate","initialSelectedEvent","selectedEvent","customSyncScheme","setCustomSyncScheme","gondorStartDate","setGondorStartDate","setSelectedEvent","setCurrentDate","adjustedDate","setGondorDate","setRivendellDate","datePickerView","setDatePickerView","Gregorian","timeOfDay","setTimeOfDay","Daytime","toggleDatePickerView","Shire","updateTodayState","nextTimeOfDay","BeforeSunrise","AfterSunset","nextRivendellStartDate","nextGondorStartDate","nextShireStartDate","nextSelectedEvent","prevSyncScheme","nextSyncScheme","onDatesOfInterestChange","prevEventOfInterest","nextEvent","nextEventOfInterest","eventOpts","previousEvent","splice","unshift","syncSchemes","syncOptions","mt","paddingRight","StyledSimulations","Elves_NewYear_sDayInT_A_3019DefaultExample","args","_2020_21MoonPhaseSynchronizedSimulation","_2017_18MoonPhaseSynchronizedSimulation","_1941_42MoonPhaseSynchronizedSimulation","baseFonts","createTheme","typography","join","palette","main","blue","blueGrey","success","green","error","red","warning","deepOrange","info","cyan","dateKey","suffix","getDateColor","monthColor","GregorianDateDisplay","toDateString","dayColor","day1","dateDisplay","dateDisplayClassName","GondorDateCell","holiday","GondorMonth","weeks","week","endere","addMonthFiller","GondorMonthVertical","weekdayName","scope","addVerticalMonthFiller","shift","GondorYear","GondorCalendar","startDay","updateReckoning","VerticalLayoutFiller","weekdays","MONTH_VIEW_VERTICAL","LANGUAGE_QUENYA","LANGUAGE_SINDARIN","dayClassName","dayExtra","dayExtraClassName","gregorianExtra","RivendellDateCell","RivendellMonth","RivendellMonthVertical","RivendellYear","RivendellCalendar","ShireDateCell","dayName","ShireMonth","overlithe","nextDates","ShireMonthVertical","ShireYear","ShireCalendar","WeekDayHeaderCell","upToWeekDay"],"sourceRoot":""}